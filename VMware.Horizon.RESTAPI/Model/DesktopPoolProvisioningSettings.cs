/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Virtual Center provisioning settings for the automated desktop pool.
    /// </summary>
    [DataContract]
    public partial class DesktopPoolProvisioningSettings :  IEquatable<DesktopPoolProvisioningSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DesktopPoolProvisioningSettings" /> class.
        /// </summary>
        /// <param name="addVirtualTpm">Whether to add Virtual TPM device..</param>
        /// <param name="baseSnapshotId">Applicable To: Linked/instant clone automated desktop pools.&lt;br&gt;Base image snapshot for linked clone desktop pool and current image snapshot for instant clone desktop pool..</param>
        /// <param name="datacenterId">Datacenter within which the desktop pool is configured..</param>
        /// <param name="hostOrClusterId">Host or cluster where the machines are deployed in..</param>
        /// <param name="imStreamId">Applicable To: Full/instant clone automated desktop pools.&lt;br&gt;Image management stream used in desktop pool when Image Management feature is enabled..</param>
        /// <param name="imTagId">Applicable To: Full/instant clone automated desktop pools.&lt;br&gt;Image management tag associated with the selected image management stream which is used in desktop pool when Image Management feature is enabled..</param>
        /// <param name="minReadyVmsOnVcomposerMaintenance">Applicable To: Linked clone automated desktop pools.&lt;br&gt;Minimum number of ready (provisioned) machines during View Composer maintenance operations..</param>
        /// <param name="parentVmId">Applicable To: Linked/instant clone automated desktop pools.&lt;br&gt;Base image VM for linked clone desktop pool and current image for instant clone desktop pool..</param>
        /// <param name="resourcePoolId">Resource pool to deploy the machines..</param>
        /// <param name="vmFolderId">VM folder where the machines are deployed to..</param>
        /// <param name="vmTemplateId">Applicable To: Full clone automated desktop pools.&lt;br&gt;Template from which full clone machines are deployed..</param>
        public DesktopPoolProvisioningSettings(bool? addVirtualTpm = default(bool?), string baseSnapshotId = default(string), string datacenterId = default(string), string hostOrClusterId = default(string), string imStreamId = default(string), string imTagId = default(string), int? minReadyVmsOnVcomposerMaintenance = default(int?), string parentVmId = default(string), string resourcePoolId = default(string), string vmFolderId = default(string), string vmTemplateId = default(string))
        {
            this.AddVirtualTpm = addVirtualTpm;
            this.BaseSnapshotId = baseSnapshotId;
            this.DatacenterId = datacenterId;
            this.HostOrClusterId = hostOrClusterId;
            this.ImStreamId = imStreamId;
            this.ImTagId = imTagId;
            this.MinReadyVmsOnVcomposerMaintenance = minReadyVmsOnVcomposerMaintenance;
            this.ParentVmId = parentVmId;
            this.ResourcePoolId = resourcePoolId;
            this.VmFolderId = vmFolderId;
            this.VmTemplateId = vmTemplateId;
        }
        
        /// <summary>
        /// Whether to add Virtual TPM device.
        /// </summary>
        /// <value>Whether to add Virtual TPM device.</value>
        [DataMember(Name="add_virtual_tpm", EmitDefaultValue=false)]
        public bool? AddVirtualTpm { get; set; }

        /// <summary>
        /// Applicable To: Linked/instant clone automated desktop pools.&lt;br&gt;Base image snapshot for linked clone desktop pool and current image snapshot for instant clone desktop pool.
        /// </summary>
        /// <value>Applicable To: Linked/instant clone automated desktop pools.&lt;br&gt;Base image snapshot for linked clone desktop pool and current image snapshot for instant clone desktop pool.</value>
        [DataMember(Name="base_snapshot_id", EmitDefaultValue=false)]
        public string BaseSnapshotId { get; set; }

        /// <summary>
        /// Datacenter within which the desktop pool is configured.
        /// </summary>
        /// <value>Datacenter within which the desktop pool is configured.</value>
        [DataMember(Name="datacenter_id", EmitDefaultValue=false)]
        public string DatacenterId { get; set; }

        /// <summary>
        /// Host or cluster where the machines are deployed in.
        /// </summary>
        /// <value>Host or cluster where the machines are deployed in.</value>
        [DataMember(Name="host_or_cluster_id", EmitDefaultValue=false)]
        public string HostOrClusterId { get; set; }

        /// <summary>
        /// Applicable To: Full/instant clone automated desktop pools.&lt;br&gt;Image management stream used in desktop pool when Image Management feature is enabled.
        /// </summary>
        /// <value>Applicable To: Full/instant clone automated desktop pools.&lt;br&gt;Image management stream used in desktop pool when Image Management feature is enabled.</value>
        [DataMember(Name="im_stream_id", EmitDefaultValue=false)]
        public string ImStreamId { get; set; }

        /// <summary>
        /// Applicable To: Full/instant clone automated desktop pools.&lt;br&gt;Image management tag associated with the selected image management stream which is used in desktop pool when Image Management feature is enabled.
        /// </summary>
        /// <value>Applicable To: Full/instant clone automated desktop pools.&lt;br&gt;Image management tag associated with the selected image management stream which is used in desktop pool when Image Management feature is enabled.</value>
        [DataMember(Name="im_tag_id", EmitDefaultValue=false)]
        public string ImTagId { get; set; }

        /// <summary>
        /// Applicable To: Linked clone automated desktop pools.&lt;br&gt;Minimum number of ready (provisioned) machines during View Composer maintenance operations.
        /// </summary>
        /// <value>Applicable To: Linked clone automated desktop pools.&lt;br&gt;Minimum number of ready (provisioned) machines during View Composer maintenance operations.</value>
        [DataMember(Name="min_ready_vms_on_vcomposer_maintenance", EmitDefaultValue=false)]
        public int? MinReadyVmsOnVcomposerMaintenance { get; set; }

        /// <summary>
        /// Applicable To: Linked/instant clone automated desktop pools.&lt;br&gt;Base image VM for linked clone desktop pool and current image for instant clone desktop pool.
        /// </summary>
        /// <value>Applicable To: Linked/instant clone automated desktop pools.&lt;br&gt;Base image VM for linked clone desktop pool and current image for instant clone desktop pool.</value>
        [DataMember(Name="parent_vm_id", EmitDefaultValue=false)]
        public string ParentVmId { get; set; }

        /// <summary>
        /// Resource pool to deploy the machines.
        /// </summary>
        /// <value>Resource pool to deploy the machines.</value>
        [DataMember(Name="resource_pool_id", EmitDefaultValue=false)]
        public string ResourcePoolId { get; set; }

        /// <summary>
        /// VM folder where the machines are deployed to.
        /// </summary>
        /// <value>VM folder where the machines are deployed to.</value>
        [DataMember(Name="vm_folder_id", EmitDefaultValue=false)]
        public string VmFolderId { get; set; }

        /// <summary>
        /// Applicable To: Full clone automated desktop pools.&lt;br&gt;Template from which full clone machines are deployed.
        /// </summary>
        /// <value>Applicable To: Full clone automated desktop pools.&lt;br&gt;Template from which full clone machines are deployed.</value>
        [DataMember(Name="vm_template_id", EmitDefaultValue=false)]
        public string VmTemplateId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DesktopPoolProvisioningSettings {\n");
            sb.Append("  AddVirtualTpm: ").Append(AddVirtualTpm).Append("\n");
            sb.Append("  BaseSnapshotId: ").Append(BaseSnapshotId).Append("\n");
            sb.Append("  DatacenterId: ").Append(DatacenterId).Append("\n");
            sb.Append("  HostOrClusterId: ").Append(HostOrClusterId).Append("\n");
            sb.Append("  ImStreamId: ").Append(ImStreamId).Append("\n");
            sb.Append("  ImTagId: ").Append(ImTagId).Append("\n");
            sb.Append("  MinReadyVmsOnVcomposerMaintenance: ").Append(MinReadyVmsOnVcomposerMaintenance).Append("\n");
            sb.Append("  ParentVmId: ").Append(ParentVmId).Append("\n");
            sb.Append("  ResourcePoolId: ").Append(ResourcePoolId).Append("\n");
            sb.Append("  VmFolderId: ").Append(VmFolderId).Append("\n");
            sb.Append("  VmTemplateId: ").Append(VmTemplateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DesktopPoolProvisioningSettings);
        }

        /// <summary>
        /// Returns true if DesktopPoolProvisioningSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of DesktopPoolProvisioningSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DesktopPoolProvisioningSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddVirtualTpm == input.AddVirtualTpm ||
                    (this.AddVirtualTpm != null &&
                    this.AddVirtualTpm.Equals(input.AddVirtualTpm))
                ) && 
                (
                    this.BaseSnapshotId == input.BaseSnapshotId ||
                    (this.BaseSnapshotId != null &&
                    this.BaseSnapshotId.Equals(input.BaseSnapshotId))
                ) && 
                (
                    this.DatacenterId == input.DatacenterId ||
                    (this.DatacenterId != null &&
                    this.DatacenterId.Equals(input.DatacenterId))
                ) && 
                (
                    this.HostOrClusterId == input.HostOrClusterId ||
                    (this.HostOrClusterId != null &&
                    this.HostOrClusterId.Equals(input.HostOrClusterId))
                ) && 
                (
                    this.ImStreamId == input.ImStreamId ||
                    (this.ImStreamId != null &&
                    this.ImStreamId.Equals(input.ImStreamId))
                ) && 
                (
                    this.ImTagId == input.ImTagId ||
                    (this.ImTagId != null &&
                    this.ImTagId.Equals(input.ImTagId))
                ) && 
                (
                    this.MinReadyVmsOnVcomposerMaintenance == input.MinReadyVmsOnVcomposerMaintenance ||
                    (this.MinReadyVmsOnVcomposerMaintenance != null &&
                    this.MinReadyVmsOnVcomposerMaintenance.Equals(input.MinReadyVmsOnVcomposerMaintenance))
                ) && 
                (
                    this.ParentVmId == input.ParentVmId ||
                    (this.ParentVmId != null &&
                    this.ParentVmId.Equals(input.ParentVmId))
                ) && 
                (
                    this.ResourcePoolId == input.ResourcePoolId ||
                    (this.ResourcePoolId != null &&
                    this.ResourcePoolId.Equals(input.ResourcePoolId))
                ) && 
                (
                    this.VmFolderId == input.VmFolderId ||
                    (this.VmFolderId != null &&
                    this.VmFolderId.Equals(input.VmFolderId))
                ) && 
                (
                    this.VmTemplateId == input.VmTemplateId ||
                    (this.VmTemplateId != null &&
                    this.VmTemplateId.Equals(input.VmTemplateId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddVirtualTpm != null)
                    hashCode = hashCode * 59 + this.AddVirtualTpm.GetHashCode();
                if (this.BaseSnapshotId != null)
                    hashCode = hashCode * 59 + this.BaseSnapshotId.GetHashCode();
                if (this.DatacenterId != null)
                    hashCode = hashCode * 59 + this.DatacenterId.GetHashCode();
                if (this.HostOrClusterId != null)
                    hashCode = hashCode * 59 + this.HostOrClusterId.GetHashCode();
                if (this.ImStreamId != null)
                    hashCode = hashCode * 59 + this.ImStreamId.GetHashCode();
                if (this.ImTagId != null)
                    hashCode = hashCode * 59 + this.ImTagId.GetHashCode();
                if (this.MinReadyVmsOnVcomposerMaintenance != null)
                    hashCode = hashCode * 59 + this.MinReadyVmsOnVcomposerMaintenance.GetHashCode();
                if (this.ParentVmId != null)
                    hashCode = hashCode * 59 + this.ParentVmId.GetHashCode();
                if (this.ResourcePoolId != null)
                    hashCode = hashCode * 59 + this.ResourcePoolId.GetHashCode();
                if (this.VmFolderId != null)
                    hashCode = hashCode * 59 + this.VmFolderId.GetHashCode();
                if (this.VmTemplateId != null)
                    hashCode = hashCode * 59 + this.VmTemplateId.GetHashCode();
                return hashCode;
            }
        }
    }

}
