/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Provisioning status data about this automated desktop pool.
    /// </summary>
    [DataContract]
    public partial class DesktopPoolProvisioningStatusData :  IEquatable<DesktopPoolProvisioningStatusData>
    {
        /// <summary>
        /// Applicable To: instant clone automated desktop pools.&lt;br&gt;This represents the state of the current image of this instant clone desktop pool. * READY: This is the state of the current image after successful completion of pool creation operation. At this stage the current image is ready to be used to create the instant clones. Please note that this state is also reached from UNPUBLISHING state on successful completion of editing of cluster or editing of datastore(s) operations. * FAILED: This is the state of the current image if instant clone pool delete operation has failed or timed out. * PENDING_UNPUBLISH: This is the state of the current image before instant clone pool delete or cluster edit or datastore(s) edit operation(s) begins. * UNPUBLISHING: This is the transient state of the current image when instant clone pool delete or cluster edit or datastore(s) edit operation(s) is going on.
        /// </summary>
        /// <value>Applicable To: instant clone automated desktop pools.&lt;br&gt;This represents the state of the current image of this instant clone desktop pool. * READY: This is the state of the current image after successful completion of pool creation operation. At this stage the current image is ready to be used to create the instant clones. Please note that this state is also reached from UNPUBLISHING state on successful completion of editing of cluster or editing of datastore(s) operations. * FAILED: This is the state of the current image if instant clone pool delete operation has failed or timed out. * PENDING_UNPUBLISH: This is the state of the current image before instant clone pool delete or cluster edit or datastore(s) edit operation(s) begins. * UNPUBLISHING: This is the transient state of the current image when instant clone pool delete or cluster edit or datastore(s) edit operation(s) is going on.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InstantCloneCurrentImageStateEnum
        {
            
            /// <summary>
            /// Enum READY for value: READY
            /// </summary>
            [EnumMember(Value = "READY")]
            READY = 1,
            
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 2,
            
            /// <summary>
            /// Enum PENDINGUNPUBLISH for value: PENDING_UNPUBLISH
            /// </summary>
            [EnumMember(Value = "PENDING_UNPUBLISH")]
            PENDINGUNPUBLISH = 3,
            
            /// <summary>
            /// Enum UNPUBLISHING for value: UNPUBLISHING
            /// </summary>
            [EnumMember(Value = "UNPUBLISHING")]
            UNPUBLISHING = 4
        }

        /// <summary>
        /// Applicable To: instant clone automated desktop pools.&lt;br&gt;This represents the state of the current image of this instant clone desktop pool. * READY: This is the state of the current image after successful completion of pool creation operation. At this stage the current image is ready to be used to create the instant clones. Please note that this state is also reached from UNPUBLISHING state on successful completion of editing of cluster or editing of datastore(s) operations. * FAILED: This is the state of the current image if instant clone pool delete operation has failed or timed out. * PENDING_UNPUBLISH: This is the state of the current image before instant clone pool delete or cluster edit or datastore(s) edit operation(s) begins. * UNPUBLISHING: This is the transient state of the current image when instant clone pool delete or cluster edit or datastore(s) edit operation(s) is going on.
        /// </summary>
        /// <value>Applicable To: instant clone automated desktop pools.&lt;br&gt;This represents the state of the current image of this instant clone desktop pool. * READY: This is the state of the current image after successful completion of pool creation operation. At this stage the current image is ready to be used to create the instant clones. Please note that this state is also reached from UNPUBLISHING state on successful completion of editing of cluster or editing of datastore(s) operations. * FAILED: This is the state of the current image if instant clone pool delete operation has failed or timed out. * PENDING_UNPUBLISH: This is the state of the current image before instant clone pool delete or cluster edit or datastore(s) edit operation(s) begins. * UNPUBLISHING: This is the transient state of the current image when instant clone pool delete or cluster edit or datastore(s) edit operation(s) is going on.</value>
        [DataMember(Name="instant_clone_current_image_state", EmitDefaultValue=false)]
        public InstantCloneCurrentImageStateEnum? InstantCloneCurrentImageState { get; set; }
        /// <summary>
        /// Applicable To: instant clone automated desktop pools.&lt;br&gt;The operation that this instant clone desktop pool is undergoing. * NONE: There is no current operation on the desktop pool. * INITIAL_PUBLISH: The desktop pool has just been created and is undergoing initial publishing. * SCHEDULE_PUSH_IMAGE: The push operation is scheduled on the desktop pool. * CANCEL_SCHEDULED_PUSH_IMAGE: The scheduled push operation on the desktop pool is being cancelled. * INFRASTRUCTURE_CHANGE: A cluster or datastore change operation was requested for the desktop pool. * FINAL_UNPUBLISH: A desktop pool has been deleted and is undergoing final unpublishing.
        /// </summary>
        /// <value>Applicable To: instant clone automated desktop pools.&lt;br&gt;The operation that this instant clone desktop pool is undergoing. * NONE: There is no current operation on the desktop pool. * INITIAL_PUBLISH: The desktop pool has just been created and is undergoing initial publishing. * SCHEDULE_PUSH_IMAGE: The push operation is scheduled on the desktop pool. * CANCEL_SCHEDULED_PUSH_IMAGE: The scheduled push operation on the desktop pool is being cancelled. * INFRASTRUCTURE_CHANGE: A cluster or datastore change operation was requested for the desktop pool. * FINAL_UNPUBLISH: A desktop pool has been deleted and is undergoing final unpublishing.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InstantCloneOperationEnum
        {
            
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,
            
            /// <summary>
            /// Enum INITIALPUBLISH for value: INITIAL_PUBLISH
            /// </summary>
            [EnumMember(Value = "INITIAL_PUBLISH")]
            INITIALPUBLISH = 2,
            
            /// <summary>
            /// Enum SCHEDULEPUSHIMAGE for value: SCHEDULE_PUSH_IMAGE
            /// </summary>
            [EnumMember(Value = "SCHEDULE_PUSH_IMAGE")]
            SCHEDULEPUSHIMAGE = 3,
            
            /// <summary>
            /// Enum CANCELSCHEDULEDPUSHIMAGE for value: CANCEL_SCHEDULED_PUSH_IMAGE
            /// </summary>
            [EnumMember(Value = "CANCEL_SCHEDULED_PUSH_IMAGE")]
            CANCELSCHEDULEDPUSHIMAGE = 4,
            
            /// <summary>
            /// Enum INFRASTRUCTURECHANGE for value: INFRASTRUCTURE_CHANGE
            /// </summary>
            [EnumMember(Value = "INFRASTRUCTURE_CHANGE")]
            INFRASTRUCTURECHANGE = 5,
            
            /// <summary>
            /// Enum FINALUNPUBLISH for value: FINAL_UNPUBLISH
            /// </summary>
            [EnumMember(Value = "FINAL_UNPUBLISH")]
            FINALUNPUBLISH = 6
        }

        /// <summary>
        /// Applicable To: instant clone automated desktop pools.&lt;br&gt;The operation that this instant clone desktop pool is undergoing. * NONE: There is no current operation on the desktop pool. * INITIAL_PUBLISH: The desktop pool has just been created and is undergoing initial publishing. * SCHEDULE_PUSH_IMAGE: The push operation is scheduled on the desktop pool. * CANCEL_SCHEDULED_PUSH_IMAGE: The scheduled push operation on the desktop pool is being cancelled. * INFRASTRUCTURE_CHANGE: A cluster or datastore change operation was requested for the desktop pool. * FINAL_UNPUBLISH: A desktop pool has been deleted and is undergoing final unpublishing.
        /// </summary>
        /// <value>Applicable To: instant clone automated desktop pools.&lt;br&gt;The operation that this instant clone desktop pool is undergoing. * NONE: There is no current operation on the desktop pool. * INITIAL_PUBLISH: The desktop pool has just been created and is undergoing initial publishing. * SCHEDULE_PUSH_IMAGE: The push operation is scheduled on the desktop pool. * CANCEL_SCHEDULED_PUSH_IMAGE: The scheduled push operation on the desktop pool is being cancelled. * INFRASTRUCTURE_CHANGE: A cluster or datastore change operation was requested for the desktop pool. * FINAL_UNPUBLISH: A desktop pool has been deleted and is undergoing final unpublishing.</value>
        [DataMember(Name="instant_clone_operation", EmitDefaultValue=false)]
        public InstantCloneOperationEnum? InstantCloneOperation { get; set; }
        /// <summary>
        /// Applicable To: instant clone automated desktop pools.&lt;br&gt;This represents the state of the pending image of this instant clone desktop pool. This will be null when there is no pending image for the desktop pool. * PENDING_PUBLISH: This is the initial transient state of the pending image before instant clone pool creation operation has started. * PUBLISHING: This is the transient state of the pending image when creation of instant clone pool operation is going on. * UNPUBLISHING: This is the transient state of the pending image when instant clone pool delete or cluster edit or datastore(s) edit operation(s) is going on. * READY: This is the state of the pending image after successful publish of the pending image and before that image has been upgraded to the current image. This is normally seen after successful publish for a push image which has been scheduled to trigger at a later time. * FAILED: This is the state of the pending image if creation of instant clone pool operation has failed or timed out.
        /// </summary>
        /// <value>Applicable To: instant clone automated desktop pools.&lt;br&gt;This represents the state of the pending image of this instant clone desktop pool. This will be null when there is no pending image for the desktop pool. * PENDING_PUBLISH: This is the initial transient state of the pending image before instant clone pool creation operation has started. * PUBLISHING: This is the transient state of the pending image when creation of instant clone pool operation is going on. * UNPUBLISHING: This is the transient state of the pending image when instant clone pool delete or cluster edit or datastore(s) edit operation(s) is going on. * READY: This is the state of the pending image after successful publish of the pending image and before that image has been upgraded to the current image. This is normally seen after successful publish for a push image which has been scheduled to trigger at a later time. * FAILED: This is the state of the pending image if creation of instant clone pool operation has failed or timed out.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InstantClonePendingImageStateEnum
        {
            
            /// <summary>
            /// Enum PENDINGPUBLISH for value: PENDING_PUBLISH
            /// </summary>
            [EnumMember(Value = "PENDING_PUBLISH")]
            PENDINGPUBLISH = 1,
            
            /// <summary>
            /// Enum PUBLISHING for value: PUBLISHING
            /// </summary>
            [EnumMember(Value = "PUBLISHING")]
            PUBLISHING = 2,
            
            /// <summary>
            /// Enum UNPUBLISHING for value: UNPUBLISHING
            /// </summary>
            [EnumMember(Value = "UNPUBLISHING")]
            UNPUBLISHING = 3,
            
            /// <summary>
            /// Enum READY for value: READY
            /// </summary>
            [EnumMember(Value = "READY")]
            READY = 4,
            
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 5
        }

        /// <summary>
        /// Applicable To: instant clone automated desktop pools.&lt;br&gt;This represents the state of the pending image of this instant clone desktop pool. This will be null when there is no pending image for the desktop pool. * PENDING_PUBLISH: This is the initial transient state of the pending image before instant clone pool creation operation has started. * PUBLISHING: This is the transient state of the pending image when creation of instant clone pool operation is going on. * UNPUBLISHING: This is the transient state of the pending image when instant clone pool delete or cluster edit or datastore(s) edit operation(s) is going on. * READY: This is the state of the pending image after successful publish of the pending image and before that image has been upgraded to the current image. This is normally seen after successful publish for a push image which has been scheduled to trigger at a later time. * FAILED: This is the state of the pending image if creation of instant clone pool operation has failed or timed out.
        /// </summary>
        /// <value>Applicable To: instant clone automated desktop pools.&lt;br&gt;This represents the state of the pending image of this instant clone desktop pool. This will be null when there is no pending image for the desktop pool. * PENDING_PUBLISH: This is the initial transient state of the pending image before instant clone pool creation operation has started. * PUBLISHING: This is the transient state of the pending image when creation of instant clone pool operation is going on. * UNPUBLISHING: This is the transient state of the pending image when instant clone pool delete or cluster edit or datastore(s) edit operation(s) is going on. * READY: This is the state of the pending image after successful publish of the pending image and before that image has been upgraded to the current image. This is normally seen after successful publish for a push image which has been scheduled to trigger at a later time. * FAILED: This is the state of the pending image if creation of instant clone pool operation has failed or timed out.</value>
        [DataMember(Name="instant_clone_pending_image_state", EmitDefaultValue=false)]
        public InstantClonePendingImageStateEnum? InstantClonePendingImageState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DesktopPoolProvisioningStatusData" /> class.
        /// </summary>
        /// <param name="instantCloneCurrentImageState">Applicable To: instant clone automated desktop pools.&lt;br&gt;This represents the state of the current image of this instant clone desktop pool. * READY: This is the state of the current image after successful completion of pool creation operation. At this stage the current image is ready to be used to create the instant clones. Please note that this state is also reached from UNPUBLISHING state on successful completion of editing of cluster or editing of datastore(s) operations. * FAILED: This is the state of the current image if instant clone pool delete operation has failed or timed out. * PENDING_UNPUBLISH: This is the state of the current image before instant clone pool delete or cluster edit or datastore(s) edit operation(s) begins. * UNPUBLISHING: This is the transient state of the current image when instant clone pool delete or cluster edit or datastore(s) edit operation(s) is going on..</param>
        /// <param name="instantCloneOperation">Applicable To: instant clone automated desktop pools.&lt;br&gt;The operation that this instant clone desktop pool is undergoing. * NONE: There is no current operation on the desktop pool. * INITIAL_PUBLISH: The desktop pool has just been created and is undergoing initial publishing. * SCHEDULE_PUSH_IMAGE: The push operation is scheduled on the desktop pool. * CANCEL_SCHEDULED_PUSH_IMAGE: The scheduled push operation on the desktop pool is being cancelled. * INFRASTRUCTURE_CHANGE: A cluster or datastore change operation was requested for the desktop pool. * FINAL_UNPUBLISH: A desktop pool has been deleted and is undergoing final unpublishing..</param>
        /// <param name="instantClonePendingImStreamId">Applicable To: instant clone automated desktop pools.&lt;br&gt;Pending image management stream for instant clone desktop pools..</param>
        /// <param name="instantClonePendingImTagId">Applicable To: instant clone automated desktop pools.&lt;br&gt;Pending image management tag for instant clone desktop pools.</param>
        /// <param name="instantClonePendingImageError">Applicable To: instant clone automated desktop pools.&lt;br&gt;This represents the error message if publishing of push image operation is failed..</param>
        /// <param name="instantClonePendingImageParentVmId">Applicable To: instant clone automated desktop pools.&lt;br&gt;Pending base image VM for instant clone desktop pools. This is used to return the information about the parent VM of the pending Image..</param>
        /// <param name="instantClonePendingImageProgress">Applicable To: instant clone automated desktop pools.&lt;br&gt;This represents the pending image publish progress in percentage for an instant clone desktop pool..</param>
        /// <param name="instantClonePendingImageSnapshotId">Applicable To: instant clone automated desktop pools.&lt;br&gt;Pending base image snapshot for instant clone desktop pools. This is used to return the information about the snapshot of the pending image..</param>
        /// <param name="instantClonePendingImageState">Applicable To: instant clone automated desktop pools.&lt;br&gt;This represents the state of the pending image of this instant clone desktop pool. This will be null when there is no pending image for the desktop pool. * PENDING_PUBLISH: This is the initial transient state of the pending image before instant clone pool creation operation has started. * PUBLISHING: This is the transient state of the pending image when creation of instant clone pool operation is going on. * UNPUBLISHING: This is the transient state of the pending image when instant clone pool delete or cluster edit or datastore(s) edit operation(s) is going on. * READY: This is the state of the pending image after successful publish of the pending image and before that image has been upgraded to the current image. This is normally seen after successful publish for a push image which has been scheduled to trigger at a later time. * FAILED: This is the state of the pending image if creation of instant clone pool operation has failed or timed out..</param>
        /// <param name="instantClonePushImageSettings">Applicable To: instant clone automated desktop pools.&lt;br&gt;If the current operation is a push image, the settings for that operation..</param>
        /// <param name="lastProvisioningError">String message detailing the last provisioning error on this desktop pool while stop_provisioning_on_error is enabled. This will be cleared when enable_provisioning is updated to true..</param>
        /// <param name="lastProvisioningErrorTime">Time the last provisioning error occurred on this desktop while stop_provisioning_on_error is enabled. This will be cleared when enable_provisioning is updated to true. Measured as epoch time..</param>
        public DesktopPoolProvisioningStatusData(InstantCloneCurrentImageStateEnum? instantCloneCurrentImageState = default(InstantCloneCurrentImageStateEnum?), InstantCloneOperationEnum? instantCloneOperation = default(InstantCloneOperationEnum?), string instantClonePendingImStreamId = default(string), string instantClonePendingImTagId = default(string), string instantClonePendingImageError = default(string), string instantClonePendingImageParentVmId = default(string), int? instantClonePendingImageProgress = default(int?), string instantClonePendingImageSnapshotId = default(string), InstantClonePendingImageStateEnum? instantClonePendingImageState = default(InstantClonePendingImageStateEnum?), DesktopPoolInstantClonePushImageSettings instantClonePushImageSettings = default(DesktopPoolInstantClonePushImageSettings), string lastProvisioningError = default(string), long? lastProvisioningErrorTime = default(long?))
        {
            this.InstantCloneCurrentImageState = instantCloneCurrentImageState;
            this.InstantCloneOperation = instantCloneOperation;
            this.InstantClonePendingImStreamId = instantClonePendingImStreamId;
            this.InstantClonePendingImTagId = instantClonePendingImTagId;
            this.InstantClonePendingImageError = instantClonePendingImageError;
            this.InstantClonePendingImageParentVmId = instantClonePendingImageParentVmId;
            this.InstantClonePendingImageProgress = instantClonePendingImageProgress;
            this.InstantClonePendingImageSnapshotId = instantClonePendingImageSnapshotId;
            this.InstantClonePendingImageState = instantClonePendingImageState;
            this.InstantClonePushImageSettings = instantClonePushImageSettings;
            this.LastProvisioningError = lastProvisioningError;
            this.LastProvisioningErrorTime = lastProvisioningErrorTime;
        }
        


        /// <summary>
        /// Applicable To: instant clone automated desktop pools.&lt;br&gt;Pending image management stream for instant clone desktop pools.
        /// </summary>
        /// <value>Applicable To: instant clone automated desktop pools.&lt;br&gt;Pending image management stream for instant clone desktop pools.</value>
        [DataMember(Name="instant_clone_pending_im_stream_id", EmitDefaultValue=false)]
        public string InstantClonePendingImStreamId { get; set; }

        /// <summary>
        /// Applicable To: instant clone automated desktop pools.&lt;br&gt;Pending image management tag for instant clone desktop pools
        /// </summary>
        /// <value>Applicable To: instant clone automated desktop pools.&lt;br&gt;Pending image management tag for instant clone desktop pools</value>
        [DataMember(Name="instant_clone_pending_im_tag_id", EmitDefaultValue=false)]
        public string InstantClonePendingImTagId { get; set; }

        /// <summary>
        /// Applicable To: instant clone automated desktop pools.&lt;br&gt;This represents the error message if publishing of push image operation is failed.
        /// </summary>
        /// <value>Applicable To: instant clone automated desktop pools.&lt;br&gt;This represents the error message if publishing of push image operation is failed.</value>
        [DataMember(Name="instant_clone_pending_image_error", EmitDefaultValue=false)]
        public string InstantClonePendingImageError { get; set; }

        /// <summary>
        /// Applicable To: instant clone automated desktop pools.&lt;br&gt;Pending base image VM for instant clone desktop pools. This is used to return the information about the parent VM of the pending Image.
        /// </summary>
        /// <value>Applicable To: instant clone automated desktop pools.&lt;br&gt;Pending base image VM for instant clone desktop pools. This is used to return the information about the parent VM of the pending Image.</value>
        [DataMember(Name="instant_clone_pending_image_parent_vm_id", EmitDefaultValue=false)]
        public string InstantClonePendingImageParentVmId { get; set; }

        /// <summary>
        /// Applicable To: instant clone automated desktop pools.&lt;br&gt;This represents the pending image publish progress in percentage for an instant clone desktop pool.
        /// </summary>
        /// <value>Applicable To: instant clone automated desktop pools.&lt;br&gt;This represents the pending image publish progress in percentage for an instant clone desktop pool.</value>
        [DataMember(Name="instant_clone_pending_image_progress", EmitDefaultValue=false)]
        public int? InstantClonePendingImageProgress { get; set; }

        /// <summary>
        /// Applicable To: instant clone automated desktop pools.&lt;br&gt;Pending base image snapshot for instant clone desktop pools. This is used to return the information about the snapshot of the pending image.
        /// </summary>
        /// <value>Applicable To: instant clone automated desktop pools.&lt;br&gt;Pending base image snapshot for instant clone desktop pools. This is used to return the information about the snapshot of the pending image.</value>
        [DataMember(Name="instant_clone_pending_image_snapshot_id", EmitDefaultValue=false)]
        public string InstantClonePendingImageSnapshotId { get; set; }


        /// <summary>
        /// Applicable To: instant clone automated desktop pools.&lt;br&gt;If the current operation is a push image, the settings for that operation.
        /// </summary>
        /// <value>Applicable To: instant clone automated desktop pools.&lt;br&gt;If the current operation is a push image, the settings for that operation.</value>
        [DataMember(Name="instant_clone_push_image_settings", EmitDefaultValue=false)]
        public DesktopPoolInstantClonePushImageSettings InstantClonePushImageSettings { get; set; }

        /// <summary>
        /// String message detailing the last provisioning error on this desktop pool while stop_provisioning_on_error is enabled. This will be cleared when enable_provisioning is updated to true.
        /// </summary>
        /// <value>String message detailing the last provisioning error on this desktop pool while stop_provisioning_on_error is enabled. This will be cleared when enable_provisioning is updated to true.</value>
        [DataMember(Name="last_provisioning_error", EmitDefaultValue=false)]
        public string LastProvisioningError { get; set; }

        /// <summary>
        /// Time the last provisioning error occurred on this desktop while stop_provisioning_on_error is enabled. This will be cleared when enable_provisioning is updated to true. Measured as epoch time.
        /// </summary>
        /// <value>Time the last provisioning error occurred on this desktop while stop_provisioning_on_error is enabled. This will be cleared when enable_provisioning is updated to true. Measured as epoch time.</value>
        [DataMember(Name="last_provisioning_error_time", EmitDefaultValue=false)]
        public long? LastProvisioningErrorTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DesktopPoolProvisioningStatusData {\n");
            sb.Append("  InstantCloneCurrentImageState: ").Append(InstantCloneCurrentImageState).Append("\n");
            sb.Append("  InstantCloneOperation: ").Append(InstantCloneOperation).Append("\n");
            sb.Append("  InstantClonePendingImStreamId: ").Append(InstantClonePendingImStreamId).Append("\n");
            sb.Append("  InstantClonePendingImTagId: ").Append(InstantClonePendingImTagId).Append("\n");
            sb.Append("  InstantClonePendingImageError: ").Append(InstantClonePendingImageError).Append("\n");
            sb.Append("  InstantClonePendingImageParentVmId: ").Append(InstantClonePendingImageParentVmId).Append("\n");
            sb.Append("  InstantClonePendingImageProgress: ").Append(InstantClonePendingImageProgress).Append("\n");
            sb.Append("  InstantClonePendingImageSnapshotId: ").Append(InstantClonePendingImageSnapshotId).Append("\n");
            sb.Append("  InstantClonePendingImageState: ").Append(InstantClonePendingImageState).Append("\n");
            sb.Append("  InstantClonePushImageSettings: ").Append(InstantClonePushImageSettings).Append("\n");
            sb.Append("  LastProvisioningError: ").Append(LastProvisioningError).Append("\n");
            sb.Append("  LastProvisioningErrorTime: ").Append(LastProvisioningErrorTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DesktopPoolProvisioningStatusData);
        }

        /// <summary>
        /// Returns true if DesktopPoolProvisioningStatusData instances are equal
        /// </summary>
        /// <param name="input">Instance of DesktopPoolProvisioningStatusData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DesktopPoolProvisioningStatusData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstantCloneCurrentImageState == input.InstantCloneCurrentImageState ||
                    (this.InstantCloneCurrentImageState != null &&
                    this.InstantCloneCurrentImageState.Equals(input.InstantCloneCurrentImageState))
                ) && 
                (
                    this.InstantCloneOperation == input.InstantCloneOperation ||
                    (this.InstantCloneOperation != null &&
                    this.InstantCloneOperation.Equals(input.InstantCloneOperation))
                ) && 
                (
                    this.InstantClonePendingImStreamId == input.InstantClonePendingImStreamId ||
                    (this.InstantClonePendingImStreamId != null &&
                    this.InstantClonePendingImStreamId.Equals(input.InstantClonePendingImStreamId))
                ) && 
                (
                    this.InstantClonePendingImTagId == input.InstantClonePendingImTagId ||
                    (this.InstantClonePendingImTagId != null &&
                    this.InstantClonePendingImTagId.Equals(input.InstantClonePendingImTagId))
                ) && 
                (
                    this.InstantClonePendingImageError == input.InstantClonePendingImageError ||
                    (this.InstantClonePendingImageError != null &&
                    this.InstantClonePendingImageError.Equals(input.InstantClonePendingImageError))
                ) && 
                (
                    this.InstantClonePendingImageParentVmId == input.InstantClonePendingImageParentVmId ||
                    (this.InstantClonePendingImageParentVmId != null &&
                    this.InstantClonePendingImageParentVmId.Equals(input.InstantClonePendingImageParentVmId))
                ) && 
                (
                    this.InstantClonePendingImageProgress == input.InstantClonePendingImageProgress ||
                    (this.InstantClonePendingImageProgress != null &&
                    this.InstantClonePendingImageProgress.Equals(input.InstantClonePendingImageProgress))
                ) && 
                (
                    this.InstantClonePendingImageSnapshotId == input.InstantClonePendingImageSnapshotId ||
                    (this.InstantClonePendingImageSnapshotId != null &&
                    this.InstantClonePendingImageSnapshotId.Equals(input.InstantClonePendingImageSnapshotId))
                ) && 
                (
                    this.InstantClonePendingImageState == input.InstantClonePendingImageState ||
                    (this.InstantClonePendingImageState != null &&
                    this.InstantClonePendingImageState.Equals(input.InstantClonePendingImageState))
                ) && 
                (
                    this.InstantClonePushImageSettings == input.InstantClonePushImageSettings ||
                    (this.InstantClonePushImageSettings != null &&
                    this.InstantClonePushImageSettings.Equals(input.InstantClonePushImageSettings))
                ) && 
                (
                    this.LastProvisioningError == input.LastProvisioningError ||
                    (this.LastProvisioningError != null &&
                    this.LastProvisioningError.Equals(input.LastProvisioningError))
                ) && 
                (
                    this.LastProvisioningErrorTime == input.LastProvisioningErrorTime ||
                    (this.LastProvisioningErrorTime != null &&
                    this.LastProvisioningErrorTime.Equals(input.LastProvisioningErrorTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstantCloneCurrentImageState != null)
                    hashCode = hashCode * 59 + this.InstantCloneCurrentImageState.GetHashCode();
                if (this.InstantCloneOperation != null)
                    hashCode = hashCode * 59 + this.InstantCloneOperation.GetHashCode();
                if (this.InstantClonePendingImStreamId != null)
                    hashCode = hashCode * 59 + this.InstantClonePendingImStreamId.GetHashCode();
                if (this.InstantClonePendingImTagId != null)
                    hashCode = hashCode * 59 + this.InstantClonePendingImTagId.GetHashCode();
                if (this.InstantClonePendingImageError != null)
                    hashCode = hashCode * 59 + this.InstantClonePendingImageError.GetHashCode();
                if (this.InstantClonePendingImageParentVmId != null)
                    hashCode = hashCode * 59 + this.InstantClonePendingImageParentVmId.GetHashCode();
                if (this.InstantClonePendingImageProgress != null)
                    hashCode = hashCode * 59 + this.InstantClonePendingImageProgress.GetHashCode();
                if (this.InstantClonePendingImageSnapshotId != null)
                    hashCode = hashCode * 59 + this.InstantClonePendingImageSnapshotId.GetHashCode();
                if (this.InstantClonePendingImageState != null)
                    hashCode = hashCode * 59 + this.InstantClonePendingImageState.GetHashCode();
                if (this.InstantClonePushImageSettings != null)
                    hashCode = hashCode * 59 + this.InstantClonePushImageSettings.GetHashCode();
                if (this.LastProvisioningError != null)
                    hashCode = hashCode * 59 + this.LastProvisioningError.GetHashCode();
                if (this.LastProvisioningErrorTime != null)
                    hashCode = hashCode * 59 + this.LastProvisioningErrorTime.GetHashCode();
                return hashCode;
            }
        }
    }

}
