/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Settings for the push image operation.
    /// </summary>
    [DataContract]
    public partial class DesktopPoolInstantClonePushImageSettings :  IEquatable<DesktopPoolInstantClonePushImageSettings>
    {
        /// <summary>
        /// Determines when to perform the operation on machines which have an active session. * FORCE_LOGOFF: Users will be forced to log off when the system is ready to operate on their virtual machines. Before being forcibly logged off, users may have a grace period in which to save their work (Global Settings). * WAIT_FOR_LOGOFF: Wait for connected users to disconnect before the task starts. The operation starts immediately on machines without active sessions.
        /// </summary>
        /// <value>Determines when to perform the operation on machines which have an active session. * FORCE_LOGOFF: Users will be forced to log off when the system is ready to operate on their virtual machines. Before being forcibly logged off, users may have a grace period in which to save their work (Global Settings). * WAIT_FOR_LOGOFF: Wait for connected users to disconnect before the task starts. The operation starts immediately on machines without active sessions.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LogoffPolicyEnum
        {
            
            /// <summary>
            /// Enum FORCELOGOFF for value: FORCE_LOGOFF
            /// </summary>
            [EnumMember(Value = "FORCE_LOGOFF")]
            FORCELOGOFF = 1,
            
            /// <summary>
            /// Enum WAITFORLOGOFF for value: WAIT_FOR_LOGOFF
            /// </summary>
            [EnumMember(Value = "WAIT_FOR_LOGOFF")]
            WAITFORLOGOFF = 2
        }

        /// <summary>
        /// Determines when to perform the operation on machines which have an active session. * FORCE_LOGOFF: Users will be forced to log off when the system is ready to operate on their virtual machines. Before being forcibly logged off, users may have a grace period in which to save their work (Global Settings). * WAIT_FOR_LOGOFF: Wait for connected users to disconnect before the task starts. The operation starts immediately on machines without active sessions.
        /// </summary>
        /// <value>Determines when to perform the operation on machines which have an active session. * FORCE_LOGOFF: Users will be forced to log off when the system is ready to operate on their virtual machines. Before being forcibly logged off, users may have a grace period in which to save their work (Global Settings). * WAIT_FOR_LOGOFF: Wait for connected users to disconnect before the task starts. The operation starts immediately on machines without active sessions.</value>
        [DataMember(Name="logoff_policy", EmitDefaultValue=false)]
        public LogoffPolicyEnum? LogoffPolicy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DesktopPoolInstantClonePushImageSettings" /> class.
        /// </summary>
        /// <param name="addVirtualTpm">Whether to add Virtual TPM device..</param>
        /// <param name="logoffPolicy">Determines when to perform the operation on machines which have an active session. * FORCE_LOGOFF: Users will be forced to log off when the system is ready to operate on their virtual machines. Before being forcibly logged off, users may have a grace period in which to save their work (Global Settings). * WAIT_FOR_LOGOFF: Wait for connected users to disconnect before the task starts. The operation starts immediately on machines without active sessions..</param>
        /// <param name="startTime">When to start the operation. If unset or the time is in the past, the operation will begin immediately. Measured as epoch time..</param>
        /// <param name="stopOnFirstError">Indicates that the operation should stop on first error..</param>
        public DesktopPoolInstantClonePushImageSettings(bool? addVirtualTpm = default(bool?), LogoffPolicyEnum? logoffPolicy = default(LogoffPolicyEnum?), long? startTime = default(long?), bool? stopOnFirstError = default(bool?))
        {
            this.AddVirtualTpm = addVirtualTpm;
            this.LogoffPolicy = logoffPolicy;
            this.StartTime = startTime;
            this.StopOnFirstError = stopOnFirstError;
        }
        
        /// <summary>
        /// Whether to add Virtual TPM device.
        /// </summary>
        /// <value>Whether to add Virtual TPM device.</value>
        [DataMember(Name="add_virtual_tpm", EmitDefaultValue=false)]
        public bool? AddVirtualTpm { get; set; }


        /// <summary>
        /// When to start the operation. If unset or the time is in the past, the operation will begin immediately. Measured as epoch time.
        /// </summary>
        /// <value>When to start the operation. If unset or the time is in the past, the operation will begin immediately. Measured as epoch time.</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public long? StartTime { get; set; }

        /// <summary>
        /// Indicates that the operation should stop on first error.
        /// </summary>
        /// <value>Indicates that the operation should stop on first error.</value>
        [DataMember(Name="stop_on_first_error", EmitDefaultValue=false)]
        public bool? StopOnFirstError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DesktopPoolInstantClonePushImageSettings {\n");
            sb.Append("  AddVirtualTpm: ").Append(AddVirtualTpm).Append("\n");
            sb.Append("  LogoffPolicy: ").Append(LogoffPolicy).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  StopOnFirstError: ").Append(StopOnFirstError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DesktopPoolInstantClonePushImageSettings);
        }

        /// <summary>
        /// Returns true if DesktopPoolInstantClonePushImageSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of DesktopPoolInstantClonePushImageSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DesktopPoolInstantClonePushImageSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddVirtualTpm == input.AddVirtualTpm ||
                    (this.AddVirtualTpm != null &&
                    this.AddVirtualTpm.Equals(input.AddVirtualTpm))
                ) && 
                (
                    this.LogoffPolicy == input.LogoffPolicy ||
                    (this.LogoffPolicy != null &&
                    this.LogoffPolicy.Equals(input.LogoffPolicy))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.StopOnFirstError == input.StopOnFirstError ||
                    (this.StopOnFirstError != null &&
                    this.StopOnFirstError.Equals(input.StopOnFirstError))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddVirtualTpm != null)
                    hashCode = hashCode * 59 + this.AddVirtualTpm.GetHashCode();
                if (this.LogoffPolicy != null)
                    hashCode = hashCode * 59 + this.LogoffPolicy.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.StopOnFirstError != null)
                    hashCode = hashCode * 59 + this.StopOnFirstError.GetHashCode();
                return hashCode;
            }
        }
    }

}
