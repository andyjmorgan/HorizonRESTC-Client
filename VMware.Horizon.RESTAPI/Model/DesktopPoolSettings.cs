/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to Desktop Pool Settings.
    /// </summary>
    [DataContract]
    public partial class DesktopPoolSettings :  IEquatable<DesktopPoolSettings>
    {
        /// <summary>
        /// Supported session types for this desktop pool. If application sessions are selected to besupported then this desktop pool can be used for application pool creation. This will beuseful when the machines in the pool support application remoting. Default value of DESKTOP. * DESKTOP: Only desktop sessions are supported. * APPLICATION: Only application sessions are supported. * DESKTOP_AND_APPLICATION: Both desktop and application sessions are supported.
        /// </summary>
        /// <value>Supported session types for this desktop pool. If application sessions are selected to besupported then this desktop pool can be used for application pool creation. This will beuseful when the machines in the pool support application remoting. Default value of DESKTOP. * DESKTOP: Only desktop sessions are supported. * APPLICATION: Only application sessions are supported. * DESKTOP_AND_APPLICATION: Both desktop and application sessions are supported.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SessionTypeEnum
        {
            
            /// <summary>
            /// Enum DESKTOP for value: DESKTOP
            /// </summary>
            [EnumMember(Value = "DESKTOP")]
            DESKTOP = 1,
            
            /// <summary>
            /// Enum APPLICATION for value: APPLICATION
            /// </summary>
            [EnumMember(Value = "APPLICATION")]
            APPLICATION = 2,
            
            /// <summary>
            /// Enum DESKTOPANDAPPLICATION for value: DESKTOP_AND_APPLICATION
            /// </summary>
            [EnumMember(Value = "DESKTOP_AND_APPLICATION")]
            DESKTOPANDAPPLICATION = 3
        }

        /// <summary>
        /// Supported session types for this desktop pool. If application sessions are selected to besupported then this desktop pool can be used for application pool creation. This will beuseful when the machines in the pool support application remoting. Default value of DESKTOP. * DESKTOP: Only desktop sessions are supported. * APPLICATION: Only application sessions are supported. * DESKTOP_AND_APPLICATION: Both desktop and application sessions are supported.
        /// </summary>
        /// <value>Supported session types for this desktop pool. If application sessions are selected to besupported then this desktop pool can be used for application pool creation. This will beuseful when the machines in the pool support application remoting. Default value of DESKTOP. * DESKTOP: Only desktop sessions are supported. * APPLICATION: Only application sessions are supported. * DESKTOP_AND_APPLICATION: Both desktop and application sessions are supported.</value>
        [DataMember(Name="session_type", EmitDefaultValue=false)]
        public SessionTypeEnum? SessionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DesktopPoolSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DesktopPoolSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DesktopPoolSettings" /> class.
        /// </summary>
        /// <param name="allowMutilpleSessionsPerUser">Whether multiple sessions are allowed per user for this pool. This is valid for RDS desktop pools.For other Desktops, allow_multiple_sessions_per_user in settings will be applicable.Default value is false..</param>
        /// <param name="categoryFolderName">Name of the category folder in the user&#39;s OS containing a shortcut to the desktop pool.Will be unset if the desktop does not belong to a category.This property defines valid folder names with a max length of 64 characters and up to 4 subdirectory levels.The subdirectories can be specified using a backslash, e.g. (dir1\\dir2\\dir3\\dir4). Folder names can&#39;t start orend with a backslash nor can there be 2 or more backslashes together. Combinations such as(\\dir1, dir1\\dir2\\, dir1\\\\dir2, dir1\\\\\\dir2) are invalid. The windows reserved keywords(CON, PRN, NUL, AUX, COM1 - COM9, LPT1 - LPT9 etc.) are not allowed in subdirectory names..</param>
        /// <param name="cloudAssigned">Indicates whether this desktop is assigned to a workspace in Horizon Cloud Services. Default value is false..</param>
        /// <param name="cloudManaged">Indicates whether this desktop is managed by Horizon Cloud Services.This can be false only when cloud_assigned is false. Default value is false..</param>
        /// <param name="csRestrictionTags">List of tags for which the access to the desktop pool is restricted to.No list indicates that desktop pool can be accessed from any connection server..</param>
        /// <param name="deleteInProgress">Indicates whether the desktop pool is in the process of being deleted.Default value is false. (required).</param>
        /// <param name="displayProtocolSettings">Remote display protocol settings. These relate to RDP/PCoIP/BLAST..</param>
        /// <param name="enableClientRestrictions">Client restrictions to be applied to the desktop pool.Currently it is valid for RDS desktop pools only. Default value is false..</param>
        /// <param name="sessionSettings">Includes machine settings applicable when a user logs off or when a desktop pool is no longer keeping a machine as a spare..</param>
        /// <param name="sessionType">Supported session types for this desktop pool. If application sessions are selected to besupported then this desktop pool can be used for application pool creation. This will beuseful when the machines in the pool support application remoting. Default value of DESKTOP. * DESKTOP: Only desktop sessions are supported. * APPLICATION: Only application sessions are supported. * DESKTOP_AND_APPLICATION: Both desktop and application sessions are supported..</param>
        /// <param name="shortcutLocations">Locations of the category folder in the user&#39;s OS containing a shortcut to the desktop pool.The value will be present if categoryFolderName is set..</param>
        public DesktopPoolSettings(bool? allowMutilpleSessionsPerUser = default(bool?), string categoryFolderName = default(string), bool? cloudAssigned = default(bool?), bool? cloudManaged = default(bool?), List<string> csRestrictionTags = default(List<string>), bool? deleteInProgress = default(bool?), DesktopPoolDisplayProtocolSettings displayProtocolSettings = default(DesktopPoolDisplayProtocolSettings), bool? enableClientRestrictions = default(bool?), DesktopPoolSessionSettings sessionSettings = default(DesktopPoolSessionSettings), SessionTypeEnum? sessionType = default(SessionTypeEnum?), List<string> shortcutLocations = default(List<string>))
        {
            // to ensure "deleteInProgress" is required (not null)
            if (deleteInProgress == null)
            {
                throw new InvalidDataException("deleteInProgress is a required property for DesktopPoolSettings and cannot be null");
            }
            else
            {
                this.DeleteInProgress = deleteInProgress;
            }
            this.AllowMutilpleSessionsPerUser = allowMutilpleSessionsPerUser;
            this.CategoryFolderName = categoryFolderName;
            this.CloudAssigned = cloudAssigned;
            this.CloudManaged = cloudManaged;
            this.CsRestrictionTags = csRestrictionTags;
            this.DisplayProtocolSettings = displayProtocolSettings;
            this.EnableClientRestrictions = enableClientRestrictions;
            this.SessionSettings = sessionSettings;
            this.SessionType = sessionType;
            this.ShortcutLocations = shortcutLocations;
        }
        
        /// <summary>
        /// Whether multiple sessions are allowed per user for this pool. This is valid for RDS desktop pools.For other Desktops, allow_multiple_sessions_per_user in settings will be applicable.Default value is false.
        /// </summary>
        /// <value>Whether multiple sessions are allowed per user for this pool. This is valid for RDS desktop pools.For other Desktops, allow_multiple_sessions_per_user in settings will be applicable.Default value is false.</value>
        [DataMember(Name="allow_mutilple_sessions_per_user", EmitDefaultValue=false)]
        public bool? AllowMutilpleSessionsPerUser { get; set; }

        /// <summary>
        /// Name of the category folder in the user&#39;s OS containing a shortcut to the desktop pool.Will be unset if the desktop does not belong to a category.This property defines valid folder names with a max length of 64 characters and up to 4 subdirectory levels.The subdirectories can be specified using a backslash, e.g. (dir1\\dir2\\dir3\\dir4). Folder names can&#39;t start orend with a backslash nor can there be 2 or more backslashes together. Combinations such as(\\dir1, dir1\\dir2\\, dir1\\\\dir2, dir1\\\\\\dir2) are invalid. The windows reserved keywords(CON, PRN, NUL, AUX, COM1 - COM9, LPT1 - LPT9 etc.) are not allowed in subdirectory names.
        /// </summary>
        /// <value>Name of the category folder in the user&#39;s OS containing a shortcut to the desktop pool.Will be unset if the desktop does not belong to a category.This property defines valid folder names with a max length of 64 characters and up to 4 subdirectory levels.The subdirectories can be specified using a backslash, e.g. (dir1\\dir2\\dir3\\dir4). Folder names can&#39;t start orend with a backslash nor can there be 2 or more backslashes together. Combinations such as(\\dir1, dir1\\dir2\\, dir1\\\\dir2, dir1\\\\\\dir2) are invalid. The windows reserved keywords(CON, PRN, NUL, AUX, COM1 - COM9, LPT1 - LPT9 etc.) are not allowed in subdirectory names.</value>
        [DataMember(Name="category_folder_name", EmitDefaultValue=false)]
        public string CategoryFolderName { get; set; }

        /// <summary>
        /// Indicates whether this desktop is assigned to a workspace in Horizon Cloud Services. Default value is false.
        /// </summary>
        /// <value>Indicates whether this desktop is assigned to a workspace in Horizon Cloud Services. Default value is false.</value>
        [DataMember(Name="cloud_assigned", EmitDefaultValue=false)]
        public bool? CloudAssigned { get; set; }

        /// <summary>
        /// Indicates whether this desktop is managed by Horizon Cloud Services.This can be false only when cloud_assigned is false. Default value is false.
        /// </summary>
        /// <value>Indicates whether this desktop is managed by Horizon Cloud Services.This can be false only when cloud_assigned is false. Default value is false.</value>
        [DataMember(Name="cloud_managed", EmitDefaultValue=false)]
        public bool? CloudManaged { get; set; }

        /// <summary>
        /// List of tags for which the access to the desktop pool is restricted to.No list indicates that desktop pool can be accessed from any connection server.
        /// </summary>
        /// <value>List of tags for which the access to the desktop pool is restricted to.No list indicates that desktop pool can be accessed from any connection server.</value>
        [DataMember(Name="cs_restriction_tags", EmitDefaultValue=false)]
        public List<string> CsRestrictionTags { get; set; }

        /// <summary>
        /// Indicates whether the desktop pool is in the process of being deleted.Default value is false.
        /// </summary>
        /// <value>Indicates whether the desktop pool is in the process of being deleted.Default value is false.</value>
        [DataMember(Name="delete_in_progress", EmitDefaultValue=false)]
        public bool? DeleteInProgress { get; set; }

        /// <summary>
        /// Remote display protocol settings. These relate to RDP/PCoIP/BLAST.
        /// </summary>
        /// <value>Remote display protocol settings. These relate to RDP/PCoIP/BLAST.</value>
        [DataMember(Name="display_protocol_settings", EmitDefaultValue=false)]
        public DesktopPoolDisplayProtocolSettings DisplayProtocolSettings { get; set; }

        /// <summary>
        /// Client restrictions to be applied to the desktop pool.Currently it is valid for RDS desktop pools only. Default value is false.
        /// </summary>
        /// <value>Client restrictions to be applied to the desktop pool.Currently it is valid for RDS desktop pools only. Default value is false.</value>
        [DataMember(Name="enable_client_restrictions", EmitDefaultValue=false)]
        public bool? EnableClientRestrictions { get; set; }

        /// <summary>
        /// Includes machine settings applicable when a user logs off or when a desktop pool is no longer keeping a machine as a spare.
        /// </summary>
        /// <value>Includes machine settings applicable when a user logs off or when a desktop pool is no longer keeping a machine as a spare.</value>
        [DataMember(Name="session_settings", EmitDefaultValue=false)]
        public DesktopPoolSessionSettings SessionSettings { get; set; }


        /// <summary>
        /// Locations of the category folder in the user&#39;s OS containing a shortcut to the desktop pool.The value will be present if categoryFolderName is set.
        /// </summary>
        /// <value>Locations of the category folder in the user&#39;s OS containing a shortcut to the desktop pool.The value will be present if categoryFolderName is set.</value>
        [DataMember(Name="shortcut_locations", EmitDefaultValue=false)]
        public List<string> ShortcutLocations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DesktopPoolSettings {\n");
            sb.Append("  AllowMutilpleSessionsPerUser: ").Append(AllowMutilpleSessionsPerUser).Append("\n");
            sb.Append("  CategoryFolderName: ").Append(CategoryFolderName).Append("\n");
            sb.Append("  CloudAssigned: ").Append(CloudAssigned).Append("\n");
            sb.Append("  CloudManaged: ").Append(CloudManaged).Append("\n");
            sb.Append("  CsRestrictionTags: ").Append(CsRestrictionTags).Append("\n");
            sb.Append("  DeleteInProgress: ").Append(DeleteInProgress).Append("\n");
            sb.Append("  DisplayProtocolSettings: ").Append(DisplayProtocolSettings).Append("\n");
            sb.Append("  EnableClientRestrictions: ").Append(EnableClientRestrictions).Append("\n");
            sb.Append("  SessionSettings: ").Append(SessionSettings).Append("\n");
            sb.Append("  SessionType: ").Append(SessionType).Append("\n");
            sb.Append("  ShortcutLocations: ").Append(ShortcutLocations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DesktopPoolSettings);
        }

        /// <summary>
        /// Returns true if DesktopPoolSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of DesktopPoolSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DesktopPoolSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowMutilpleSessionsPerUser == input.AllowMutilpleSessionsPerUser ||
                    (this.AllowMutilpleSessionsPerUser != null &&
                    this.AllowMutilpleSessionsPerUser.Equals(input.AllowMutilpleSessionsPerUser))
                ) && 
                (
                    this.CategoryFolderName == input.CategoryFolderName ||
                    (this.CategoryFolderName != null &&
                    this.CategoryFolderName.Equals(input.CategoryFolderName))
                ) && 
                (
                    this.CloudAssigned == input.CloudAssigned ||
                    (this.CloudAssigned != null &&
                    this.CloudAssigned.Equals(input.CloudAssigned))
                ) && 
                (
                    this.CloudManaged == input.CloudManaged ||
                    (this.CloudManaged != null &&
                    this.CloudManaged.Equals(input.CloudManaged))
                ) && 
                (
                    this.CsRestrictionTags == input.CsRestrictionTags ||
                    this.CsRestrictionTags != null &&
                    this.CsRestrictionTags.SequenceEqual(input.CsRestrictionTags)
                ) && 
                (
                    this.DeleteInProgress == input.DeleteInProgress ||
                    (this.DeleteInProgress != null &&
                    this.DeleteInProgress.Equals(input.DeleteInProgress))
                ) && 
                (
                    this.DisplayProtocolSettings == input.DisplayProtocolSettings ||
                    (this.DisplayProtocolSettings != null &&
                    this.DisplayProtocolSettings.Equals(input.DisplayProtocolSettings))
                ) && 
                (
                    this.EnableClientRestrictions == input.EnableClientRestrictions ||
                    (this.EnableClientRestrictions != null &&
                    this.EnableClientRestrictions.Equals(input.EnableClientRestrictions))
                ) && 
                (
                    this.SessionSettings == input.SessionSettings ||
                    (this.SessionSettings != null &&
                    this.SessionSettings.Equals(input.SessionSettings))
                ) && 
                (
                    this.SessionType == input.SessionType ||
                    (this.SessionType != null &&
                    this.SessionType.Equals(input.SessionType))
                ) && 
                (
                    this.ShortcutLocations == input.ShortcutLocations ||
                    this.ShortcutLocations != null &&
                    this.ShortcutLocations.SequenceEqual(input.ShortcutLocations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowMutilpleSessionsPerUser != null)
                    hashCode = hashCode * 59 + this.AllowMutilpleSessionsPerUser.GetHashCode();
                if (this.CategoryFolderName != null)
                    hashCode = hashCode * 59 + this.CategoryFolderName.GetHashCode();
                if (this.CloudAssigned != null)
                    hashCode = hashCode * 59 + this.CloudAssigned.GetHashCode();
                if (this.CloudManaged != null)
                    hashCode = hashCode * 59 + this.CloudManaged.GetHashCode();
                if (this.CsRestrictionTags != null)
                    hashCode = hashCode * 59 + this.CsRestrictionTags.GetHashCode();
                if (this.DeleteInProgress != null)
                    hashCode = hashCode * 59 + this.DeleteInProgress.GetHashCode();
                if (this.DisplayProtocolSettings != null)
                    hashCode = hashCode * 59 + this.DisplayProtocolSettings.GetHashCode();
                if (this.EnableClientRestrictions != null)
                    hashCode = hashCode * 59 + this.EnableClientRestrictions.GetHashCode();
                if (this.SessionSettings != null)
                    hashCode = hashCode * 59 + this.SessionSettings.GetHashCode();
                if (this.SessionType != null)
                    hashCode = hashCode * 59 + this.SessionType.GetHashCode();
                if (this.ShortcutLocations != null)
                    hashCode = hashCode * 59 + this.ShortcutLocations.GetHashCode();
                return hashCode;
            }
        }
    }

}
