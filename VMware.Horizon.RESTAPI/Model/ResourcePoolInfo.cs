/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to resource pool.
    /// </summary>
    [DataContract]
    public partial class ResourcePoolInfo :  IEquatable<ResourcePoolInfo>
    {
        /// <summary>
        /// Resource pool type. * HOST: Host used as a resource pool suitable for use in desktop pool/farm. * CLUSTER: Cluster used as a resource pool suitable for use in desktop pool/farm. * RESOURCE_POOL: Regular resource pool suitable for use in desktop pool/farm. * OTHER: Other resource type which cannot be used in desktop pool/farm.
        /// </summary>
        /// <value>Resource pool type. * HOST: Host used as a resource pool suitable for use in desktop pool/farm. * CLUSTER: Cluster used as a resource pool suitable for use in desktop pool/farm. * RESOURCE_POOL: Regular resource pool suitable for use in desktop pool/farm. * OTHER: Other resource type which cannot be used in desktop pool/farm.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum HOST for value: HOST
            /// </summary>
            [EnumMember(Value = "HOST")]
            HOST = 1,
            
            /// <summary>
            /// Enum CLUSTER for value: CLUSTER
            /// </summary>
            [EnumMember(Value = "CLUSTER")]
            CLUSTER = 2,
            
            /// <summary>
            /// Enum RESOURCEPOOL for value: RESOURCE_POOL
            /// </summary>
            [EnumMember(Value = "RESOURCE_POOL")]
            RESOURCEPOOL = 3,
            
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 4
        }

        /// <summary>
        /// Resource pool type. * HOST: Host used as a resource pool suitable for use in desktop pool/farm. * CLUSTER: Cluster used as a resource pool suitable for use in desktop pool/farm. * RESOURCE_POOL: Regular resource pool suitable for use in desktop pool/farm. * OTHER: Other resource type which cannot be used in desktop pool/farm.
        /// </summary>
        /// <value>Resource pool type. * HOST: Host used as a resource pool suitable for use in desktop pool/farm. * CLUSTER: Cluster used as a resource pool suitable for use in desktop pool/farm. * RESOURCE_POOL: Regular resource pool suitable for use in desktop pool/farm. * OTHER: Other resource type which cannot be used in desktop pool/farm.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourcePoolInfo" /> class.
        /// </summary>
        /// <param name="children">Child nodes of the resource pool..</param>
        /// <param name="id">Unique ID representing the resource pool..</param>
        /// <param name="name">Resource pool name..</param>
        /// <param name="path">Resource pool path..</param>
        /// <param name="type">Resource pool type. * HOST: Host used as a resource pool suitable for use in desktop pool/farm. * CLUSTER: Cluster used as a resource pool suitable for use in desktop pool/farm. * RESOURCE_POOL: Regular resource pool suitable for use in desktop pool/farm. * OTHER: Other resource type which cannot be used in desktop pool/farm..</param>
        public ResourcePoolInfo(List<ResourcePoolInfo> children = default(List<ResourcePoolInfo>), string id = default(string), string name = default(string), string path = default(string), TypeEnum? type = default(TypeEnum?))
        {
            this.Children = children;
            this.Id = id;
            this.Name = name;
            this.Path = path;
            this.Type = type;
        }
        
        /// <summary>
        /// Child nodes of the resource pool.
        /// </summary>
        /// <value>Child nodes of the resource pool.</value>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public List<ResourcePoolInfo> Children { get; set; }

        /// <summary>
        /// Unique ID representing the resource pool.
        /// </summary>
        /// <value>Unique ID representing the resource pool.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Resource pool name.
        /// </summary>
        /// <value>Resource pool name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Resource pool path.
        /// </summary>
        /// <value>Resource pool path.</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResourcePoolInfo {\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResourcePoolInfo);
        }

        /// <summary>
        /// Returns true if ResourcePoolInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ResourcePoolInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResourcePoolInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }
    }

}
