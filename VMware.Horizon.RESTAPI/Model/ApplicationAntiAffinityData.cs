/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Anti-affinity data required to create an application pool.
    /// </summary>
    [DataContract]
    public partial class ApplicationAntiAffinityData :  IEquatable<ApplicationAntiAffinityData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationAntiAffinityData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApplicationAntiAffinityData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationAntiAffinityData" /> class.
        /// </summary>
        /// <param name="antiAffinityCount">Maximum number of other applications that can be running on the RDS Server before the RDS Server is rejected for new application sessions. (required).</param>
        /// <param name="antiAffinityPatterns">Set of pattern strings to match against process names on a RDS Server when attempting to launch a session for this Application. For each application running on an RDSServer that matches one of the patterns, the tally against the count threshold is incremented.&lt;br&gt;Pattern strings may contain wildcard characters. &#39;*&#39; matches zero or more characters. &#39;?&#39; matches exactly one character. (required).</param>
        public ApplicationAntiAffinityData(int? antiAffinityCount = default(int?), List<string> antiAffinityPatterns = default(List<string>))
        {
            // to ensure "antiAffinityCount" is required (not null)
            if (antiAffinityCount == null)
            {
                throw new InvalidDataException("antiAffinityCount is a required property for ApplicationAntiAffinityData and cannot be null");
            }
            else
            {
                this.AntiAffinityCount = antiAffinityCount;
            }
            // to ensure "antiAffinityPatterns" is required (not null)
            if (antiAffinityPatterns == null)
            {
                throw new InvalidDataException("antiAffinityPatterns is a required property for ApplicationAntiAffinityData and cannot be null");
            }
            else
            {
                this.AntiAffinityPatterns = antiAffinityPatterns;
            }
        }
        
        /// <summary>
        /// Maximum number of other applications that can be running on the RDS Server before the RDS Server is rejected for new application sessions.
        /// </summary>
        /// <value>Maximum number of other applications that can be running on the RDS Server before the RDS Server is rejected for new application sessions.</value>
        [DataMember(Name="anti_affinity_count", EmitDefaultValue=false)]
        public int? AntiAffinityCount { get; set; }

        /// <summary>
        /// Set of pattern strings to match against process names on a RDS Server when attempting to launch a session for this Application. For each application running on an RDSServer that matches one of the patterns, the tally against the count threshold is incremented.&lt;br&gt;Pattern strings may contain wildcard characters. &#39;*&#39; matches zero or more characters. &#39;?&#39; matches exactly one character.
        /// </summary>
        /// <value>Set of pattern strings to match against process names on a RDS Server when attempting to launch a session for this Application. For each application running on an RDSServer that matches one of the patterns, the tally against the count threshold is incremented.&lt;br&gt;Pattern strings may contain wildcard characters. &#39;*&#39; matches zero or more characters. &#39;?&#39; matches exactly one character.</value>
        [DataMember(Name="anti_affinity_patterns", EmitDefaultValue=false)]
        public List<string> AntiAffinityPatterns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationAntiAffinityData {\n");
            sb.Append("  AntiAffinityCount: ").Append(AntiAffinityCount).Append("\n");
            sb.Append("  AntiAffinityPatterns: ").Append(AntiAffinityPatterns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationAntiAffinityData);
        }

        /// <summary>
        /// Returns true if ApplicationAntiAffinityData instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationAntiAffinityData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationAntiAffinityData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AntiAffinityCount == input.AntiAffinityCount ||
                    (this.AntiAffinityCount != null &&
                    this.AntiAffinityCount.Equals(input.AntiAffinityCount))
                ) && 
                (
                    this.AntiAffinityPatterns == input.AntiAffinityPatterns ||
                    this.AntiAffinityPatterns != null &&
                    this.AntiAffinityPatterns.SequenceEqual(input.AntiAffinityPatterns)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AntiAffinityCount != null)
                    hashCode = hashCode * 59 + this.AntiAffinityCount.GetHashCode();
                if (this.AntiAffinityPatterns != null)
                    hashCode = hashCode * 59 + this.AntiAffinityPatterns.GetHashCode();
                return hashCode;
            }
        }
    }

}
