/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to Environment Settings.
    /// </summary>
    [DataContract]
    public partial class EnvironmentInfo :  IEquatable<EnvironmentInfo>
    {
        /// <summary>
        /// Indicates the IP mode of the environment. * IPv4: The ip mode is IPv4. * IPv6: The ip mode is IPv6.
        /// </summary>
        /// <value>Indicates the IP mode of the environment. * IPv4: The ip mode is IPv4. * IPv6: The ip mode is IPv6.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IpModeEnum
        {
            
            /// <summary>
            /// Enum IPv4 for value: IPv4
            /// </summary>
            [EnumMember(Value = "IPv4")]
            IPv4 = 1,
            
            /// <summary>
            /// Enum IPv6 for value: IPv6
            /// </summary>
            [EnumMember(Value = "IPv6")]
            IPv6 = 2
        }

        /// <summary>
        /// Indicates the IP mode of the environment. * IPv4: The ip mode is IPv4. * IPv6: The ip mode is IPv6.
        /// </summary>
        /// <value>Indicates the IP mode of the environment. * IPv4: The ip mode is IPv4. * IPv6: The ip mode is IPv6.</value>
        [DataMember(Name="ip_mode", EmitDefaultValue=false)]
        public IpModeEnum IpMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnvironmentInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentInfo" /> class.
        /// </summary>
        /// <param name="clusterGuid">The GUID of a group of Connection Servers sharing the same configuration. (required).</param>
        /// <param name="clusterName">The name of a group of Connection Servers sharing the same configuration. (required).</param>
        /// <param name="fipsModeEnabled">Indicates if FIPS mode is enabled. (required).</param>
        /// <param name="ipMode">Indicates the IP mode of the environment. * IPv4: The ip mode is IPv4. * IPv6: The ip mode is IPv6. (required).</param>
        /// <param name="localPodName">The name of the current pod in the Multi-DataCenter Horizon Pod, the value will be null when PodFederation is not initialized..</param>
        /// <param name="timezoneOffset">Represents the clusters time zone offset from UTC in seconds. (required).</param>
        public EnvironmentInfo(string clusterGuid = default(string), string clusterName = default(string), bool? fipsModeEnabled = default(bool?), IpModeEnum ipMode = default(IpModeEnum), string localPodName = default(string), int? timezoneOffset = default(int?))
        {
            // to ensure "clusterGuid" is required (not null)
            if (clusterGuid == null)
            {
                throw new InvalidDataException("clusterGuid is a required property for EnvironmentInfo and cannot be null");
            }
            else
            {
                this.ClusterGuid = clusterGuid;
            }
            // to ensure "clusterName" is required (not null)
            if (clusterName == null)
            {
                throw new InvalidDataException("clusterName is a required property for EnvironmentInfo and cannot be null");
            }
            else
            {
                this.ClusterName = clusterName;
            }
            // to ensure "fipsModeEnabled" is required (not null)
            if (fipsModeEnabled == null)
            {
                throw new InvalidDataException("fipsModeEnabled is a required property for EnvironmentInfo and cannot be null");
            }
            else
            {
                this.FipsModeEnabled = fipsModeEnabled;
            }
            // to ensure "ipMode" is required (not null)
            if (ipMode == null)
            {
                throw new InvalidDataException("ipMode is a required property for EnvironmentInfo and cannot be null");
            }
            else
            {
                this.IpMode = ipMode;
            }
            // to ensure "timezoneOffset" is required (not null)
            if (timezoneOffset == null)
            {
                throw new InvalidDataException("timezoneOffset is a required property for EnvironmentInfo and cannot be null");
            }
            else
            {
                this.TimezoneOffset = timezoneOffset;
            }
            this.LocalPodName = localPodName;
        }
        
        /// <summary>
        /// The GUID of a group of Connection Servers sharing the same configuration.
        /// </summary>
        /// <value>The GUID of a group of Connection Servers sharing the same configuration.</value>
        [DataMember(Name="cluster_guid", EmitDefaultValue=false)]
        public string ClusterGuid { get; set; }

        /// <summary>
        /// The name of a group of Connection Servers sharing the same configuration.
        /// </summary>
        /// <value>The name of a group of Connection Servers sharing the same configuration.</value>
        [DataMember(Name="cluster_name", EmitDefaultValue=false)]
        public string ClusterName { get; set; }

        /// <summary>
        /// Indicates if FIPS mode is enabled.
        /// </summary>
        /// <value>Indicates if FIPS mode is enabled.</value>
        [DataMember(Name="fips_mode_enabled", EmitDefaultValue=false)]
        public bool? FipsModeEnabled { get; set; }


        /// <summary>
        /// The name of the current pod in the Multi-DataCenter Horizon Pod, the value will be null when PodFederation is not initialized.
        /// </summary>
        /// <value>The name of the current pod in the Multi-DataCenter Horizon Pod, the value will be null when PodFederation is not initialized.</value>
        [DataMember(Name="local_pod_name", EmitDefaultValue=false)]
        public string LocalPodName { get; set; }

        /// <summary>
        /// Represents the clusters time zone offset from UTC in seconds.
        /// </summary>
        /// <value>Represents the clusters time zone offset from UTC in seconds.</value>
        [DataMember(Name="timezone_offset", EmitDefaultValue=false)]
        public int? TimezoneOffset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvironmentInfo {\n");
            sb.Append("  ClusterGuid: ").Append(ClusterGuid).Append("\n");
            sb.Append("  ClusterName: ").Append(ClusterName).Append("\n");
            sb.Append("  FipsModeEnabled: ").Append(FipsModeEnabled).Append("\n");
            sb.Append("  IpMode: ").Append(IpMode).Append("\n");
            sb.Append("  LocalPodName: ").Append(LocalPodName).Append("\n");
            sb.Append("  TimezoneOffset: ").Append(TimezoneOffset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnvironmentInfo);
        }

        /// <summary>
        /// Returns true if EnvironmentInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of EnvironmentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvironmentInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClusterGuid == input.ClusterGuid ||
                    (this.ClusterGuid != null &&
                    this.ClusterGuid.Equals(input.ClusterGuid))
                ) && 
                (
                    this.ClusterName == input.ClusterName ||
                    (this.ClusterName != null &&
                    this.ClusterName.Equals(input.ClusterName))
                ) && 
                (
                    this.FipsModeEnabled == input.FipsModeEnabled ||
                    (this.FipsModeEnabled != null &&
                    this.FipsModeEnabled.Equals(input.FipsModeEnabled))
                ) && 
                (
                    this.IpMode == input.IpMode ||
                    (this.IpMode != null &&
                    this.IpMode.Equals(input.IpMode))
                ) && 
                (
                    this.LocalPodName == input.LocalPodName ||
                    (this.LocalPodName != null &&
                    this.LocalPodName.Equals(input.LocalPodName))
                ) && 
                (
                    this.TimezoneOffset == input.TimezoneOffset ||
                    (this.TimezoneOffset != null &&
                    this.TimezoneOffset.Equals(input.TimezoneOffset))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClusterGuid != null)
                    hashCode = hashCode * 59 + this.ClusterGuid.GetHashCode();
                if (this.ClusterName != null)
                    hashCode = hashCode * 59 + this.ClusterName.GetHashCode();
                if (this.FipsModeEnabled != null)
                    hashCode = hashCode * 59 + this.FipsModeEnabled.GetHashCode();
                if (this.IpMode != null)
                    hashCode = hashCode * 59 + this.IpMode.GetHashCode();
                if (this.LocalPodName != null)
                    hashCode = hashCode * 59 + this.LocalPodName.GetHashCode();
                if (this.TimezoneOffset != null)
                    hashCode = hashCode * 59 + this.TimezoneOffset.GetHashCode();
                return hashCode;
            }
        }
    }

}
