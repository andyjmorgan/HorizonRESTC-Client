/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Monitoring information related to Gateways registered in the environment.
    /// </summary>
    [DataContract]
    public partial class GatewayMonitorInfo :  IEquatable<GatewayMonitorInfo>
    {
        /// <summary>
        /// Status of the Gateway. * NOT_CONTACTED: There has been no contact from the gateway. * PROBLEM: The gateway has reported a problem. * STALE: Gateway is stale. Gateway will be marked as stale when Connection Server does not receive any request from the Gateway in last two successive intervals. * OK: The Gateway is working as expected.
        /// </summary>
        /// <value>Status of the Gateway. * NOT_CONTACTED: There has been no contact from the gateway. * PROBLEM: The gateway has reported a problem. * STALE: Gateway is stale. Gateway will be marked as stale when Connection Server does not receive any request from the Gateway in last two successive intervals. * OK: The Gateway is working as expected.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum NOTCONTACTED for value: NOT_CONTACTED
            /// </summary>
            [EnumMember(Value = "NOT_CONTACTED")]
            NOTCONTACTED = 1,
            
            /// <summary>
            /// Enum PROBLEM for value: PROBLEM
            /// </summary>
            [EnumMember(Value = "PROBLEM")]
            PROBLEM = 2,
            
            /// <summary>
            /// Enum STALE for value: STALE
            /// </summary>
            [EnumMember(Value = "STALE")]
            STALE = 3,
            
            /// <summary>
            /// Enum OK for value: OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OK = 4
        }

        /// <summary>
        /// Status of the Gateway. * NOT_CONTACTED: There has been no contact from the gateway. * PROBLEM: The gateway has reported a problem. * STALE: Gateway is stale. Gateway will be marked as stale when Connection Server does not receive any request from the Gateway in last two successive intervals. * OK: The Gateway is working as expected.
        /// </summary>
        /// <value>Status of the Gateway. * NOT_CONTACTED: There has been no contact from the gateway. * PROBLEM: The gateway has reported a problem. * STALE: Gateway is stale. Gateway will be marked as stale when Connection Server does not receive any request from the Gateway in last two successive intervals. * OK: The Gateway is working as expected.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayMonitorInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayMonitorInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayMonitorInfo" /> class.
        /// </summary>
        /// <param name="activeConnectionCount">Number of active connections for the gateway. Includes PCoIP and BLAST connection counts..</param>
        /// <param name="blastConnectionCount">Number of BLAST connections for the gateway..</param>
        /// <param name="details">Details of the gateway. (required).</param>
        /// <param name="id">Unique ID of the Gateway. (required).</param>
        /// <param name="name">Gateway name. (required).</param>
        /// <param name="pcoipConnectionCount">Number of PCoIP connections for the gateway..</param>
        /// <param name="status">Status of the Gateway. * NOT_CONTACTED: There has been no contact from the gateway. * PROBLEM: The gateway has reported a problem. * STALE: Gateway is stale. Gateway will be marked as stale when Connection Server does not receive any request from the Gateway in last two successive intervals. * OK: The Gateway is working as expected. (required).</param>
        public GatewayMonitorInfo(int? activeConnectionCount = default(int?), int? blastConnectionCount = default(int?), GatewayMonitorDetails details = default(GatewayMonitorDetails), string id = default(string), string name = default(string), int? pcoipConnectionCount = default(int?), StatusEnum status = default(StatusEnum))
        {
            // to ensure "details" is required (not null)
            if (details == null)
            {
                throw new InvalidDataException("details is a required property for GatewayMonitorInfo and cannot be null");
            }
            else
            {
                this.Details = details;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for GatewayMonitorInfo and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for GatewayMonitorInfo and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for GatewayMonitorInfo and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.ActiveConnectionCount = activeConnectionCount;
            this.BlastConnectionCount = blastConnectionCount;
            this.PcoipConnectionCount = pcoipConnectionCount;
        }
        
        /// <summary>
        /// Number of active connections for the gateway. Includes PCoIP and BLAST connection counts.
        /// </summary>
        /// <value>Number of active connections for the gateway. Includes PCoIP and BLAST connection counts.</value>
        [DataMember(Name="active_connection_count", EmitDefaultValue=false)]
        public int? ActiveConnectionCount { get; set; }

        /// <summary>
        /// Number of BLAST connections for the gateway.
        /// </summary>
        /// <value>Number of BLAST connections for the gateway.</value>
        [DataMember(Name="blast_connection_count", EmitDefaultValue=false)]
        public int? BlastConnectionCount { get; set; }

        /// <summary>
        /// Details of the gateway.
        /// </summary>
        /// <value>Details of the gateway.</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public GatewayMonitorDetails Details { get; set; }

        /// <summary>
        /// Unique ID of the Gateway.
        /// </summary>
        /// <value>Unique ID of the Gateway.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gateway name.
        /// </summary>
        /// <value>Gateway name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Number of PCoIP connections for the gateway.
        /// </summary>
        /// <value>Number of PCoIP connections for the gateway.</value>
        [DataMember(Name="pcoip_connection_count", EmitDefaultValue=false)]
        public int? PcoipConnectionCount { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GatewayMonitorInfo {\n");
            sb.Append("  ActiveConnectionCount: ").Append(ActiveConnectionCount).Append("\n");
            sb.Append("  BlastConnectionCount: ").Append(BlastConnectionCount).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PcoipConnectionCount: ").Append(PcoipConnectionCount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayMonitorInfo);
        }

        /// <summary>
        /// Returns true if GatewayMonitorInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayMonitorInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayMonitorInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActiveConnectionCount == input.ActiveConnectionCount ||
                    (this.ActiveConnectionCount != null &&
                    this.ActiveConnectionCount.Equals(input.ActiveConnectionCount))
                ) && 
                (
                    this.BlastConnectionCount == input.BlastConnectionCount ||
                    (this.BlastConnectionCount != null &&
                    this.BlastConnectionCount.Equals(input.BlastConnectionCount))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PcoipConnectionCount == input.PcoipConnectionCount ||
                    (this.PcoipConnectionCount != null &&
                    this.PcoipConnectionCount.Equals(input.PcoipConnectionCount))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActiveConnectionCount != null)
                    hashCode = hashCode * 59 + this.ActiveConnectionCount.GetHashCode();
                if (this.BlastConnectionCount != null)
                    hashCode = hashCode * 59 + this.BlastConnectionCount.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PcoipConnectionCount != null)
                    hashCode = hashCode * 59 + this.PcoipConnectionCount.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }
    }

}
