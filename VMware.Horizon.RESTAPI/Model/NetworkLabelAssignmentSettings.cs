/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Specification for an individual network label assignment, stipulating the label and how many times it may be assigned to machines with this spec.
    /// </summary>
    [DataContract]
    public partial class NetworkLabelAssignmentSettings :  IEquatable<NetworkLabelAssignmentSettings>
    {
        /// <summary>
        /// This type specifies whether or not there is a maximum limit to the number of times this label may be assigned to machines within this spec. While this specification is enabled and unlimited, specs after this one in the NIC&#39;s network label specification list will never be used. * UNLIMITED: The network label assignment specification has no limit on the number of labels to assign. * LIMITED: The network label assignment specification has a limited number of labels to assign.
        /// </summary>
        /// <value>This type specifies whether or not there is a maximum limit to the number of times this label may be assigned to machines within this spec. While this specification is enabled and unlimited, specs after this one in the NIC&#39;s network label specification list will never be used. * UNLIMITED: The network label assignment specification has no limit on the number of labels to assign. * LIMITED: The network label assignment specification has a limited number of labels to assign.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MaxLabelTypeEnum
        {
            
            /// <summary>
            /// Enum UNLIMITED for value: UNLIMITED
            /// </summary>
            [EnumMember(Value = "UNLIMITED")]
            UNLIMITED = 1,
            
            /// <summary>
            /// Enum LIMITED for value: LIMITED
            /// </summary>
            [EnumMember(Value = "LIMITED")]
            LIMITED = 2
        }

        /// <summary>
        /// This type specifies whether or not there is a maximum limit to the number of times this label may be assigned to machines within this spec. While this specification is enabled and unlimited, specs after this one in the NIC&#39;s network label specification list will never be used. * UNLIMITED: The network label assignment specification has no limit on the number of labels to assign. * LIMITED: The network label assignment specification has a limited number of labels to assign.
        /// </summary>
        /// <value>This type specifies whether or not there is a maximum limit to the number of times this label may be assigned to machines within this spec. While this specification is enabled and unlimited, specs after this one in the NIC&#39;s network label specification list will never be used. * UNLIMITED: The network label assignment specification has no limit on the number of labels to assign. * LIMITED: The network label assignment specification has a limited number of labels to assign.</value>
        [DataMember(Name="max_label_type", EmitDefaultValue=false)]
        public MaxLabelTypeEnum? MaxLabelType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkLabelAssignmentSettings" /> class.
        /// </summary>
        /// <param name="enabled">Whether or not this specification is enabled. While this specification is disabled, automatic network label assigment for this desktop pool will skip over the network label in this spec..</param>
        /// <param name="maxLabel">The maximum number of times this label can be assigned to a machine. Note this count only encompasses this spec. That is, this label may be used for other NICs and in other Desktop pools, but those assignments will not be counted towards this total. This count also does not include assignments of this label to machines not under the control of View..</param>
        /// <param name="maxLabelType">This type specifies whether or not there is a maximum limit to the number of times this label may be assigned to machines within this spec. While this specification is enabled and unlimited, specs after this one in the NIC&#39;s network label specification list will never be used. * UNLIMITED: The network label assignment specification has no limit on the number of labels to assign. * LIMITED: The network label assignment specification has a limited number of labels to assign..</param>
        /// <param name="networkLabelName">The network label id for this spec. This network label must not have any incompatibility reasons that would preclude it from automatic machine assignment..</param>
        public NetworkLabelAssignmentSettings(bool? enabled = default(bool?), int? maxLabel = default(int?), MaxLabelTypeEnum? maxLabelType = default(MaxLabelTypeEnum?), string networkLabelName = default(string))
        {
            this.Enabled = enabled;
            this.MaxLabel = maxLabel;
            this.MaxLabelType = maxLabelType;
            this.NetworkLabelName = networkLabelName;
        }
        
        /// <summary>
        /// Whether or not this specification is enabled. While this specification is disabled, automatic network label assigment for this desktop pool will skip over the network label in this spec.
        /// </summary>
        /// <value>Whether or not this specification is enabled. While this specification is disabled, automatic network label assigment for this desktop pool will skip over the network label in this spec.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// The maximum number of times this label can be assigned to a machine. Note this count only encompasses this spec. That is, this label may be used for other NICs and in other Desktop pools, but those assignments will not be counted towards this total. This count also does not include assignments of this label to machines not under the control of View.
        /// </summary>
        /// <value>The maximum number of times this label can be assigned to a machine. Note this count only encompasses this spec. That is, this label may be used for other NICs and in other Desktop pools, but those assignments will not be counted towards this total. This count also does not include assignments of this label to machines not under the control of View.</value>
        [DataMember(Name="max_label", EmitDefaultValue=false)]
        public int? MaxLabel { get; set; }


        /// <summary>
        /// The network label id for this spec. This network label must not have any incompatibility reasons that would preclude it from automatic machine assignment.
        /// </summary>
        /// <value>The network label id for this spec. This network label must not have any incompatibility reasons that would preclude it from automatic machine assignment.</value>
        [DataMember(Name="network_label_name", EmitDefaultValue=false)]
        public string NetworkLabelName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NetworkLabelAssignmentSettings {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  MaxLabel: ").Append(MaxLabel).Append("\n");
            sb.Append("  MaxLabelType: ").Append(MaxLabelType).Append("\n");
            sb.Append("  NetworkLabelName: ").Append(NetworkLabelName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NetworkLabelAssignmentSettings);
        }

        /// <summary>
        /// Returns true if NetworkLabelAssignmentSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of NetworkLabelAssignmentSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkLabelAssignmentSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.MaxLabel == input.MaxLabel ||
                    (this.MaxLabel != null &&
                    this.MaxLabel.Equals(input.MaxLabel))
                ) && 
                (
                    this.MaxLabelType == input.MaxLabelType ||
                    (this.MaxLabelType != null &&
                    this.MaxLabelType.Equals(input.MaxLabelType))
                ) && 
                (
                    this.NetworkLabelName == input.NetworkLabelName ||
                    (this.NetworkLabelName != null &&
                    this.NetworkLabelName.Equals(input.NetworkLabelName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.MaxLabel != null)
                    hashCode = hashCode * 59 + this.MaxLabel.GetHashCode();
                if (this.MaxLabelType != null)
                    hashCode = hashCode * 59 + this.MaxLabelType.GetHashCode();
                if (this.NetworkLabelName != null)
                    hashCode = hashCode * 59 + this.NetworkLabelName.GetHashCode();
                return hashCode;
            }
        }
    }

}
