/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to Security Settings.
    /// </summary>
    [DataContract]
    public partial class SecuritySettings :  IEquatable<SecuritySettings>
    {
        /// <summary>
        /// Determines if signing and verification of the JMS messages passed between Horizon components takes place. * DISABLED: Message security mode is disabled. * MIXED: Message security mode is enabled but not enforced. * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components. * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode.
        /// </summary>
        /// <value>Determines if signing and verification of the JMS messages passed between Horizon components takes place. * DISABLED: Message security mode is disabled. * MIXED: Message security mode is enabled but not enforced. * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components. * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageSecurityModeEnum
        {
            
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 1,
            
            /// <summary>
            /// Enum MIXED for value: MIXED
            /// </summary>
            [EnumMember(Value = "MIXED")]
            MIXED = 2,
            
            /// <summary>
            /// Enum ENABLED for value: ENABLED
            /// </summary>
            [EnumMember(Value = "ENABLED")]
            ENABLED = 3,
            
            /// <summary>
            /// Enum ENHANCED for value: ENHANCED
            /// </summary>
            [EnumMember(Value = "ENHANCED")]
            ENHANCED = 4
        }

        /// <summary>
        /// Determines if signing and verification of the JMS messages passed between Horizon components takes place. * DISABLED: Message security mode is disabled. * MIXED: Message security mode is enabled but not enforced. * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components. * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode.
        /// </summary>
        /// <value>Determines if signing and verification of the JMS messages passed between Horizon components takes place. * DISABLED: Message security mode is disabled. * MIXED: Message security mode is enabled but not enforced. * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components. * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode.</value>
        [DataMember(Name="message_security_mode", EmitDefaultValue=false)]
        public MessageSecurityModeEnum MessageSecurityMode { get; set; }
        /// <summary>
        /// The status of the JMS message security. This tracks the application of changes to messageSecurityMode. * READY: The cluster is performing at the specified message security mode. * INITIALIZING_ENHANCED: The cluster is initializing a transition to the ENHANCED message security mode. * PENDING_ENHANCED: The cluster is propagating the change to ENHANCED message security mode to all nodes. * LEAVING_ENHANCED: The cluster is leaving the ENHANCED message security mode.
        /// </summary>
        /// <value>The status of the JMS message security. This tracks the application of changes to messageSecurityMode. * READY: The cluster is performing at the specified message security mode. * INITIALIZING_ENHANCED: The cluster is initializing a transition to the ENHANCED message security mode. * PENDING_ENHANCED: The cluster is propagating the change to ENHANCED message security mode to all nodes. * LEAVING_ENHANCED: The cluster is leaving the ENHANCED message security mode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageSecurityStatusEnum
        {
            
            /// <summary>
            /// Enum READY for value: READY
            /// </summary>
            [EnumMember(Value = "READY")]
            READY = 1,
            
            /// <summary>
            /// Enum INITIALIZINGENHANCED for value: INITIALIZING_ENHANCED
            /// </summary>
            [EnumMember(Value = "INITIALIZING_ENHANCED")]
            INITIALIZINGENHANCED = 2,
            
            /// <summary>
            /// Enum PENDINGENHANCED for value: PENDING_ENHANCED
            /// </summary>
            [EnumMember(Value = "PENDING_ENHANCED")]
            PENDINGENHANCED = 3,
            
            /// <summary>
            /// Enum LEAVINGENHANCED for value: LEAVING_ENHANCED
            /// </summary>
            [EnumMember(Value = "LEAVING_ENHANCED")]
            LEAVINGENHANCED = 4
        }

        /// <summary>
        /// The status of the JMS message security. This tracks the application of changes to messageSecurityMode. * READY: The cluster is performing at the specified message security mode. * INITIALIZING_ENHANCED: The cluster is initializing a transition to the ENHANCED message security mode. * PENDING_ENHANCED: The cluster is propagating the change to ENHANCED message security mode to all nodes. * LEAVING_ENHANCED: The cluster is leaving the ENHANCED message security mode.
        /// </summary>
        /// <value>The status of the JMS message security. This tracks the application of changes to messageSecurityMode. * READY: The cluster is performing at the specified message security mode. * INITIALIZING_ENHANCED: The cluster is initializing a transition to the ENHANCED message security mode. * PENDING_ENHANCED: The cluster is propagating the change to ENHANCED message security mode to all nodes. * LEAVING_ENHANCED: The cluster is leaving the ENHANCED message security mode.</value>
        [DataMember(Name="message_security_status", EmitDefaultValue=false)]
        public MessageSecurityStatusEnum MessageSecurityStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecuritySettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecuritySettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecuritySettings" /> class.
        /// </summary>
        /// <param name="clusterPublicKey">The Base 64 encoded public key of the cluster in PEM format. (required).</param>
        /// <param name="clusterPublicKeyId">Key Id to identify the cluster&#39;s active key pair..</param>
        /// <param name="dataRecoveryPasswordConfigured">Indicates whether the backup recovery password has been configured. (required).</param>
        /// <param name="messageSecurityMode">Determines if signing and verification of the JMS messages passed between Horizon components takes place. * DISABLED: Message security mode is disabled. * MIXED: Message security mode is enabled but not enforced. * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components. * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode. (required).</param>
        /// <param name="messageSecurityStatus">The status of the JMS message security. This tracks the application of changes to messageSecurityMode. * READY: The cluster is performing at the specified message security mode. * INITIALIZING_ENHANCED: The cluster is initializing a transition to the ENHANCED message security mode. * PENDING_ENHANCED: The cluster is propagating the change to ENHANCED message security mode to all nodes. * LEAVING_ENHANCED: The cluster is leaving the ENHANCED message security mode. (required).</param>
        /// <param name="reAuthSecureTunnelAfterInterruption">Determines if user credentials must be re-authenticated after a network interruption when Horizon clients use secure tunnel connections to Horizon resources. When you select this setting, if a secure tunnel connection ends during a session, Horizon Client requires the user to re-authenticate before reconnecting. (required).</param>
        public SecuritySettings(string clusterPublicKey = default(string), string clusterPublicKeyId = default(string), bool? dataRecoveryPasswordConfigured = default(bool?), MessageSecurityModeEnum messageSecurityMode = default(MessageSecurityModeEnum), MessageSecurityStatusEnum messageSecurityStatus = default(MessageSecurityStatusEnum), bool? reAuthSecureTunnelAfterInterruption = default(bool?))
        {
            // to ensure "clusterPublicKey" is required (not null)
            if (clusterPublicKey == null)
            {
                throw new InvalidDataException("clusterPublicKey is a required property for SecuritySettings and cannot be null");
            }
            else
            {
                this.ClusterPublicKey = clusterPublicKey;
            }
            // to ensure "dataRecoveryPasswordConfigured" is required (not null)
            if (dataRecoveryPasswordConfigured == null)
            {
                throw new InvalidDataException("dataRecoveryPasswordConfigured is a required property for SecuritySettings and cannot be null");
            }
            else
            {
                this.DataRecoveryPasswordConfigured = dataRecoveryPasswordConfigured;
            }
            // to ensure "messageSecurityMode" is required (not null)
            if (messageSecurityMode == null)
            {
                throw new InvalidDataException("messageSecurityMode is a required property for SecuritySettings and cannot be null");
            }
            else
            {
                this.MessageSecurityMode = messageSecurityMode;
            }
            // to ensure "messageSecurityStatus" is required (not null)
            if (messageSecurityStatus == null)
            {
                throw new InvalidDataException("messageSecurityStatus is a required property for SecuritySettings and cannot be null");
            }
            else
            {
                this.MessageSecurityStatus = messageSecurityStatus;
            }
            // to ensure "reAuthSecureTunnelAfterInterruption" is required (not null)
            if (reAuthSecureTunnelAfterInterruption == null)
            {
                throw new InvalidDataException("reAuthSecureTunnelAfterInterruption is a required property for SecuritySettings and cannot be null");
            }
            else
            {
                this.ReAuthSecureTunnelAfterInterruption = reAuthSecureTunnelAfterInterruption;
            }
            this.ClusterPublicKeyId = clusterPublicKeyId;
        }
        
        /// <summary>
        /// The Base 64 encoded public key of the cluster in PEM format.
        /// </summary>
        /// <value>The Base 64 encoded public key of the cluster in PEM format.</value>
        [DataMember(Name="cluster_public_key", EmitDefaultValue=false)]
        public string ClusterPublicKey { get; set; }

        /// <summary>
        /// Key Id to identify the cluster&#39;s active key pair.
        /// </summary>
        /// <value>Key Id to identify the cluster&#39;s active key pair.</value>
        [DataMember(Name="cluster_public_key_id", EmitDefaultValue=false)]
        public string ClusterPublicKeyId { get; set; }

        /// <summary>
        /// Indicates whether the backup recovery password has been configured.
        /// </summary>
        /// <value>Indicates whether the backup recovery password has been configured.</value>
        [DataMember(Name="data_recovery_password_configured", EmitDefaultValue=false)]
        public bool? DataRecoveryPasswordConfigured { get; set; }



        /// <summary>
        /// Determines if user credentials must be re-authenticated after a network interruption when Horizon clients use secure tunnel connections to Horizon resources. When you select this setting, if a secure tunnel connection ends during a session, Horizon Client requires the user to re-authenticate before reconnecting.
        /// </summary>
        /// <value>Determines if user credentials must be re-authenticated after a network interruption when Horizon clients use secure tunnel connections to Horizon resources. When you select this setting, if a secure tunnel connection ends during a session, Horizon Client requires the user to re-authenticate before reconnecting.</value>
        [DataMember(Name="re_auth_secure_tunnel_after_interruption", EmitDefaultValue=false)]
        public bool? ReAuthSecureTunnelAfterInterruption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecuritySettings {\n");
            sb.Append("  ClusterPublicKey: ").Append(ClusterPublicKey).Append("\n");
            sb.Append("  ClusterPublicKeyId: ").Append(ClusterPublicKeyId).Append("\n");
            sb.Append("  DataRecoveryPasswordConfigured: ").Append(DataRecoveryPasswordConfigured).Append("\n");
            sb.Append("  MessageSecurityMode: ").Append(MessageSecurityMode).Append("\n");
            sb.Append("  MessageSecurityStatus: ").Append(MessageSecurityStatus).Append("\n");
            sb.Append("  ReAuthSecureTunnelAfterInterruption: ").Append(ReAuthSecureTunnelAfterInterruption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecuritySettings);
        }

        /// <summary>
        /// Returns true if SecuritySettings instances are equal
        /// </summary>
        /// <param name="input">Instance of SecuritySettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecuritySettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClusterPublicKey == input.ClusterPublicKey ||
                    (this.ClusterPublicKey != null &&
                    this.ClusterPublicKey.Equals(input.ClusterPublicKey))
                ) && 
                (
                    this.ClusterPublicKeyId == input.ClusterPublicKeyId ||
                    (this.ClusterPublicKeyId != null &&
                    this.ClusterPublicKeyId.Equals(input.ClusterPublicKeyId))
                ) && 
                (
                    this.DataRecoveryPasswordConfigured == input.DataRecoveryPasswordConfigured ||
                    (this.DataRecoveryPasswordConfigured != null &&
                    this.DataRecoveryPasswordConfigured.Equals(input.DataRecoveryPasswordConfigured))
                ) && 
                (
                    this.MessageSecurityMode == input.MessageSecurityMode ||
                    (this.MessageSecurityMode != null &&
                    this.MessageSecurityMode.Equals(input.MessageSecurityMode))
                ) && 
                (
                    this.MessageSecurityStatus == input.MessageSecurityStatus ||
                    (this.MessageSecurityStatus != null &&
                    this.MessageSecurityStatus.Equals(input.MessageSecurityStatus))
                ) && 
                (
                    this.ReAuthSecureTunnelAfterInterruption == input.ReAuthSecureTunnelAfterInterruption ||
                    (this.ReAuthSecureTunnelAfterInterruption != null &&
                    this.ReAuthSecureTunnelAfterInterruption.Equals(input.ReAuthSecureTunnelAfterInterruption))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClusterPublicKey != null)
                    hashCode = hashCode * 59 + this.ClusterPublicKey.GetHashCode();
                if (this.ClusterPublicKeyId != null)
                    hashCode = hashCode * 59 + this.ClusterPublicKeyId.GetHashCode();
                if (this.DataRecoveryPasswordConfigured != null)
                    hashCode = hashCode * 59 + this.DataRecoveryPasswordConfigured.GetHashCode();
                if (this.MessageSecurityMode != null)
                    hashCode = hashCode * 59 + this.MessageSecurityMode.GetHashCode();
                if (this.MessageSecurityStatus != null)
                    hashCode = hashCode * 59 + this.MessageSecurityStatus.GetHashCode();
                if (this.ReAuthSecureTunnelAfterInterruption != null)
                    hashCode = hashCode * 59 + this.ReAuthSecureTunnelAfterInterruption.GetHashCode();
                return hashCode;
            }
        }
    }

}
