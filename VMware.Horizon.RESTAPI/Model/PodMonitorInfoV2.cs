/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Monitoring information related to a pod.
    /// </summary>
    [DataContract]
    public partial class PodMonitorInfoV2 :  IEquatable<PodMonitorInfoV2>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PodMonitorInfoV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PodMonitorInfoV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PodMonitorInfoV2" /> class.
        /// </summary>
        /// <param name="endpoints">The list of pod endpoints within this pod. An endpoint is basically a connection server in that pod..</param>
        /// <param name="id">Unique ID of the pod. (required).</param>
        /// <param name="name">Display name for the pod. (required).</param>
        /// <param name="siteId">The Id of the site this pod belongs to. (required).</param>
        public PodMonitorInfoV2(List<PodEndPointDataV2> endpoints = default(List<PodEndPointDataV2>), string id = default(string), string name = default(string), string siteId = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for PodMonitorInfoV2 and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for PodMonitorInfoV2 and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "siteId" is required (not null)
            if (siteId == null)
            {
                throw new InvalidDataException("siteId is a required property for PodMonitorInfoV2 and cannot be null");
            }
            else
            {
                this.SiteId = siteId;
            }
            this.Endpoints = endpoints;
        }
        
        /// <summary>
        /// The list of pod endpoints within this pod. An endpoint is basically a connection server in that pod.
        /// </summary>
        /// <value>The list of pod endpoints within this pod. An endpoint is basically a connection server in that pod.</value>
        [DataMember(Name="endpoints", EmitDefaultValue=false)]
        public List<PodEndPointDataV2> Endpoints { get; set; }

        /// <summary>
        /// Unique ID of the pod.
        /// </summary>
        /// <value>Unique ID of the pod.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Display name for the pod.
        /// </summary>
        /// <value>Display name for the pod.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The Id of the site this pod belongs to.
        /// </summary>
        /// <value>The Id of the site this pod belongs to.</value>
        [DataMember(Name="site_id", EmitDefaultValue=false)]
        public string SiteId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PodMonitorInfoV2 {\n");
            sb.Append("  Endpoints: ").Append(Endpoints).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PodMonitorInfoV2);
        }

        /// <summary>
        /// Returns true if PodMonitorInfoV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of PodMonitorInfoV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PodMonitorInfoV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Endpoints == input.Endpoints ||
                    this.Endpoints != null &&
                    this.Endpoints.SequenceEqual(input.Endpoints)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SiteId == input.SiteId ||
                    (this.SiteId != null &&
                    this.SiteId.Equals(input.SiteId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Endpoints != null)
                    hashCode = hashCode * 59 + this.Endpoints.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SiteId != null)
                    hashCode = hashCode * 59 + this.SiteId.GetHashCode();
                return hashCode;
            }
        }
    }

}
