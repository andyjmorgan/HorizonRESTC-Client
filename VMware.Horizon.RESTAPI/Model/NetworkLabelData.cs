/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to a network label.
    /// </summary>
    [DataContract]
    public partial class NetworkLabelData :  IEquatable<NetworkLabelData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkLabelData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NetworkLabelData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkLabelData" /> class.
        /// </summary>
        /// <param name="networkLabelName">The network label name. (required).</param>
        /// <param name="nicName">The network interface name (required).</param>
        public NetworkLabelData(string networkLabelName = default(string), string nicName = default(string))
        {
            // to ensure "networkLabelName" is required (not null)
            if (networkLabelName == null)
            {
                throw new InvalidDataException("networkLabelName is a required property for NetworkLabelData and cannot be null");
            }
            else
            {
                this.NetworkLabelName = networkLabelName;
            }
            // to ensure "nicName" is required (not null)
            if (nicName == null)
            {
                throw new InvalidDataException("nicName is a required property for NetworkLabelData and cannot be null");
            }
            else
            {
                this.NicName = nicName;
            }
        }
        
        /// <summary>
        /// The network label name.
        /// </summary>
        /// <value>The network label name.</value>
        [DataMember(Name="network_label_name", EmitDefaultValue=false)]
        public string NetworkLabelName { get; set; }

        /// <summary>
        /// The network interface name
        /// </summary>
        /// <value>The network interface name</value>
        [DataMember(Name="nic_name", EmitDefaultValue=false)]
        public string NicName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NetworkLabelData {\n");
            sb.Append("  NetworkLabelName: ").Append(NetworkLabelName).Append("\n");
            sb.Append("  NicName: ").Append(NicName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NetworkLabelData);
        }

        /// <summary>
        /// Returns true if NetworkLabelData instances are equal
        /// </summary>
        /// <param name="input">Instance of NetworkLabelData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkLabelData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NetworkLabelName == input.NetworkLabelName ||
                    (this.NetworkLabelName != null &&
                    this.NetworkLabelName.Equals(input.NetworkLabelName))
                ) && 
                (
                    this.NicName == input.NicName ||
                    (this.NicName != null &&
                    this.NicName.Equals(input.NicName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NetworkLabelName != null)
                    hashCode = hashCode * 59 + this.NetworkLabelName.GetHashCode();
                if (this.NicName != null)
                    hashCode = hashCode * 59 + this.NicName.GetHashCode();
                return hashCode;
            }
        }
    }

}
