/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to host or cluster.
    /// </summary>
    [DataContract]
    public partial class HostOrClusterInfo :  IEquatable<HostOrClusterInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HostOrClusterInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HostOrClusterInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HostOrClusterInfo" /> class.
        /// </summary>
        /// <param name="container">Set only if this node represents a container..</param>
        /// <param name="details">Set only if this node represents a host or cluster..</param>
        /// <param name="id">Unique ID representing a host or cluster. (required).</param>
        public HostOrClusterInfo(HostOrClusterContainer container = default(HostOrClusterContainer), HostOrClusterDetails details = default(HostOrClusterDetails), string id = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for HostOrClusterInfo and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            this.Container = container;
            this.Details = details;
        }
        
        /// <summary>
        /// Set only if this node represents a container.
        /// </summary>
        /// <value>Set only if this node represents a container.</value>
        [DataMember(Name="container", EmitDefaultValue=false)]
        public HostOrClusterContainer Container { get; set; }

        /// <summary>
        /// Set only if this node represents a host or cluster.
        /// </summary>
        /// <value>Set only if this node represents a host or cluster.</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public HostOrClusterDetails Details { get; set; }

        /// <summary>
        /// Unique ID representing a host or cluster.
        /// </summary>
        /// <value>Unique ID representing a host or cluster.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HostOrClusterInfo {\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HostOrClusterInfo);
        }

        /// <summary>
        /// Returns true if HostOrClusterInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of HostOrClusterInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostOrClusterInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Container == input.Container ||
                    (this.Container != null &&
                    this.Container.Equals(input.Container))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Container != null)
                    hashCode = hashCode * 59 + this.Container.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }
    }

}
