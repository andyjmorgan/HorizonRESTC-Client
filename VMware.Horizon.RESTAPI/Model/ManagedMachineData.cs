/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to Managed machines.
    /// </summary>
    [DataContract]
    public partial class ManagedMachineData :  IEquatable<ManagedMachineData>
    {
        /// <summary>
        /// The Horizon Storage Accelerator state. Storage acceleration will be available for managed machines if configured.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * OFF: The Storage Accelerator is off. * CURRENT: The machine cached data is updated. * OUT_OF_DATE: The machine cached data is not updated and requires regeneration. * ERROR: The Storage Accelerator has encountered an error.
        /// </summary>
        /// <value>The Horizon Storage Accelerator state. Storage acceleration will be available for managed machines if configured.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * OFF: The Storage Accelerator is off. * CURRENT: The machine cached data is updated. * OUT_OF_DATE: The machine cached data is not updated and requires regeneration. * ERROR: The Storage Accelerator has encountered an error.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StorageAcceleratorStateEnum
        {
            
            /// <summary>
            /// Enum OFF for value: OFF
            /// </summary>
            [EnumMember(Value = "OFF")]
            OFF = 1,
            
            /// <summary>
            /// Enum CURRENT for value: CURRENT
            /// </summary>
            [EnumMember(Value = "CURRENT")]
            CURRENT = 2,
            
            /// <summary>
            /// Enum OUTOFDATE for value: OUT_OF_DATE
            /// </summary>
            [EnumMember(Value = "OUT_OF_DATE")]
            OUTOFDATE = 3,
            
            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 4
        }

        /// <summary>
        /// The Horizon Storage Accelerator state. Storage acceleration will be available for managed machines if configured.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * OFF: The Storage Accelerator is off. * CURRENT: The machine cached data is updated. * OUT_OF_DATE: The machine cached data is not updated and requires regeneration. * ERROR: The Storage Accelerator has encountered an error.
        /// </summary>
        /// <value>The Horizon Storage Accelerator state. Storage acceleration will be available for managed machines if configured.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * OFF: The Storage Accelerator is off. * CURRENT: The machine cached data is updated. * OUT_OF_DATE: The machine cached data is not updated and requires regeneration. * ERROR: The Storage Accelerator has encountered an error.</value>
        [DataMember(Name="storage_accelerator_state", EmitDefaultValue=false)]
        public StorageAcceleratorStateEnum? StorageAcceleratorState { get; set; }
        /// <summary>
        /// The virtual machine power state.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * POWERED_OFF: The machine is powered off. * POWERED_ON: The machine is powered on. * SUSPENDED: The machine is suspended.
        /// </summary>
        /// <value>The virtual machine power state.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * POWERED_OFF: The machine is powered off. * POWERED_ON: The machine is powered on. * SUSPENDED: The machine is suspended.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VirtualMachinePowerStateEnum
        {
            
            /// <summary>
            /// Enum POWEREDOFF for value: POWERED_OFF
            /// </summary>
            [EnumMember(Value = "POWERED_OFF")]
            POWEREDOFF = 1,
            
            /// <summary>
            /// Enum POWEREDON for value: POWERED_ON
            /// </summary>
            [EnumMember(Value = "POWERED_ON")]
            POWEREDON = 2,
            
            /// <summary>
            /// Enum SUSPENDED for value: SUSPENDED
            /// </summary>
            [EnumMember(Value = "SUSPENDED")]
            SUSPENDED = 3
        }

        /// <summary>
        /// The virtual machine power state.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * POWERED_OFF: The machine is powered off. * POWERED_ON: The machine is powered on. * SUSPENDED: The machine is suspended.
        /// </summary>
        /// <value>The virtual machine power state.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * POWERED_OFF: The machine is powered off. * POWERED_ON: The machine is powered on. * SUSPENDED: The machine is suspended.</value>
        [DataMember(Name="virtual_machine_power_state", EmitDefaultValue=false)]
        public VirtualMachinePowerStateEnum VirtualMachinePowerState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagedMachineData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ManagedMachineData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagedMachineData" /> class.
        /// </summary>
        /// <param name="cloneErrorMessage">Cloning error message for this machine. This will be set for machine belonging to automated desktop pools when the machine&#39;s state is in PROVISIONING_ERROR or ERROR state..</param>
        /// <param name="cloneErrorTime">Cloning error time for this machine in milliseconds. Measured as epoch time. This will be set for machine belonging to automated desktop pools when the machine&#39;s state is in PROVISIONING_ERROR or ERROR state..</param>
        /// <param name="createTime">Time at which the machine was created in milliseconds. Measured as epoch time..</param>
        /// <param name="hostName">The name of the host on which this virtual machine is registered..</param>
        /// <param name="inHoldCustomization">This condition determines if this virtual machine should be on hold before customization is started.&lt;br&gt;Supported Filters : &#39;Equals&#39;..</param>
        /// <param name="inMaintenanceMode">Indicates whether the Machine is in maintenance mode..</param>
        /// <param name="memoryMb">The virtual machine physical memory in MB..</param>
        /// <param name="missingInVcenter">This condition determines if the virtual machine is missing in vCenter Server.&lt;br&gt;Supported Filters : &#39;Equals&#39;..</param>
        /// <param name="networkLabels">The network label(s) associated with this Machine. The network label(s) automatically assigned by Horizon to this Machine. These may differ from the actual labels if manually changed after automatic assignment or if there was an error in assignment. Labels are only assigned if the feature is enabled on this Machine&#39;s Desktop Pool..</param>
        /// <param name="path">The virtual machine path.&lt;br&gt;Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39; and &#39;Contains&#39;.Field name to be used in filter : managedMachineData.path. (required).</param>
        /// <param name="storageAcceleratorState">The Horizon Storage Accelerator state. Storage acceleration will be available for managed machines if configured.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * OFF: The Storage Accelerator is off. * CURRENT: The machine cached data is updated. * OUT_OF_DATE: The machine cached data is not updated and requires regeneration. * ERROR: The Storage Accelerator has encountered an error..</param>
        /// <param name="virtualCenterId">The ID of the Virtual Center managing this machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;. (required).</param>
        /// <param name="virtualDisks">The virtual disks comprising the virtual machine..</param>
        /// <param name="virtualMachinePowerState">The virtual machine power state.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * POWERED_OFF: The machine is powered off. * POWERED_ON: The machine is powered on. * SUSPENDED: The machine is suspended. (required).</param>
        public ManagedMachineData(string cloneErrorMessage = default(string), long? cloneErrorTime = default(long?), long? createTime = default(long?), string hostName = default(string), bool? inHoldCustomization = default(bool?), bool? inMaintenanceMode = default(bool?), int? memoryMb = default(int?), bool? missingInVcenter = default(bool?), List<NetworkLabelData> networkLabels = default(List<NetworkLabelData>), string path = default(string), StorageAcceleratorStateEnum? storageAcceleratorState = default(StorageAcceleratorStateEnum?), string virtualCenterId = default(string), List<VirtualDiskData> virtualDisks = default(List<VirtualDiskData>), VirtualMachinePowerStateEnum virtualMachinePowerState = default(VirtualMachinePowerStateEnum))
        {
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new InvalidDataException("path is a required property for ManagedMachineData and cannot be null");
            }
            else
            {
                this.Path = path;
            }
            // to ensure "virtualCenterId" is required (not null)
            if (virtualCenterId == null)
            {
                throw new InvalidDataException("virtualCenterId is a required property for ManagedMachineData and cannot be null");
            }
            else
            {
                this.VirtualCenterId = virtualCenterId;
            }
            // to ensure "virtualMachinePowerState" is required (not null)
            if (virtualMachinePowerState == null)
            {
                throw new InvalidDataException("virtualMachinePowerState is a required property for ManagedMachineData and cannot be null");
            }
            else
            {
                this.VirtualMachinePowerState = virtualMachinePowerState;
            }
            this.CloneErrorMessage = cloneErrorMessage;
            this.CloneErrorTime = cloneErrorTime;
            this.CreateTime = createTime;
            this.HostName = hostName;
            this.InHoldCustomization = inHoldCustomization;
            this.InMaintenanceMode = inMaintenanceMode;
            this.MemoryMb = memoryMb;
            this.MissingInVcenter = missingInVcenter;
            this.NetworkLabels = networkLabels;
            this.StorageAcceleratorState = storageAcceleratorState;
            this.VirtualDisks = virtualDisks;
        }
        
        /// <summary>
        /// Cloning error message for this machine. This will be set for machine belonging to automated desktop pools when the machine&#39;s state is in PROVISIONING_ERROR or ERROR state.
        /// </summary>
        /// <value>Cloning error message for this machine. This will be set for machine belonging to automated desktop pools when the machine&#39;s state is in PROVISIONING_ERROR or ERROR state.</value>
        [DataMember(Name="clone_error_message", EmitDefaultValue=false)]
        public string CloneErrorMessage { get; set; }

        /// <summary>
        /// Cloning error time for this machine in milliseconds. Measured as epoch time. This will be set for machine belonging to automated desktop pools when the machine&#39;s state is in PROVISIONING_ERROR or ERROR state.
        /// </summary>
        /// <value>Cloning error time for this machine in milliseconds. Measured as epoch time. This will be set for machine belonging to automated desktop pools when the machine&#39;s state is in PROVISIONING_ERROR or ERROR state.</value>
        [DataMember(Name="clone_error_time", EmitDefaultValue=false)]
        public long? CloneErrorTime { get; set; }

        /// <summary>
        /// Time at which the machine was created in milliseconds. Measured as epoch time.
        /// </summary>
        /// <value>Time at which the machine was created in milliseconds. Measured as epoch time.</value>
        [DataMember(Name="create_time", EmitDefaultValue=false)]
        public long? CreateTime { get; set; }

        /// <summary>
        /// The name of the host on which this virtual machine is registered.
        /// </summary>
        /// <value>The name of the host on which this virtual machine is registered.</value>
        [DataMember(Name="host_name", EmitDefaultValue=false)]
        public string HostName { get; set; }

        /// <summary>
        /// This condition determines if this virtual machine should be on hold before customization is started.&lt;br&gt;Supported Filters : &#39;Equals&#39;.
        /// </summary>
        /// <value>This condition determines if this virtual machine should be on hold before customization is started.&lt;br&gt;Supported Filters : &#39;Equals&#39;.</value>
        [DataMember(Name="in_hold_customization", EmitDefaultValue=false)]
        public bool? InHoldCustomization { get; set; }

        /// <summary>
        /// Indicates whether the Machine is in maintenance mode.
        /// </summary>
        /// <value>Indicates whether the Machine is in maintenance mode.</value>
        [DataMember(Name="in_maintenance_mode", EmitDefaultValue=false)]
        public bool? InMaintenanceMode { get; set; }

        /// <summary>
        /// The virtual machine physical memory in MB.
        /// </summary>
        /// <value>The virtual machine physical memory in MB.</value>
        [DataMember(Name="memory_mb", EmitDefaultValue=false)]
        public int? MemoryMb { get; set; }

        /// <summary>
        /// This condition determines if the virtual machine is missing in vCenter Server.&lt;br&gt;Supported Filters : &#39;Equals&#39;.
        /// </summary>
        /// <value>This condition determines if the virtual machine is missing in vCenter Server.&lt;br&gt;Supported Filters : &#39;Equals&#39;.</value>
        [DataMember(Name="missing_in_vcenter", EmitDefaultValue=false)]
        public bool? MissingInVcenter { get; set; }

        /// <summary>
        /// The network label(s) associated with this Machine. The network label(s) automatically assigned by Horizon to this Machine. These may differ from the actual labels if manually changed after automatic assignment or if there was an error in assignment. Labels are only assigned if the feature is enabled on this Machine&#39;s Desktop Pool.
        /// </summary>
        /// <value>The network label(s) associated with this Machine. The network label(s) automatically assigned by Horizon to this Machine. These may differ from the actual labels if manually changed after automatic assignment or if there was an error in assignment. Labels are only assigned if the feature is enabled on this Machine&#39;s Desktop Pool.</value>
        [DataMember(Name="network_labels", EmitDefaultValue=false)]
        public List<NetworkLabelData> NetworkLabels { get; set; }

        /// <summary>
        /// The virtual machine path.&lt;br&gt;Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39; and &#39;Contains&#39;.Field name to be used in filter : managedMachineData.path.
        /// </summary>
        /// <value>The virtual machine path.&lt;br&gt;Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39; and &#39;Contains&#39;.Field name to be used in filter : managedMachineData.path.</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }


        /// <summary>
        /// The ID of the Virtual Center managing this machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;.
        /// </summary>
        /// <value>The ID of the Virtual Center managing this machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;.</value>
        [DataMember(Name="virtual_center_id", EmitDefaultValue=false)]
        public string VirtualCenterId { get; set; }

        /// <summary>
        /// The virtual disks comprising the virtual machine.
        /// </summary>
        /// <value>The virtual disks comprising the virtual machine.</value>
        [DataMember(Name="virtual_disks", EmitDefaultValue=false)]
        public List<VirtualDiskData> VirtualDisks { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManagedMachineData {\n");
            sb.Append("  CloneErrorMessage: ").Append(CloneErrorMessage).Append("\n");
            sb.Append("  CloneErrorTime: ").Append(CloneErrorTime).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  InHoldCustomization: ").Append(InHoldCustomization).Append("\n");
            sb.Append("  InMaintenanceMode: ").Append(InMaintenanceMode).Append("\n");
            sb.Append("  MemoryMb: ").Append(MemoryMb).Append("\n");
            sb.Append("  MissingInVcenter: ").Append(MissingInVcenter).Append("\n");
            sb.Append("  NetworkLabels: ").Append(NetworkLabels).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  StorageAcceleratorState: ").Append(StorageAcceleratorState).Append("\n");
            sb.Append("  VirtualCenterId: ").Append(VirtualCenterId).Append("\n");
            sb.Append("  VirtualDisks: ").Append(VirtualDisks).Append("\n");
            sb.Append("  VirtualMachinePowerState: ").Append(VirtualMachinePowerState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ManagedMachineData);
        }

        /// <summary>
        /// Returns true if ManagedMachineData instances are equal
        /// </summary>
        /// <param name="input">Instance of ManagedMachineData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManagedMachineData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CloneErrorMessage == input.CloneErrorMessage ||
                    (this.CloneErrorMessage != null &&
                    this.CloneErrorMessage.Equals(input.CloneErrorMessage))
                ) && 
                (
                    this.CloneErrorTime == input.CloneErrorTime ||
                    (this.CloneErrorTime != null &&
                    this.CloneErrorTime.Equals(input.CloneErrorTime))
                ) && 
                (
                    this.CreateTime == input.CreateTime ||
                    (this.CreateTime != null &&
                    this.CreateTime.Equals(input.CreateTime))
                ) && 
                (
                    this.HostName == input.HostName ||
                    (this.HostName != null &&
                    this.HostName.Equals(input.HostName))
                ) && 
                (
                    this.InHoldCustomization == input.InHoldCustomization ||
                    (this.InHoldCustomization != null &&
                    this.InHoldCustomization.Equals(input.InHoldCustomization))
                ) && 
                (
                    this.InMaintenanceMode == input.InMaintenanceMode ||
                    (this.InMaintenanceMode != null &&
                    this.InMaintenanceMode.Equals(input.InMaintenanceMode))
                ) && 
                (
                    this.MemoryMb == input.MemoryMb ||
                    (this.MemoryMb != null &&
                    this.MemoryMb.Equals(input.MemoryMb))
                ) && 
                (
                    this.MissingInVcenter == input.MissingInVcenter ||
                    (this.MissingInVcenter != null &&
                    this.MissingInVcenter.Equals(input.MissingInVcenter))
                ) && 
                (
                    this.NetworkLabels == input.NetworkLabels ||
                    this.NetworkLabels != null &&
                    this.NetworkLabels.SequenceEqual(input.NetworkLabels)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.StorageAcceleratorState == input.StorageAcceleratorState ||
                    (this.StorageAcceleratorState != null &&
                    this.StorageAcceleratorState.Equals(input.StorageAcceleratorState))
                ) && 
                (
                    this.VirtualCenterId == input.VirtualCenterId ||
                    (this.VirtualCenterId != null &&
                    this.VirtualCenterId.Equals(input.VirtualCenterId))
                ) && 
                (
                    this.VirtualDisks == input.VirtualDisks ||
                    this.VirtualDisks != null &&
                    this.VirtualDisks.SequenceEqual(input.VirtualDisks)
                ) && 
                (
                    this.VirtualMachinePowerState == input.VirtualMachinePowerState ||
                    (this.VirtualMachinePowerState != null &&
                    this.VirtualMachinePowerState.Equals(input.VirtualMachinePowerState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CloneErrorMessage != null)
                    hashCode = hashCode * 59 + this.CloneErrorMessage.GetHashCode();
                if (this.CloneErrorTime != null)
                    hashCode = hashCode * 59 + this.CloneErrorTime.GetHashCode();
                if (this.CreateTime != null)
                    hashCode = hashCode * 59 + this.CreateTime.GetHashCode();
                if (this.HostName != null)
                    hashCode = hashCode * 59 + this.HostName.GetHashCode();
                if (this.InHoldCustomization != null)
                    hashCode = hashCode * 59 + this.InHoldCustomization.GetHashCode();
                if (this.InMaintenanceMode != null)
                    hashCode = hashCode * 59 + this.InMaintenanceMode.GetHashCode();
                if (this.MemoryMb != null)
                    hashCode = hashCode * 59 + this.MemoryMb.GetHashCode();
                if (this.MissingInVcenter != null)
                    hashCode = hashCode * 59 + this.MissingInVcenter.GetHashCode();
                if (this.NetworkLabels != null)
                    hashCode = hashCode * 59 + this.NetworkLabels.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.StorageAcceleratorState != null)
                    hashCode = hashCode * 59 + this.StorageAcceleratorState.GetHashCode();
                if (this.VirtualCenterId != null)
                    hashCode = hashCode * 59 + this.VirtualCenterId.GetHashCode();
                if (this.VirtualDisks != null)
                    hashCode = hashCode * 59 + this.VirtualDisks.GetHashCode();
                if (this.VirtualMachinePowerState != null)
                    hashCode = hashCode * 59 + this.VirtualMachinePowerState.GetHashCode();
                return hashCode;
            }
        }
    }

}
