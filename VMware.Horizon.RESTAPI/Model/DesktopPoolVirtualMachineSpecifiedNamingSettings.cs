/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Settings related to specified naming of machines.
    /// </summary>
    [DataContract]
    public partial class DesktopPoolVirtualMachineSpecifiedNamingSettings :  IEquatable<DesktopPoolVirtualMachineSpecifiedNamingSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DesktopPoolVirtualMachineSpecifiedNamingSettings" /> class.
        /// </summary>
        /// <param name="numMachines">Number of machines in the pool..</param>
        /// <param name="numUnassignedMachinesKeptPoweredOn">Number of unassigned machines kept powered on. This value must be less than or equal to the number of specified names..</param>
        /// <param name="startMachinesInMaintenanceMode">Allows virtual machines to be customized manually before users can log in and access them. This mode must be exited manually..</param>
        public DesktopPoolVirtualMachineSpecifiedNamingSettings(int? numMachines = default(int?), int? numUnassignedMachinesKeptPoweredOn = default(int?), bool? startMachinesInMaintenanceMode = default(bool?))
        {
            this.NumMachines = numMachines;
            this.NumUnassignedMachinesKeptPoweredOn = numUnassignedMachinesKeptPoweredOn;
            this.StartMachinesInMaintenanceMode = startMachinesInMaintenanceMode;
        }
        
        /// <summary>
        /// Number of machines in the pool.
        /// </summary>
        /// <value>Number of machines in the pool.</value>
        [DataMember(Name="num_machines", EmitDefaultValue=false)]
        public int? NumMachines { get; set; }

        /// <summary>
        /// Number of unassigned machines kept powered on. This value must be less than or equal to the number of specified names.
        /// </summary>
        /// <value>Number of unassigned machines kept powered on. This value must be less than or equal to the number of specified names.</value>
        [DataMember(Name="num_unassigned_machines_kept_powered_on", EmitDefaultValue=false)]
        public int? NumUnassignedMachinesKeptPoweredOn { get; set; }

        /// <summary>
        /// Allows virtual machines to be customized manually before users can log in and access them. This mode must be exited manually.
        /// </summary>
        /// <value>Allows virtual machines to be customized manually before users can log in and access them. This mode must be exited manually.</value>
        [DataMember(Name="start_machines_in_maintenance_mode", EmitDefaultValue=false)]
        public bool? StartMachinesInMaintenanceMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DesktopPoolVirtualMachineSpecifiedNamingSettings {\n");
            sb.Append("  NumMachines: ").Append(NumMachines).Append("\n");
            sb.Append("  NumUnassignedMachinesKeptPoweredOn: ").Append(NumUnassignedMachinesKeptPoweredOn).Append("\n");
            sb.Append("  StartMachinesInMaintenanceMode: ").Append(StartMachinesInMaintenanceMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DesktopPoolVirtualMachineSpecifiedNamingSettings);
        }

        /// <summary>
        /// Returns true if DesktopPoolVirtualMachineSpecifiedNamingSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of DesktopPoolVirtualMachineSpecifiedNamingSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DesktopPoolVirtualMachineSpecifiedNamingSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NumMachines == input.NumMachines ||
                    (this.NumMachines != null &&
                    this.NumMachines.Equals(input.NumMachines))
                ) && 
                (
                    this.NumUnassignedMachinesKeptPoweredOn == input.NumUnassignedMachinesKeptPoweredOn ||
                    (this.NumUnassignedMachinesKeptPoweredOn != null &&
                    this.NumUnassignedMachinesKeptPoweredOn.Equals(input.NumUnassignedMachinesKeptPoweredOn))
                ) && 
                (
                    this.StartMachinesInMaintenanceMode == input.StartMachinesInMaintenanceMode ||
                    (this.StartMachinesInMaintenanceMode != null &&
                    this.StartMachinesInMaintenanceMode.Equals(input.StartMachinesInMaintenanceMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumMachines != null)
                    hashCode = hashCode * 59 + this.NumMachines.GetHashCode();
                if (this.NumUnassignedMachinesKeptPoweredOn != null)
                    hashCode = hashCode * 59 + this.NumUnassignedMachinesKeptPoweredOn.GetHashCode();
                if (this.StartMachinesInMaintenanceMode != null)
                    hashCode = hashCode * 59 + this.StartMachinesInMaintenanceMode.GetHashCode();
                return hashCode;
            }
        }
    }

}
