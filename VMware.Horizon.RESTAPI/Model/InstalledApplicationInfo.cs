/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information about the application installed on RDS server/machine of a farm/desktop pool.
    /// </summary>
    [DataContract]
    public partial class InstalledApplicationInfo :  IEquatable<InstalledApplicationInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstalledApplicationInfo" /> class.
        /// </summary>
        /// <param name="executablePath">Path to application executable..</param>
        /// <param name="fileTypes">Set of file types reported by the application as supported. If unset, this application does not present any file type support..</param>
        /// <param name="name">Application name information, as sent by RDSServer/machine during application discovery..</param>
        /// <param name="otherFileTypes">This represents the different file types reported by Application that can be passed from horizon agent to horizon client via connection server. If unset, this application does not present any other file type support..</param>
        /// <param name="publisher">Application publisher.</param>
        /// <param name="version">Application version..</param>
        public InstalledApplicationInfo(string executablePath = default(string), List<ApplicationFileTypeData> fileTypes = default(List<ApplicationFileTypeData>), string name = default(string), List<ApplicationOtherFileTypeData> otherFileTypes = default(List<ApplicationOtherFileTypeData>), string publisher = default(string), string version = default(string))
        {
            this.ExecutablePath = executablePath;
            this.FileTypes = fileTypes;
            this.Name = name;
            this.OtherFileTypes = otherFileTypes;
            this.Publisher = publisher;
            this.Version = version;
        }
        
        /// <summary>
        /// Path to application executable.
        /// </summary>
        /// <value>Path to application executable.</value>
        [DataMember(Name="executable_path", EmitDefaultValue=false)]
        public string ExecutablePath { get; set; }

        /// <summary>
        /// Set of file types reported by the application as supported. If unset, this application does not present any file type support.
        /// </summary>
        /// <value>Set of file types reported by the application as supported. If unset, this application does not present any file type support.</value>
        [DataMember(Name="file_types", EmitDefaultValue=false)]
        public List<ApplicationFileTypeData> FileTypes { get; set; }

        /// <summary>
        /// Application name information, as sent by RDSServer/machine during application discovery.
        /// </summary>
        /// <value>Application name information, as sent by RDSServer/machine during application discovery.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// This represents the different file types reported by Application that can be passed from horizon agent to horizon client via connection server. If unset, this application does not present any other file type support.
        /// </summary>
        /// <value>This represents the different file types reported by Application that can be passed from horizon agent to horizon client via connection server. If unset, this application does not present any other file type support.</value>
        [DataMember(Name="other_file_types", EmitDefaultValue=false)]
        public List<ApplicationOtherFileTypeData> OtherFileTypes { get; set; }

        /// <summary>
        /// Application publisher
        /// </summary>
        /// <value>Application publisher</value>
        [DataMember(Name="publisher", EmitDefaultValue=false)]
        public string Publisher { get; set; }

        /// <summary>
        /// Application version.
        /// </summary>
        /// <value>Application version.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstalledApplicationInfo {\n");
            sb.Append("  ExecutablePath: ").Append(ExecutablePath).Append("\n");
            sb.Append("  FileTypes: ").Append(FileTypes).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OtherFileTypes: ").Append(OtherFileTypes).Append("\n");
            sb.Append("  Publisher: ").Append(Publisher).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstalledApplicationInfo);
        }

        /// <summary>
        /// Returns true if InstalledApplicationInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of InstalledApplicationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstalledApplicationInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExecutablePath == input.ExecutablePath ||
                    (this.ExecutablePath != null &&
                    this.ExecutablePath.Equals(input.ExecutablePath))
                ) && 
                (
                    this.FileTypes == input.FileTypes ||
                    this.FileTypes != null &&
                    this.FileTypes.SequenceEqual(input.FileTypes)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OtherFileTypes == input.OtherFileTypes ||
                    this.OtherFileTypes != null &&
                    this.OtherFileTypes.SequenceEqual(input.OtherFileTypes)
                ) && 
                (
                    this.Publisher == input.Publisher ||
                    (this.Publisher != null &&
                    this.Publisher.Equals(input.Publisher))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExecutablePath != null)
                    hashCode = hashCode * 59 + this.ExecutablePath.GetHashCode();
                if (this.FileTypes != null)
                    hashCode = hashCode * 59 + this.FileTypes.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OtherFileTypes != null)
                    hashCode = hashCode * 59 + this.OtherFileTypes.GetHashCode();
                if (this.Publisher != null)
                    hashCode = hashCode * 59 + this.Publisher.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }
    }

}
