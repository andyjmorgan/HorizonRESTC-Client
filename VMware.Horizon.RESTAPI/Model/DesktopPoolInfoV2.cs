/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to Desktop Pool.
    /// </summary>
    [DataContract]
    public partial class DesktopPoolInfoV2 :  IEquatable<DesktopPoolInfoV2>
    {
        /// <summary>
        /// Applicable To: Automated desktop pools.&lt;br&gt;Source of image used in the desktop pool. * VIRTUAL_CENTER: Image was created in virtual center. * IMAGE_CATALOG: Image was created in image catalog.
        /// </summary>
        /// <value>Applicable To: Automated desktop pools.&lt;br&gt;Source of image used in the desktop pool. * VIRTUAL_CENTER: Image was created in virtual center. * IMAGE_CATALOG: Image was created in image catalog.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ImageSourceEnum
        {
            
            /// <summary>
            /// Enum VIRTUALCENTER for value: VIRTUAL_CENTER
            /// </summary>
            [EnumMember(Value = "VIRTUAL_CENTER")]
            VIRTUALCENTER = 1,
            
            /// <summary>
            /// Enum IMAGECATALOG for value: IMAGE_CATALOG
            /// </summary>
            [EnumMember(Value = "IMAGE_CATALOG")]
            IMAGECATALOG = 2
        }

        /// <summary>
        /// Applicable To: Automated desktop pools.&lt;br&gt;Source of image used in the desktop pool. * VIRTUAL_CENTER: Image was created in virtual center. * IMAGE_CATALOG: Image was created in image catalog.
        /// </summary>
        /// <value>Applicable To: Automated desktop pools.&lt;br&gt;Source of image used in the desktop pool. * VIRTUAL_CENTER: Image was created in virtual center. * IMAGE_CATALOG: Image was created in image catalog.</value>
        [DataMember(Name="image_source", EmitDefaultValue=false)]
        public ImageSourceEnum? ImageSource { get; set; }
        /// <summary>
        /// Supported session types for this desktop pool. If application sessions are selected to besupported then this desktop pool can be used for application pool creation. This will beuseful when the machines in the pool support application remoting. Default value of DESKTOP. * DESKTOP: Only desktop sessions are supported. * APPLICATION: Only application sessions are supported. * DESKTOP_AND_APPLICATION: Both desktop and application sessions are supported.
        /// </summary>
        /// <value>Supported session types for this desktop pool. If application sessions are selected to besupported then this desktop pool can be used for application pool creation. This will beuseful when the machines in the pool support application remoting. Default value of DESKTOP. * DESKTOP: Only desktop sessions are supported. * APPLICATION: Only application sessions are supported. * DESKTOP_AND_APPLICATION: Both desktop and application sessions are supported.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SessionTypeEnum
        {
            
            /// <summary>
            /// Enum DESKTOP for value: DESKTOP
            /// </summary>
            [EnumMember(Value = "DESKTOP")]
            DESKTOP = 1,
            
            /// <summary>
            /// Enum APPLICATION for value: APPLICATION
            /// </summary>
            [EnumMember(Value = "APPLICATION")]
            APPLICATION = 2,
            
            /// <summary>
            /// Enum DESKTOPANDAPPLICATION for value: DESKTOP_AND_APPLICATION
            /// </summary>
            [EnumMember(Value = "DESKTOP_AND_APPLICATION")]
            DESKTOPANDAPPLICATION = 3
        }

        /// <summary>
        /// Supported session types for this desktop pool. If application sessions are selected to besupported then this desktop pool can be used for application pool creation. This will beuseful when the machines in the pool support application remoting. Default value of DESKTOP. * DESKTOP: Only desktop sessions are supported. * APPLICATION: Only application sessions are supported. * DESKTOP_AND_APPLICATION: Both desktop and application sessions are supported.
        /// </summary>
        /// <value>Supported session types for this desktop pool. If application sessions are selected to besupported then this desktop pool can be used for application pool creation. This will beuseful when the machines in the pool support application remoting. Default value of DESKTOP. * DESKTOP: Only desktop sessions are supported. * APPLICATION: Only application sessions are supported. * DESKTOP_AND_APPLICATION: Both desktop and application sessions are supported.</value>
        [DataMember(Name="session_type", EmitDefaultValue=false)]
        public SessionTypeEnum? SessionType { get; set; }
        /// <summary>
        /// Source of the Machines in this Desktop Pool. * INSTANT_CLONE: The Desktop Pool uses instant clone technology for provisioning the machines.Applicable for AUTOMATED type desktop pools. * LINKED_CLONE: The Desktop Pool uses linked clone technology for provisioning the machines.Applicable for AUTOMATED type desktop pools. * VIRTUAL_CENTER: The Desktop Pool uses Virtual Center as source for provisioning the machines.Applicable for AUTOMATED and MANUAL type desktop pools. * RDS: The Desktop Pool is backed by Farm. The Farm used in this Desktop Pool can be of any Source. * UNMANAGED: The Desktop Pool holds the non-vCenter source machines that includes physical computers,blade PCs and non-vCenter servers. Applicable for MANUAL type desktop pools.
        /// </summary>
        /// <value>Source of the Machines in this Desktop Pool. * INSTANT_CLONE: The Desktop Pool uses instant clone technology for provisioning the machines.Applicable for AUTOMATED type desktop pools. * LINKED_CLONE: The Desktop Pool uses linked clone technology for provisioning the machines.Applicable for AUTOMATED type desktop pools. * VIRTUAL_CENTER: The Desktop Pool uses Virtual Center as source for provisioning the machines.Applicable for AUTOMATED and MANUAL type desktop pools. * RDS: The Desktop Pool is backed by Farm. The Farm used in this Desktop Pool can be of any Source. * UNMANAGED: The Desktop Pool holds the non-vCenter source machines that includes physical computers,blade PCs and non-vCenter servers. Applicable for MANUAL type desktop pools.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            
            /// <summary>
            /// Enum INSTANTCLONE for value: INSTANT_CLONE
            /// </summary>
            [EnumMember(Value = "INSTANT_CLONE")]
            INSTANTCLONE = 1,
            
            /// <summary>
            /// Enum LINKEDCLONE for value: LINKED_CLONE
            /// </summary>
            [EnumMember(Value = "LINKED_CLONE")]
            LINKEDCLONE = 2,
            
            /// <summary>
            /// Enum VIRTUALCENTER for value: VIRTUAL_CENTER
            /// </summary>
            [EnumMember(Value = "VIRTUAL_CENTER")]
            VIRTUALCENTER = 3,
            
            /// <summary>
            /// Enum RDS for value: RDS
            /// </summary>
            [EnumMember(Value = "RDS")]
            RDS = 4,
            
            /// <summary>
            /// Enum UNMANAGED for value: UNMANAGED
            /// </summary>
            [EnumMember(Value = "UNMANAGED")]
            UNMANAGED = 5
        }

        /// <summary>
        /// Source of the Machines in this Desktop Pool. * INSTANT_CLONE: The Desktop Pool uses instant clone technology for provisioning the machines.Applicable for AUTOMATED type desktop pools. * LINKED_CLONE: The Desktop Pool uses linked clone technology for provisioning the machines.Applicable for AUTOMATED type desktop pools. * VIRTUAL_CENTER: The Desktop Pool uses Virtual Center as source for provisioning the machines.Applicable for AUTOMATED and MANUAL type desktop pools. * RDS: The Desktop Pool is backed by Farm. The Farm used in this Desktop Pool can be of any Source. * UNMANAGED: The Desktop Pool holds the non-vCenter source machines that includes physical computers,blade PCs and non-vCenter servers. Applicable for MANUAL type desktop pools.
        /// </summary>
        /// <value>Source of the Machines in this Desktop Pool. * INSTANT_CLONE: The Desktop Pool uses instant clone technology for provisioning the machines.Applicable for AUTOMATED type desktop pools. * LINKED_CLONE: The Desktop Pool uses linked clone technology for provisioning the machines.Applicable for AUTOMATED type desktop pools. * VIRTUAL_CENTER: The Desktop Pool uses Virtual Center as source for provisioning the machines.Applicable for AUTOMATED and MANUAL type desktop pools. * RDS: The Desktop Pool is backed by Farm. The Farm used in this Desktop Pool can be of any Source. * UNMANAGED: The Desktop Pool holds the non-vCenter source machines that includes physical computers,blade PCs and non-vCenter servers. Applicable for MANUAL type desktop pools.</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public SourceEnum? Source { get; set; }
        /// <summary>
        /// Applicable To: Manual and automated desktop pools.&lt;br&gt;The transparent page sharing scope. * VM: Inter-VM page sharing is not permitted. * DESKTOP_POOL: Inter-VM page sharing among VMs belonging to the same Desktop pool is permitted. * POD: Inter-VM page sharing among VMs belonging to the same Pod is permitted. * GLOBAL: Inter-VM page sharing among all VMs on the same host is permitted.
        /// </summary>
        /// <value>Applicable To: Manual and automated desktop pools.&lt;br&gt;The transparent page sharing scope. * VM: Inter-VM page sharing is not permitted. * DESKTOP_POOL: Inter-VM page sharing among VMs belonging to the same Desktop pool is permitted. * POD: Inter-VM page sharing among VMs belonging to the same Pod is permitted. * GLOBAL: Inter-VM page sharing among all VMs on the same host is permitted.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransparentPageSharingScopeEnum
        {
            
            /// <summary>
            /// Enum VM for value: VM
            /// </summary>
            [EnumMember(Value = "VM")]
            VM = 1,
            
            /// <summary>
            /// Enum DESKTOPPOOL for value: DESKTOP_POOL
            /// </summary>
            [EnumMember(Value = "DESKTOP_POOL")]
            DESKTOPPOOL = 2,
            
            /// <summary>
            /// Enum POD for value: POD
            /// </summary>
            [EnumMember(Value = "POD")]
            POD = 3,
            
            /// <summary>
            /// Enum GLOBAL for value: GLOBAL
            /// </summary>
            [EnumMember(Value = "GLOBAL")]
            GLOBAL = 4
        }

        /// <summary>
        /// Applicable To: Manual and automated desktop pools.&lt;br&gt;The transparent page sharing scope. * VM: Inter-VM page sharing is not permitted. * DESKTOP_POOL: Inter-VM page sharing among VMs belonging to the same Desktop pool is permitted. * POD: Inter-VM page sharing among VMs belonging to the same Pod is permitted. * GLOBAL: Inter-VM page sharing among all VMs on the same host is permitted.
        /// </summary>
        /// <value>Applicable To: Manual and automated desktop pools.&lt;br&gt;The transparent page sharing scope. * VM: Inter-VM page sharing is not permitted. * DESKTOP_POOL: Inter-VM page sharing among VMs belonging to the same Desktop pool is permitted. * POD: Inter-VM page sharing among VMs belonging to the same Pod is permitted. * GLOBAL: Inter-VM page sharing among all VMs on the same host is permitted.</value>
        [DataMember(Name="transparent_page_sharing_scope", EmitDefaultValue=false)]
        public TransparentPageSharingScopeEnum? TransparentPageSharingScope { get; set; }
        /// <summary>
        /// Type of the desktop pool. * AUTOMATED: Automated Desktop Pool. * MANUAL: Manual Desktop Pool. * RDS: RDS Desktop Pool.
        /// </summary>
        /// <value>Type of the desktop pool. * AUTOMATED: Automated Desktop Pool. * MANUAL: Manual Desktop Pool. * RDS: RDS Desktop Pool.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum AUTOMATED for value: AUTOMATED
            /// </summary>
            [EnumMember(Value = "AUTOMATED")]
            AUTOMATED = 1,
            
            /// <summary>
            /// Enum MANUAL for value: MANUAL
            /// </summary>
            [EnumMember(Value = "MANUAL")]
            MANUAL = 2,
            
            /// <summary>
            /// Enum RDS for value: RDS
            /// </summary>
            [EnumMember(Value = "RDS")]
            RDS = 3
        }

        /// <summary>
        /// Type of the desktop pool. * AUTOMATED: Automated Desktop Pool. * MANUAL: Manual Desktop Pool. * RDS: RDS Desktop Pool.
        /// </summary>
        /// <value>Type of the desktop pool. * AUTOMATED: Automated Desktop Pool. * MANUAL: Manual Desktop Pool. * RDS: RDS Desktop Pool.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Applicable To: Manual and automated desktop pools.&lt;br&gt;User assignment scheme. * DEDICATED: With dedicated assignment, a user returns to the same machine at each session. * FLOATING: With floating assignment, a user may return to one of the available machines for the next session.
        /// </summary>
        /// <value>Applicable To: Manual and automated desktop pools.&lt;br&gt;User assignment scheme. * DEDICATED: With dedicated assignment, a user returns to the same machine at each session. * FLOATING: With floating assignment, a user may return to one of the available machines for the next session.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserAssignmentEnum
        {
            
            /// <summary>
            /// Enum DEDICATED for value: DEDICATED
            /// </summary>
            [EnumMember(Value = "DEDICATED")]
            DEDICATED = 1,
            
            /// <summary>
            /// Enum FLOATING for value: FLOATING
            /// </summary>
            [EnumMember(Value = "FLOATING")]
            FLOATING = 2
        }

        /// <summary>
        /// Applicable To: Manual and automated desktop pools.&lt;br&gt;User assignment scheme. * DEDICATED: With dedicated assignment, a user returns to the same machine at each session. * FLOATING: With floating assignment, a user may return to one of the available machines for the next session.
        /// </summary>
        /// <value>Applicable To: Manual and automated desktop pools.&lt;br&gt;User assignment scheme. * DEDICATED: With dedicated assignment, a user returns to the same machine at each session. * FLOATING: With floating assignment, a user may return to one of the available machines for the next session.</value>
        [DataMember(Name="user_assignment", EmitDefaultValue=false)]
        public UserAssignmentEnum? UserAssignment { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DesktopPoolInfoV2" /> class.
        /// </summary>
        /// <param name="accessGroupId">Access groups can organize the entities (like application pools, desktop pools) in the organization. They can also be used for delegated administration..</param>
        /// <param name="allowMultipleUserAssignments">Applicable To: Dedicated manual and automated desktop pools (except linked clone pools) with manual user assignment.&lt;br&gt;Whether assignment of multiple users to a single machine is allowed. .</param>
        /// <param name="allowRdsPoolMultiSessionPerUser">Applicable To: RDS desktop pools.&lt;br&gt;Whether multiple sessions are allowed per user for this pool.For other desktop pools, allow_multiple_sessions_per_user in sessionSettings will be applicable..</param>
        /// <param name="automaticUserAssignment">Applicable To: Dedicated manual and automated desktop pools.&lt;br&gt;Automatic assignment of a user the first time they access the machine..</param>
        /// <param name="categoryFolderName">Name of the category folder in the user&#39;s OS containing a shortcut to the desktop pool.Will be unset if the desktop does not belong to a category.This property defines valid folder names with a max length of 64 characters and up to 4 subdirectory levels.The subdirectories can be specified using a backslash, e.g. (dir1\\dir2\\dir3\\dir4). Folder names can&#39;t start orend with a backslash nor can there be 2 or more backslashes together. Combinations such as(\\dir1, dir1\\dir2\\, dir1\\\\dir2, dir1\\\\\\dir2) are invalid. The windows reserved keywords(CON, PRN, NUL, AUX, COM1 - COM9, LPT1 - LPT9 etc.) are not allowed in subdirectory names..</param>
        /// <param name="cloudAssigned">Indicates whether this desktop is assigned to a workspace in Horizon Cloud Services..</param>
        /// <param name="cloudManaged">Indicates whether this desktop is managed by Horizon Cloud Services.This can be false only when cloud_assigned is false..</param>
        /// <param name="csRestrictionTags">List of tags for which the access to the desktop pool is restricted to.No list indicates that desktop pool can be accessed from any connection server..</param>
        /// <param name="customizationSettings">Applicable To: Automated desktop pools.&lt;br&gt;Customization settings for this desktop pool..</param>
        /// <param name="deleteInProgress">Indicates whether the desktop pool is in the process of being deleted.Default value is false..</param>
        /// <param name="description">Description of the Desktop Pool. The maximum length is 1024 characters..</param>
        /// <param name="displayAssignedMachineName">Applicable To: Dedicated manual and automated desktop pools.&lt;br&gt;Indicates whether users should see the hostname of the machine assigned to them instead of displayName when they connect using View Client. If no machine is assigned to the user then \&quot;displayName (No machine assigned)\&quot; will be displayed in the client..</param>
        /// <param name="displayName">Display name of the Desktop Pool. The maximum length is 256 characters..</param>
        /// <param name="displayProtocolSettings">Remote display protocol settings. These relate to RDP/PCoIP/BLAST..</param>
        /// <param name="enableClientRestrictions">Client restrictions to be applied to the desktop pool..</param>
        /// <param name="enableProvisioning">Applicable To: Automated desktop pools.&lt;br&gt;Whether provisioning is enabled..</param>
        /// <param name="enabled">Indicates whether the Desktop Pool is enabled for brokering..</param>
        /// <param name="farmId">Applicable To: RDS desktop pools.&lt;br&gt;Farm needed to create RDS desktop pool..</param>
        /// <param name="id">Unique ID representing Desktop Pool..</param>
        /// <param name="imageSource">Applicable To: Automated desktop pools.&lt;br&gt;Source of image used in the desktop pool. * VIRTUAL_CENTER: Image was created in virtual center. * IMAGE_CATALOG: Image was created in image catalog..</param>
        /// <param name="name">Name of the Desktop Pool. The maximum length is 64 characters..</param>
        /// <param name="nics">Applicable To: Automated desktop pools.&lt;br&gt;Network interface card settings for machines provisioned for this desktop. A NIC may appear at most once in these settings and must be present on this desktop pool&#39;s parent&#39;s snapshot or template. Not all NICs need be configured. Any that are not will use default settings..</param>
        /// <param name="patternNamingSettings">Applicable To: Automated desktop pools.&lt;br&gt;Pattern naming settings..</param>
        /// <param name="provisioningSettings">Applicable To: Automated desktop pools.&lt;br&gt;Virtual center entities used for provisioning..</param>
        /// <param name="provisioningStatusData">Applicable To: Automated desktop pools.&lt;br&gt;Provisioning status data about this desktop pool..</param>
        /// <param name="sessionSettings">Includes machine settings applicable when a user logs off or when a desktop pool is no longer keeping a machine as a spare..</param>
        /// <param name="sessionType">Supported session types for this desktop pool. If application sessions are selected to besupported then this desktop pool can be used for application pool creation. This will beuseful when the machines in the pool support application remoting. Default value of DESKTOP. * DESKTOP: Only desktop sessions are supported. * APPLICATION: Only application sessions are supported. * DESKTOP_AND_APPLICATION: Both desktop and application sessions are supported..</param>
        /// <param name="shortcutLocations">Locations of the category folder in the user&#39;s OS containing a shortcut to the desktop pool.The value will be present if categoryFolderName is set..</param>
        /// <param name="source">Source of the Machines in this Desktop Pool. * INSTANT_CLONE: The Desktop Pool uses instant clone technology for provisioning the machines.Applicable for AUTOMATED type desktop pools. * LINKED_CLONE: The Desktop Pool uses linked clone technology for provisioning the machines.Applicable for AUTOMATED type desktop pools. * VIRTUAL_CENTER: The Desktop Pool uses Virtual Center as source for provisioning the machines.Applicable for AUTOMATED and MANUAL type desktop pools. * RDS: The Desktop Pool is backed by Farm. The Farm used in this Desktop Pool can be of any Source. * UNMANAGED: The Desktop Pool holds the non-vCenter source machines that includes physical computers,blade PCs and non-vCenter servers. Applicable for MANUAL type desktop pools..</param>
        /// <param name="specificNamingSettings">Applicable To: Automated desktop pools.&lt;br&gt;Specified name settings..</param>
        /// <param name="stopProvisioningOnError">Applicable To: Automated desktop pools.&lt;br&gt;Whether provisioning on all machines stops on error..</param>
        /// <param name="storageSettings">Applicable To: Automated desktop pools.&lt;br&gt;Virtual Center storage settings..</param>
        /// <param name="transparentPageSharingScope">Applicable To: Manual and automated desktop pools.&lt;br&gt;The transparent page sharing scope. * VM: Inter-VM page sharing is not permitted. * DESKTOP_POOL: Inter-VM page sharing among VMs belonging to the same Desktop pool is permitted. * POD: Inter-VM page sharing among VMs belonging to the same Pod is permitted. * GLOBAL: Inter-VM page sharing among all VMs on the same host is permitted..</param>
        /// <param name="type">Type of the desktop pool. * AUTOMATED: Automated Desktop Pool. * MANUAL: Manual Desktop Pool. * RDS: RDS Desktop Pool..</param>
        /// <param name="userAssignment">Applicable To: Manual and automated desktop pools.&lt;br&gt;User assignment scheme. * DEDICATED: With dedicated assignment, a user returns to the same machine at each session. * FLOATING: With floating assignment, a user may return to one of the available machines for the next session..</param>
        /// <param name="vcenterId">Applicable To: Manual and automated desktop pools.&lt;br&gt;Virtual Center that manages the machines of the desktop pool..</param>
        /// <param name="viewStorageAcceleratorSettings">Applicable To: Manual and automated desktop pools.&lt;br&gt;View Storage Accelerator settings..</param>
        public DesktopPoolInfoV2(string accessGroupId = default(string), bool? allowMultipleUserAssignments = default(bool?), bool? allowRdsPoolMultiSessionPerUser = default(bool?), bool? automaticUserAssignment = default(bool?), string categoryFolderName = default(string), bool? cloudAssigned = default(bool?), bool? cloudManaged = default(bool?), List<string> csRestrictionTags = default(List<string>), DesktopPoolCustomizationSettings customizationSettings = default(DesktopPoolCustomizationSettings), bool? deleteInProgress = default(bool?), string description = default(string), bool? displayAssignedMachineName = default(bool?), string displayName = default(string), DesktopPoolDisplayProtocolSettings displayProtocolSettings = default(DesktopPoolDisplayProtocolSettings), bool? enableClientRestrictions = default(bool?), bool? enableProvisioning = default(bool?), bool? enabled = default(bool?), string farmId = default(string), string id = default(string), ImageSourceEnum? imageSource = default(ImageSourceEnum?), string name = default(string), List<DesktopPoolNetworkInterfaceCardSettings> nics = default(List<DesktopPoolNetworkInterfaceCardSettings>), DesktopPoolVirtualMachinePatternNamingSettings patternNamingSettings = default(DesktopPoolVirtualMachinePatternNamingSettings), DesktopPoolProvisioningSettings provisioningSettings = default(DesktopPoolProvisioningSettings), DesktopPoolProvisioningStatusData provisioningStatusData = default(DesktopPoolProvisioningStatusData), DesktopPoolSessionSettingsV2 sessionSettings = default(DesktopPoolSessionSettingsV2), SessionTypeEnum? sessionType = default(SessionTypeEnum?), List<string> shortcutLocations = default(List<string>), SourceEnum? source = default(SourceEnum?), DesktopPoolVirtualMachineSpecifiedNamingSettings specificNamingSettings = default(DesktopPoolVirtualMachineSpecifiedNamingSettings), bool? stopProvisioningOnError = default(bool?), DesktopPoolStorageSettings storageSettings = default(DesktopPoolStorageSettings), TransparentPageSharingScopeEnum? transparentPageSharingScope = default(TransparentPageSharingScopeEnum?), TypeEnum? type = default(TypeEnum?), UserAssignmentEnum? userAssignment = default(UserAssignmentEnum?), string vcenterId = default(string), DesktopPoolViewStorageAcceleratorSettings viewStorageAcceleratorSettings = default(DesktopPoolViewStorageAcceleratorSettings))
        {
            this.AccessGroupId = accessGroupId;
            this.AllowMultipleUserAssignments = allowMultipleUserAssignments;
            this.AllowRdsPoolMultiSessionPerUser = allowRdsPoolMultiSessionPerUser;
            this.AutomaticUserAssignment = automaticUserAssignment;
            this.CategoryFolderName = categoryFolderName;
            this.CloudAssigned = cloudAssigned;
            this.CloudManaged = cloudManaged;
            this.CsRestrictionTags = csRestrictionTags;
            this.CustomizationSettings = customizationSettings;
            this.DeleteInProgress = deleteInProgress;
            this.Description = description;
            this.DisplayAssignedMachineName = displayAssignedMachineName;
            this.DisplayName = displayName;
            this.DisplayProtocolSettings = displayProtocolSettings;
            this.EnableClientRestrictions = enableClientRestrictions;
            this.EnableProvisioning = enableProvisioning;
            this.Enabled = enabled;
            this.FarmId = farmId;
            this.Id = id;
            this.ImageSource = imageSource;
            this.Name = name;
            this.Nics = nics;
            this.PatternNamingSettings = patternNamingSettings;
            this.ProvisioningSettings = provisioningSettings;
            this.ProvisioningStatusData = provisioningStatusData;
            this.SessionSettings = sessionSettings;
            this.SessionType = sessionType;
            this.ShortcutLocations = shortcutLocations;
            this.Source = source;
            this.SpecificNamingSettings = specificNamingSettings;
            this.StopProvisioningOnError = stopProvisioningOnError;
            this.StorageSettings = storageSettings;
            this.TransparentPageSharingScope = transparentPageSharingScope;
            this.Type = type;
            this.UserAssignment = userAssignment;
            this.VcenterId = vcenterId;
            this.ViewStorageAcceleratorSettings = viewStorageAcceleratorSettings;
        }
        
        /// <summary>
        /// Access groups can organize the entities (like application pools, desktop pools) in the organization. They can also be used for delegated administration.
        /// </summary>
        /// <value>Access groups can organize the entities (like application pools, desktop pools) in the organization. They can also be used for delegated administration.</value>
        [DataMember(Name="access_group_id", EmitDefaultValue=false)]
        public string AccessGroupId { get; set; }

        /// <summary>
        /// Applicable To: Dedicated manual and automated desktop pools (except linked clone pools) with manual user assignment.&lt;br&gt;Whether assignment of multiple users to a single machine is allowed. 
        /// </summary>
        /// <value>Applicable To: Dedicated manual and automated desktop pools (except linked clone pools) with manual user assignment.&lt;br&gt;Whether assignment of multiple users to a single machine is allowed. </value>
        [DataMember(Name="allow_multiple_user_assignments", EmitDefaultValue=false)]
        public bool? AllowMultipleUserAssignments { get; set; }

        /// <summary>
        /// Applicable To: RDS desktop pools.&lt;br&gt;Whether multiple sessions are allowed per user for this pool.For other desktop pools, allow_multiple_sessions_per_user in sessionSettings will be applicable.
        /// </summary>
        /// <value>Applicable To: RDS desktop pools.&lt;br&gt;Whether multiple sessions are allowed per user for this pool.For other desktop pools, allow_multiple_sessions_per_user in sessionSettings will be applicable.</value>
        [DataMember(Name="allow_rds_pool_multi_session_per_user", EmitDefaultValue=false)]
        public bool? AllowRdsPoolMultiSessionPerUser { get; set; }

        /// <summary>
        /// Applicable To: Dedicated manual and automated desktop pools.&lt;br&gt;Automatic assignment of a user the first time they access the machine.
        /// </summary>
        /// <value>Applicable To: Dedicated manual and automated desktop pools.&lt;br&gt;Automatic assignment of a user the first time they access the machine.</value>
        [DataMember(Name="automatic_user_assignment", EmitDefaultValue=false)]
        public bool? AutomaticUserAssignment { get; set; }

        /// <summary>
        /// Name of the category folder in the user&#39;s OS containing a shortcut to the desktop pool.Will be unset if the desktop does not belong to a category.This property defines valid folder names with a max length of 64 characters and up to 4 subdirectory levels.The subdirectories can be specified using a backslash, e.g. (dir1\\dir2\\dir3\\dir4). Folder names can&#39;t start orend with a backslash nor can there be 2 or more backslashes together. Combinations such as(\\dir1, dir1\\dir2\\, dir1\\\\dir2, dir1\\\\\\dir2) are invalid. The windows reserved keywords(CON, PRN, NUL, AUX, COM1 - COM9, LPT1 - LPT9 etc.) are not allowed in subdirectory names.
        /// </summary>
        /// <value>Name of the category folder in the user&#39;s OS containing a shortcut to the desktop pool.Will be unset if the desktop does not belong to a category.This property defines valid folder names with a max length of 64 characters and up to 4 subdirectory levels.The subdirectories can be specified using a backslash, e.g. (dir1\\dir2\\dir3\\dir4). Folder names can&#39;t start orend with a backslash nor can there be 2 or more backslashes together. Combinations such as(\\dir1, dir1\\dir2\\, dir1\\\\dir2, dir1\\\\\\dir2) are invalid. The windows reserved keywords(CON, PRN, NUL, AUX, COM1 - COM9, LPT1 - LPT9 etc.) are not allowed in subdirectory names.</value>
        [DataMember(Name="category_folder_name", EmitDefaultValue=false)]
        public string CategoryFolderName { get; set; }

        /// <summary>
        /// Indicates whether this desktop is assigned to a workspace in Horizon Cloud Services.
        /// </summary>
        /// <value>Indicates whether this desktop is assigned to a workspace in Horizon Cloud Services.</value>
        [DataMember(Name="cloud_assigned", EmitDefaultValue=false)]
        public bool? CloudAssigned { get; set; }

        /// <summary>
        /// Indicates whether this desktop is managed by Horizon Cloud Services.This can be false only when cloud_assigned is false.
        /// </summary>
        /// <value>Indicates whether this desktop is managed by Horizon Cloud Services.This can be false only when cloud_assigned is false.</value>
        [DataMember(Name="cloud_managed", EmitDefaultValue=false)]
        public bool? CloudManaged { get; set; }

        /// <summary>
        /// List of tags for which the access to the desktop pool is restricted to.No list indicates that desktop pool can be accessed from any connection server.
        /// </summary>
        /// <value>List of tags for which the access to the desktop pool is restricted to.No list indicates that desktop pool can be accessed from any connection server.</value>
        [DataMember(Name="cs_restriction_tags", EmitDefaultValue=false)]
        public List<string> CsRestrictionTags { get; set; }

        /// <summary>
        /// Applicable To: Automated desktop pools.&lt;br&gt;Customization settings for this desktop pool.
        /// </summary>
        /// <value>Applicable To: Automated desktop pools.&lt;br&gt;Customization settings for this desktop pool.</value>
        [DataMember(Name="customization_settings", EmitDefaultValue=false)]
        public DesktopPoolCustomizationSettings CustomizationSettings { get; set; }

        /// <summary>
        /// Indicates whether the desktop pool is in the process of being deleted.Default value is false.
        /// </summary>
        /// <value>Indicates whether the desktop pool is in the process of being deleted.Default value is false.</value>
        [DataMember(Name="delete_in_progress", EmitDefaultValue=false)]
        public bool? DeleteInProgress { get; set; }

        /// <summary>
        /// Description of the Desktop Pool. The maximum length is 1024 characters.
        /// </summary>
        /// <value>Description of the Desktop Pool. The maximum length is 1024 characters.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Applicable To: Dedicated manual and automated desktop pools.&lt;br&gt;Indicates whether users should see the hostname of the machine assigned to them instead of displayName when they connect using View Client. If no machine is assigned to the user then \&quot;displayName (No machine assigned)\&quot; will be displayed in the client.
        /// </summary>
        /// <value>Applicable To: Dedicated manual and automated desktop pools.&lt;br&gt;Indicates whether users should see the hostname of the machine assigned to them instead of displayName when they connect using View Client. If no machine is assigned to the user then \&quot;displayName (No machine assigned)\&quot; will be displayed in the client.</value>
        [DataMember(Name="display_assigned_machine_name", EmitDefaultValue=false)]
        public bool? DisplayAssignedMachineName { get; set; }

        /// <summary>
        /// Display name of the Desktop Pool. The maximum length is 256 characters.
        /// </summary>
        /// <value>Display name of the Desktop Pool. The maximum length is 256 characters.</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Remote display protocol settings. These relate to RDP/PCoIP/BLAST.
        /// </summary>
        /// <value>Remote display protocol settings. These relate to RDP/PCoIP/BLAST.</value>
        [DataMember(Name="display_protocol_settings", EmitDefaultValue=false)]
        public DesktopPoolDisplayProtocolSettings DisplayProtocolSettings { get; set; }

        /// <summary>
        /// Client restrictions to be applied to the desktop pool.
        /// </summary>
        /// <value>Client restrictions to be applied to the desktop pool.</value>
        [DataMember(Name="enable_client_restrictions", EmitDefaultValue=false)]
        public bool? EnableClientRestrictions { get; set; }

        /// <summary>
        /// Applicable To: Automated desktop pools.&lt;br&gt;Whether provisioning is enabled.
        /// </summary>
        /// <value>Applicable To: Automated desktop pools.&lt;br&gt;Whether provisioning is enabled.</value>
        [DataMember(Name="enable_provisioning", EmitDefaultValue=false)]
        public bool? EnableProvisioning { get; set; }

        /// <summary>
        /// Indicates whether the Desktop Pool is enabled for brokering.
        /// </summary>
        /// <value>Indicates whether the Desktop Pool is enabled for brokering.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Applicable To: RDS desktop pools.&lt;br&gt;Farm needed to create RDS desktop pool.
        /// </summary>
        /// <value>Applicable To: RDS desktop pools.&lt;br&gt;Farm needed to create RDS desktop pool.</value>
        [DataMember(Name="farm_id", EmitDefaultValue=false)]
        public string FarmId { get; set; }

        /// <summary>
        /// Unique ID representing Desktop Pool.
        /// </summary>
        /// <value>Unique ID representing Desktop Pool.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Name of the Desktop Pool. The maximum length is 64 characters.
        /// </summary>
        /// <value>Name of the Desktop Pool. The maximum length is 64 characters.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Applicable To: Automated desktop pools.&lt;br&gt;Network interface card settings for machines provisioned for this desktop. A NIC may appear at most once in these settings and must be present on this desktop pool&#39;s parent&#39;s snapshot or template. Not all NICs need be configured. Any that are not will use default settings.
        /// </summary>
        /// <value>Applicable To: Automated desktop pools.&lt;br&gt;Network interface card settings for machines provisioned for this desktop. A NIC may appear at most once in these settings and must be present on this desktop pool&#39;s parent&#39;s snapshot or template. Not all NICs need be configured. Any that are not will use default settings.</value>
        [DataMember(Name="nics", EmitDefaultValue=false)]
        public List<DesktopPoolNetworkInterfaceCardSettings> Nics { get; set; }

        /// <summary>
        /// Applicable To: Automated desktop pools.&lt;br&gt;Pattern naming settings.
        /// </summary>
        /// <value>Applicable To: Automated desktop pools.&lt;br&gt;Pattern naming settings.</value>
        [DataMember(Name="pattern_naming_settings", EmitDefaultValue=false)]
        public DesktopPoolVirtualMachinePatternNamingSettings PatternNamingSettings { get; set; }

        /// <summary>
        /// Applicable To: Automated desktop pools.&lt;br&gt;Virtual center entities used for provisioning.
        /// </summary>
        /// <value>Applicable To: Automated desktop pools.&lt;br&gt;Virtual center entities used for provisioning.</value>
        [DataMember(Name="provisioning_settings", EmitDefaultValue=false)]
        public DesktopPoolProvisioningSettings ProvisioningSettings { get; set; }

        /// <summary>
        /// Applicable To: Automated desktop pools.&lt;br&gt;Provisioning status data about this desktop pool.
        /// </summary>
        /// <value>Applicable To: Automated desktop pools.&lt;br&gt;Provisioning status data about this desktop pool.</value>
        [DataMember(Name="provisioning_status_data", EmitDefaultValue=false)]
        public DesktopPoolProvisioningStatusData ProvisioningStatusData { get; set; }

        /// <summary>
        /// Includes machine settings applicable when a user logs off or when a desktop pool is no longer keeping a machine as a spare.
        /// </summary>
        /// <value>Includes machine settings applicable when a user logs off or when a desktop pool is no longer keeping a machine as a spare.</value>
        [DataMember(Name="session_settings", EmitDefaultValue=false)]
        public DesktopPoolSessionSettingsV2 SessionSettings { get; set; }


        /// <summary>
        /// Locations of the category folder in the user&#39;s OS containing a shortcut to the desktop pool.The value will be present if categoryFolderName is set.
        /// </summary>
        /// <value>Locations of the category folder in the user&#39;s OS containing a shortcut to the desktop pool.The value will be present if categoryFolderName is set.</value>
        [DataMember(Name="shortcut_locations", EmitDefaultValue=false)]
        public List<string> ShortcutLocations { get; set; }


        /// <summary>
        /// Applicable To: Automated desktop pools.&lt;br&gt;Specified name settings.
        /// </summary>
        /// <value>Applicable To: Automated desktop pools.&lt;br&gt;Specified name settings.</value>
        [DataMember(Name="specific_naming_settings", EmitDefaultValue=false)]
        public DesktopPoolVirtualMachineSpecifiedNamingSettings SpecificNamingSettings { get; set; }

        /// <summary>
        /// Applicable To: Automated desktop pools.&lt;br&gt;Whether provisioning on all machines stops on error.
        /// </summary>
        /// <value>Applicable To: Automated desktop pools.&lt;br&gt;Whether provisioning on all machines stops on error.</value>
        [DataMember(Name="stop_provisioning_on_error", EmitDefaultValue=false)]
        public bool? StopProvisioningOnError { get; set; }

        /// <summary>
        /// Applicable To: Automated desktop pools.&lt;br&gt;Virtual Center storage settings.
        /// </summary>
        /// <value>Applicable To: Automated desktop pools.&lt;br&gt;Virtual Center storage settings.</value>
        [DataMember(Name="storage_settings", EmitDefaultValue=false)]
        public DesktopPoolStorageSettings StorageSettings { get; set; }




        /// <summary>
        /// Applicable To: Manual and automated desktop pools.&lt;br&gt;Virtual Center that manages the machines of the desktop pool.
        /// </summary>
        /// <value>Applicable To: Manual and automated desktop pools.&lt;br&gt;Virtual Center that manages the machines of the desktop pool.</value>
        [DataMember(Name="vcenter_id", EmitDefaultValue=false)]
        public string VcenterId { get; set; }

        /// <summary>
        /// Applicable To: Manual and automated desktop pools.&lt;br&gt;View Storage Accelerator settings.
        /// </summary>
        /// <value>Applicable To: Manual and automated desktop pools.&lt;br&gt;View Storage Accelerator settings.</value>
        [DataMember(Name="view_storage_accelerator_settings", EmitDefaultValue=false)]
        public DesktopPoolViewStorageAcceleratorSettings ViewStorageAcceleratorSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DesktopPoolInfoV2 {\n");
            sb.Append("  AccessGroupId: ").Append(AccessGroupId).Append("\n");
            sb.Append("  AllowMultipleUserAssignments: ").Append(AllowMultipleUserAssignments).Append("\n");
            sb.Append("  AllowRdsPoolMultiSessionPerUser: ").Append(AllowRdsPoolMultiSessionPerUser).Append("\n");
            sb.Append("  AutomaticUserAssignment: ").Append(AutomaticUserAssignment).Append("\n");
            sb.Append("  CategoryFolderName: ").Append(CategoryFolderName).Append("\n");
            sb.Append("  CloudAssigned: ").Append(CloudAssigned).Append("\n");
            sb.Append("  CloudManaged: ").Append(CloudManaged).Append("\n");
            sb.Append("  CsRestrictionTags: ").Append(CsRestrictionTags).Append("\n");
            sb.Append("  CustomizationSettings: ").Append(CustomizationSettings).Append("\n");
            sb.Append("  DeleteInProgress: ").Append(DeleteInProgress).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayAssignedMachineName: ").Append(DisplayAssignedMachineName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DisplayProtocolSettings: ").Append(DisplayProtocolSettings).Append("\n");
            sb.Append("  EnableClientRestrictions: ").Append(EnableClientRestrictions).Append("\n");
            sb.Append("  EnableProvisioning: ").Append(EnableProvisioning).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  FarmId: ").Append(FarmId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageSource: ").Append(ImageSource).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nics: ").Append(Nics).Append("\n");
            sb.Append("  PatternNamingSettings: ").Append(PatternNamingSettings).Append("\n");
            sb.Append("  ProvisioningSettings: ").Append(ProvisioningSettings).Append("\n");
            sb.Append("  ProvisioningStatusData: ").Append(ProvisioningStatusData).Append("\n");
            sb.Append("  SessionSettings: ").Append(SessionSettings).Append("\n");
            sb.Append("  SessionType: ").Append(SessionType).Append("\n");
            sb.Append("  ShortcutLocations: ").Append(ShortcutLocations).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  SpecificNamingSettings: ").Append(SpecificNamingSettings).Append("\n");
            sb.Append("  StopProvisioningOnError: ").Append(StopProvisioningOnError).Append("\n");
            sb.Append("  StorageSettings: ").Append(StorageSettings).Append("\n");
            sb.Append("  TransparentPageSharingScope: ").Append(TransparentPageSharingScope).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserAssignment: ").Append(UserAssignment).Append("\n");
            sb.Append("  VcenterId: ").Append(VcenterId).Append("\n");
            sb.Append("  ViewStorageAcceleratorSettings: ").Append(ViewStorageAcceleratorSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DesktopPoolInfoV2);
        }

        /// <summary>
        /// Returns true if DesktopPoolInfoV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of DesktopPoolInfoV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DesktopPoolInfoV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessGroupId == input.AccessGroupId ||
                    (this.AccessGroupId != null &&
                    this.AccessGroupId.Equals(input.AccessGroupId))
                ) && 
                (
                    this.AllowMultipleUserAssignments == input.AllowMultipleUserAssignments ||
                    (this.AllowMultipleUserAssignments != null &&
                    this.AllowMultipleUserAssignments.Equals(input.AllowMultipleUserAssignments))
                ) && 
                (
                    this.AllowRdsPoolMultiSessionPerUser == input.AllowRdsPoolMultiSessionPerUser ||
                    (this.AllowRdsPoolMultiSessionPerUser != null &&
                    this.AllowRdsPoolMultiSessionPerUser.Equals(input.AllowRdsPoolMultiSessionPerUser))
                ) && 
                (
                    this.AutomaticUserAssignment == input.AutomaticUserAssignment ||
                    (this.AutomaticUserAssignment != null &&
                    this.AutomaticUserAssignment.Equals(input.AutomaticUserAssignment))
                ) && 
                (
                    this.CategoryFolderName == input.CategoryFolderName ||
                    (this.CategoryFolderName != null &&
                    this.CategoryFolderName.Equals(input.CategoryFolderName))
                ) && 
                (
                    this.CloudAssigned == input.CloudAssigned ||
                    (this.CloudAssigned != null &&
                    this.CloudAssigned.Equals(input.CloudAssigned))
                ) && 
                (
                    this.CloudManaged == input.CloudManaged ||
                    (this.CloudManaged != null &&
                    this.CloudManaged.Equals(input.CloudManaged))
                ) && 
                (
                    this.CsRestrictionTags == input.CsRestrictionTags ||
                    this.CsRestrictionTags != null &&
                    this.CsRestrictionTags.SequenceEqual(input.CsRestrictionTags)
                ) && 
                (
                    this.CustomizationSettings == input.CustomizationSettings ||
                    (this.CustomizationSettings != null &&
                    this.CustomizationSettings.Equals(input.CustomizationSettings))
                ) && 
                (
                    this.DeleteInProgress == input.DeleteInProgress ||
                    (this.DeleteInProgress != null &&
                    this.DeleteInProgress.Equals(input.DeleteInProgress))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayAssignedMachineName == input.DisplayAssignedMachineName ||
                    (this.DisplayAssignedMachineName != null &&
                    this.DisplayAssignedMachineName.Equals(input.DisplayAssignedMachineName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.DisplayProtocolSettings == input.DisplayProtocolSettings ||
                    (this.DisplayProtocolSettings != null &&
                    this.DisplayProtocolSettings.Equals(input.DisplayProtocolSettings))
                ) && 
                (
                    this.EnableClientRestrictions == input.EnableClientRestrictions ||
                    (this.EnableClientRestrictions != null &&
                    this.EnableClientRestrictions.Equals(input.EnableClientRestrictions))
                ) && 
                (
                    this.EnableProvisioning == input.EnableProvisioning ||
                    (this.EnableProvisioning != null &&
                    this.EnableProvisioning.Equals(input.EnableProvisioning))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.FarmId == input.FarmId ||
                    (this.FarmId != null &&
                    this.FarmId.Equals(input.FarmId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImageSource == input.ImageSource ||
                    (this.ImageSource != null &&
                    this.ImageSource.Equals(input.ImageSource))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Nics == input.Nics ||
                    this.Nics != null &&
                    this.Nics.SequenceEqual(input.Nics)
                ) && 
                (
                    this.PatternNamingSettings == input.PatternNamingSettings ||
                    (this.PatternNamingSettings != null &&
                    this.PatternNamingSettings.Equals(input.PatternNamingSettings))
                ) && 
                (
                    this.ProvisioningSettings == input.ProvisioningSettings ||
                    (this.ProvisioningSettings != null &&
                    this.ProvisioningSettings.Equals(input.ProvisioningSettings))
                ) && 
                (
                    this.ProvisioningStatusData == input.ProvisioningStatusData ||
                    (this.ProvisioningStatusData != null &&
                    this.ProvisioningStatusData.Equals(input.ProvisioningStatusData))
                ) && 
                (
                    this.SessionSettings == input.SessionSettings ||
                    (this.SessionSettings != null &&
                    this.SessionSettings.Equals(input.SessionSettings))
                ) && 
                (
                    this.SessionType == input.SessionType ||
                    (this.SessionType != null &&
                    this.SessionType.Equals(input.SessionType))
                ) && 
                (
                    this.ShortcutLocations == input.ShortcutLocations ||
                    this.ShortcutLocations != null &&
                    this.ShortcutLocations.SequenceEqual(input.ShortcutLocations)
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.SpecificNamingSettings == input.SpecificNamingSettings ||
                    (this.SpecificNamingSettings != null &&
                    this.SpecificNamingSettings.Equals(input.SpecificNamingSettings))
                ) && 
                (
                    this.StopProvisioningOnError == input.StopProvisioningOnError ||
                    (this.StopProvisioningOnError != null &&
                    this.StopProvisioningOnError.Equals(input.StopProvisioningOnError))
                ) && 
                (
                    this.StorageSettings == input.StorageSettings ||
                    (this.StorageSettings != null &&
                    this.StorageSettings.Equals(input.StorageSettings))
                ) && 
                (
                    this.TransparentPageSharingScope == input.TransparentPageSharingScope ||
                    (this.TransparentPageSharingScope != null &&
                    this.TransparentPageSharingScope.Equals(input.TransparentPageSharingScope))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UserAssignment == input.UserAssignment ||
                    (this.UserAssignment != null &&
                    this.UserAssignment.Equals(input.UserAssignment))
                ) && 
                (
                    this.VcenterId == input.VcenterId ||
                    (this.VcenterId != null &&
                    this.VcenterId.Equals(input.VcenterId))
                ) && 
                (
                    this.ViewStorageAcceleratorSettings == input.ViewStorageAcceleratorSettings ||
                    (this.ViewStorageAcceleratorSettings != null &&
                    this.ViewStorageAcceleratorSettings.Equals(input.ViewStorageAcceleratorSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessGroupId != null)
                    hashCode = hashCode * 59 + this.AccessGroupId.GetHashCode();
                if (this.AllowMultipleUserAssignments != null)
                    hashCode = hashCode * 59 + this.AllowMultipleUserAssignments.GetHashCode();
                if (this.AllowRdsPoolMultiSessionPerUser != null)
                    hashCode = hashCode * 59 + this.AllowRdsPoolMultiSessionPerUser.GetHashCode();
                if (this.AutomaticUserAssignment != null)
                    hashCode = hashCode * 59 + this.AutomaticUserAssignment.GetHashCode();
                if (this.CategoryFolderName != null)
                    hashCode = hashCode * 59 + this.CategoryFolderName.GetHashCode();
                if (this.CloudAssigned != null)
                    hashCode = hashCode * 59 + this.CloudAssigned.GetHashCode();
                if (this.CloudManaged != null)
                    hashCode = hashCode * 59 + this.CloudManaged.GetHashCode();
                if (this.CsRestrictionTags != null)
                    hashCode = hashCode * 59 + this.CsRestrictionTags.GetHashCode();
                if (this.CustomizationSettings != null)
                    hashCode = hashCode * 59 + this.CustomizationSettings.GetHashCode();
                if (this.DeleteInProgress != null)
                    hashCode = hashCode * 59 + this.DeleteInProgress.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayAssignedMachineName != null)
                    hashCode = hashCode * 59 + this.DisplayAssignedMachineName.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.DisplayProtocolSettings != null)
                    hashCode = hashCode * 59 + this.DisplayProtocolSettings.GetHashCode();
                if (this.EnableClientRestrictions != null)
                    hashCode = hashCode * 59 + this.EnableClientRestrictions.GetHashCode();
                if (this.EnableProvisioning != null)
                    hashCode = hashCode * 59 + this.EnableProvisioning.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.FarmId != null)
                    hashCode = hashCode * 59 + this.FarmId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImageSource != null)
                    hashCode = hashCode * 59 + this.ImageSource.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Nics != null)
                    hashCode = hashCode * 59 + this.Nics.GetHashCode();
                if (this.PatternNamingSettings != null)
                    hashCode = hashCode * 59 + this.PatternNamingSettings.GetHashCode();
                if (this.ProvisioningSettings != null)
                    hashCode = hashCode * 59 + this.ProvisioningSettings.GetHashCode();
                if (this.ProvisioningStatusData != null)
                    hashCode = hashCode * 59 + this.ProvisioningStatusData.GetHashCode();
                if (this.SessionSettings != null)
                    hashCode = hashCode * 59 + this.SessionSettings.GetHashCode();
                if (this.SessionType != null)
                    hashCode = hashCode * 59 + this.SessionType.GetHashCode();
                if (this.ShortcutLocations != null)
                    hashCode = hashCode * 59 + this.ShortcutLocations.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.SpecificNamingSettings != null)
                    hashCode = hashCode * 59 + this.SpecificNamingSettings.GetHashCode();
                if (this.StopProvisioningOnError != null)
                    hashCode = hashCode * 59 + this.StopProvisioningOnError.GetHashCode();
                if (this.StorageSettings != null)
                    hashCode = hashCode * 59 + this.StorageSettings.GetHashCode();
                if (this.TransparentPageSharingScope != null)
                    hashCode = hashCode * 59 + this.TransparentPageSharingScope.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UserAssignment != null)
                    hashCode = hashCode * 59 + this.UserAssignment.GetHashCode();
                if (this.VcenterId != null)
                    hashCode = hashCode * 59 + this.VcenterId.GetHashCode();
                if (this.ViewStorageAcceleratorSettings != null)
                    hashCode = hashCode * 59 + this.ViewStorageAcceleratorSettings.GetHashCode();
                return hashCode;
            }
        }
    }

}
