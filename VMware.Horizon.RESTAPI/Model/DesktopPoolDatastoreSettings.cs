/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Settings for a Virtual Center datastore.
    /// </summary>
    [DataContract]
    public partial class DesktopPoolDatastoreSettings :  IEquatable<DesktopPoolDatastoreSettings>
    {
        /// <summary>
        /// Storage overcommit determines how Horizon places new machines on the selected datastores. With an aggressive overcommit level, Horizon reserves less space for sparse disk growth, but fits more machines on the datastore. * NONE: No overcommit. * CONSERVATIVE: Conservative. * MODERATE: Moderate. * AGGRESSIVE: Aggressive. * UNBOUNDED: Unbounded.
        /// </summary>
        /// <value>Storage overcommit determines how Horizon places new machines on the selected datastores. With an aggressive overcommit level, Horizon reserves less space for sparse disk growth, but fits more machines on the datastore. * NONE: No overcommit. * CONSERVATIVE: Conservative. * MODERATE: Moderate. * AGGRESSIVE: Aggressive. * UNBOUNDED: Unbounded.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StorageOvercommitEnum
        {
            
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,
            
            /// <summary>
            /// Enum CONSERVATIVE for value: CONSERVATIVE
            /// </summary>
            [EnumMember(Value = "CONSERVATIVE")]
            CONSERVATIVE = 2,
            
            /// <summary>
            /// Enum MODERATE for value: MODERATE
            /// </summary>
            [EnumMember(Value = "MODERATE")]
            MODERATE = 3,
            
            /// <summary>
            /// Enum AGGRESSIVE for value: AGGRESSIVE
            /// </summary>
            [EnumMember(Value = "AGGRESSIVE")]
            AGGRESSIVE = 4,
            
            /// <summary>
            /// Enum UNBOUNDED for value: UNBOUNDED
            /// </summary>
            [EnumMember(Value = "UNBOUNDED")]
            UNBOUNDED = 5
        }

        /// <summary>
        /// Storage overcommit determines how Horizon places new machines on the selected datastores. With an aggressive overcommit level, Horizon reserves less space for sparse disk growth, but fits more machines on the datastore. * NONE: No overcommit. * CONSERVATIVE: Conservative. * MODERATE: Moderate. * AGGRESSIVE: Aggressive. * UNBOUNDED: Unbounded.
        /// </summary>
        /// <value>Storage overcommit determines how Horizon places new machines on the selected datastores. With an aggressive overcommit level, Horizon reserves less space for sparse disk growth, but fits more machines on the datastore. * NONE: No overcommit. * CONSERVATIVE: Conservative. * MODERATE: Moderate. * AGGRESSIVE: Aggressive. * UNBOUNDED: Unbounded.</value>
        [DataMember(Name="storage_overcommit", EmitDefaultValue=false)]
        public StorageOvercommitEnum? StorageOvercommit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DesktopPoolDatastoreSettings" /> class.
        /// </summary>
        /// <param name="datastoreId">Id of the datastore..</param>
        /// <param name="sdrsCluster">Whether datastore represents a Storage DRS cluster..</param>
        /// <param name="storageOvercommit">Storage overcommit determines how Horizon places new machines on the selected datastores. With an aggressive overcommit level, Horizon reserves less space for sparse disk growth, but fits more machines on the datastore. * NONE: No overcommit. * CONSERVATIVE: Conservative. * MODERATE: Moderate. * AGGRESSIVE: Aggressive. * UNBOUNDED: Unbounded..</param>
        public DesktopPoolDatastoreSettings(string datastoreId = default(string), bool? sdrsCluster = default(bool?), StorageOvercommitEnum? storageOvercommit = default(StorageOvercommitEnum?))
        {
            this.DatastoreId = datastoreId;
            this.SdrsCluster = sdrsCluster;
            this.StorageOvercommit = storageOvercommit;
        }
        
        /// <summary>
        /// Id of the datastore.
        /// </summary>
        /// <value>Id of the datastore.</value>
        [DataMember(Name="datastore_id", EmitDefaultValue=false)]
        public string DatastoreId { get; set; }

        /// <summary>
        /// Whether datastore represents a Storage DRS cluster.
        /// </summary>
        /// <value>Whether datastore represents a Storage DRS cluster.</value>
        [DataMember(Name="sdrs_cluster", EmitDefaultValue=false)]
        public bool? SdrsCluster { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DesktopPoolDatastoreSettings {\n");
            sb.Append("  DatastoreId: ").Append(DatastoreId).Append("\n");
            sb.Append("  SdrsCluster: ").Append(SdrsCluster).Append("\n");
            sb.Append("  StorageOvercommit: ").Append(StorageOvercommit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DesktopPoolDatastoreSettings);
        }

        /// <summary>
        /// Returns true if DesktopPoolDatastoreSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of DesktopPoolDatastoreSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DesktopPoolDatastoreSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DatastoreId == input.DatastoreId ||
                    (this.DatastoreId != null &&
                    this.DatastoreId.Equals(input.DatastoreId))
                ) && 
                (
                    this.SdrsCluster == input.SdrsCluster ||
                    (this.SdrsCluster != null &&
                    this.SdrsCluster.Equals(input.SdrsCluster))
                ) && 
                (
                    this.StorageOvercommit == input.StorageOvercommit ||
                    (this.StorageOvercommit != null &&
                    this.StorageOvercommit.Equals(input.StorageOvercommit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DatastoreId != null)
                    hashCode = hashCode * 59 + this.DatastoreId.GetHashCode();
                if (this.SdrsCluster != null)
                    hashCode = hashCode * 59 + this.SdrsCluster.GetHashCode();
                if (this.StorageOvercommit != null)
                    hashCode = hashCode * 59 + this.StorageOvercommit.GetHashCode();
                return hashCode;
            }
        }
    }

}
