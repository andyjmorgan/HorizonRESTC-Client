/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Settings for the networking protocol to display the remote machine.
    /// </summary>
    [DataContract]
    public partial class DesktopPoolDisplayProtocolSettings :  IEquatable<DesktopPoolDisplayProtocolSettings>
    {
        /// <summary>
        /// The default display protocol for the desktop pool. For a managed desktop pool, this will default to PCOIP.For an unmanaged desktop pool, this will default to RDP. * RDP: Microsoft Remote Desktop Protocol. * PCOIP: PCoIP protocol. * BLAST: BLAST protocol.
        /// </summary>
        /// <value>The default display protocol for the desktop pool. For a managed desktop pool, this will default to PCOIP.For an unmanaged desktop pool, this will default to RDP. * RDP: Microsoft Remote Desktop Protocol. * PCOIP: PCoIP protocol. * BLAST: BLAST protocol.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultDisplayProtocolEnum
        {
            
            /// <summary>
            /// Enum RDP for value: RDP
            /// </summary>
            [EnumMember(Value = "RDP")]
            RDP = 1,
            
            /// <summary>
            /// Enum PCOIP for value: PCOIP
            /// </summary>
            [EnumMember(Value = "PCOIP")]
            PCOIP = 2,
            
            /// <summary>
            /// Enum BLAST for value: BLAST
            /// </summary>
            [EnumMember(Value = "BLAST")]
            BLAST = 3
        }

        /// <summary>
        /// The default display protocol for the desktop pool. For a managed desktop pool, this will default to PCOIP.For an unmanaged desktop pool, this will default to RDP. * RDP: Microsoft Remote Desktop Protocol. * PCOIP: PCoIP protocol. * BLAST: BLAST protocol.
        /// </summary>
        /// <value>The default display protocol for the desktop pool. For a managed desktop pool, this will default to PCOIP.For an unmanaged desktop pool, this will default to RDP. * RDP: Microsoft Remote Desktop Protocol. * PCOIP: PCoIP protocol. * BLAST: BLAST protocol.</value>
        [DataMember(Name="default_display_protocol", EmitDefaultValue=false)]
        public DefaultDisplayProtocolEnum DefaultDisplayProtocol { get; set; }
        /// <summary>
        /// Defines DisplayProtocols
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DisplayProtocolsEnum
        {
            
            /// <summary>
            /// Enum RDP for value: RDP
            /// </summary>
            [EnumMember(Value = "RDP")]
            RDP = 1,
            
            /// <summary>
            /// Enum PCOIP for value: PCOIP
            /// </summary>
            [EnumMember(Value = "PCOIP")]
            PCOIP = 2,
            
            /// <summary>
            /// Enum BLAST for value: BLAST
            /// </summary>
            [EnumMember(Value = "BLAST")]
            BLAST = 3
        }


        /// <summary>
        /// List of supported display protocols for this desktop pool.Default value is [PCOIP, RDP, BLAST].
        /// </summary>
        /// <value>List of supported display protocols for this desktop pool.Default value is [PCOIP, RDP, BLAST].</value>
        [DataMember(Name="display_protocols", EmitDefaultValue=false)]
        public List<DisplayProtocolsEnum> DisplayProtocols { get; set; }
        /// <summary>
        /// If 3D rendering is enabled and managed by View, this must be set to the default value. When 3D rendering is disabled,the &#39;Max number of monitors&#39; and &#39;Max resolution of any one monitor&#39; settings determine the amount of vRAM assignedto machines in this desktop. The greater these values are, the more memory will be consumed on the associated ESX hosts.This setting is only relevant on managed machines. Existing virtual machines must be powered off and subsequently poweredon for the change to take effect. A restart will not cause the changes to take effect. For Instant Clones,this value is inherited from snapshot of Master VM. This property has a default value of WUXGA. * WSXGA_PLUS: 1680x1050 resolution. * WUXGA: 1920x1200 resolution. * WQXGA: 2560x1600 resolution. * UHD: 3840x2160 resolution.
        /// </summary>
        /// <value>If 3D rendering is enabled and managed by View, this must be set to the default value. When 3D rendering is disabled,the &#39;Max number of monitors&#39; and &#39;Max resolution of any one monitor&#39; settings determine the amount of vRAM assignedto machines in this desktop. The greater these values are, the more memory will be consumed on the associated ESX hosts.This setting is only relevant on managed machines. Existing virtual machines must be powered off and subsequently poweredon for the change to take effect. A restart will not cause the changes to take effect. For Instant Clones,this value is inherited from snapshot of Master VM. This property has a default value of WUXGA. * WSXGA_PLUS: 1680x1050 resolution. * WUXGA: 1920x1200 resolution. * WQXGA: 2560x1600 resolution. * UHD: 3840x2160 resolution.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MaxResolutionOfAnyOneMonitorEnum
        {
            
            /// <summary>
            /// Enum WSXGAPLUS for value: WSXGA_PLUS
            /// </summary>
            [EnumMember(Value = "WSXGA_PLUS")]
            WSXGAPLUS = 1,
            
            /// <summary>
            /// Enum WUXGA for value: WUXGA
            /// </summary>
            [EnumMember(Value = "WUXGA")]
            WUXGA = 2,
            
            /// <summary>
            /// Enum WQXGA for value: WQXGA
            /// </summary>
            [EnumMember(Value = "WQXGA")]
            WQXGA = 3,
            
            /// <summary>
            /// Enum UHD for value: UHD
            /// </summary>
            [EnumMember(Value = "UHD")]
            UHD = 4
        }

        /// <summary>
        /// If 3D rendering is enabled and managed by View, this must be set to the default value. When 3D rendering is disabled,the &#39;Max number of monitors&#39; and &#39;Max resolution of any one monitor&#39; settings determine the amount of vRAM assignedto machines in this desktop. The greater these values are, the more memory will be consumed on the associated ESX hosts.This setting is only relevant on managed machines. Existing virtual machines must be powered off and subsequently poweredon for the change to take effect. A restart will not cause the changes to take effect. For Instant Clones,this value is inherited from snapshot of Master VM. This property has a default value of WUXGA. * WSXGA_PLUS: 1680x1050 resolution. * WUXGA: 1920x1200 resolution. * WQXGA: 2560x1600 resolution. * UHD: 3840x2160 resolution.
        /// </summary>
        /// <value>If 3D rendering is enabled and managed by View, this must be set to the default value. When 3D rendering is disabled,the &#39;Max number of monitors&#39; and &#39;Max resolution of any one monitor&#39; settings determine the amount of vRAM assignedto machines in this desktop. The greater these values are, the more memory will be consumed on the associated ESX hosts.This setting is only relevant on managed machines. Existing virtual machines must be powered off and subsequently poweredon for the change to take effect. A restart will not cause the changes to take effect. For Instant Clones,this value is inherited from snapshot of Master VM. This property has a default value of WUXGA. * WSXGA_PLUS: 1680x1050 resolution. * WUXGA: 1920x1200 resolution. * WQXGA: 2560x1600 resolution. * UHD: 3840x2160 resolution.</value>
        [DataMember(Name="max_resolution_of_any_one_monitor", EmitDefaultValue=false)]
        public MaxResolutionOfAnyOneMonitorEnum? MaxResolutionOfAnyOneMonitor { get; set; }
        /// <summary>
        /// 3D rendering is supported on Windows 7 or later guests running on VMs with virtual hardware version8 or later. The default protocol must be PCoIP and users must not be allowed to choose their ownprotocol to enable 3D rendering. For instant clone source desktop 3D rendering always mapped to MANAGE_BY_VSPHERE_CLIENT.Default value is DISABLED. * MANAGE_BY_VSPHERE_CLIENT: 3D rendering managed by vSphere Client. * AUTOMATIC: 3D rendering is automatic. * SOFTWARE: 3D rendering is software dependent. The software renderer is supported (at minimum) on virtual hardware version 8 in a vSphere 5.0 environment. * HARDWARE: 3D rendering is hardware dependent. The hardware-based renderer is supported (at minimum) on virtual hardware version 9 in a vSphere 5.1 environment. * DISABLED: 3D rendering is disabled.
        /// </summary>
        /// <value>3D rendering is supported on Windows 7 or later guests running on VMs with virtual hardware version8 or later. The default protocol must be PCoIP and users must not be allowed to choose their ownprotocol to enable 3D rendering. For instant clone source desktop 3D rendering always mapped to MANAGE_BY_VSPHERE_CLIENT.Default value is DISABLED. * MANAGE_BY_VSPHERE_CLIENT: 3D rendering managed by vSphere Client. * AUTOMATIC: 3D rendering is automatic. * SOFTWARE: 3D rendering is software dependent. The software renderer is supported (at minimum) on virtual hardware version 8 in a vSphere 5.0 environment. * HARDWARE: 3D rendering is hardware dependent. The hardware-based renderer is supported (at minimum) on virtual hardware version 9 in a vSphere 5.1 environment. * DISABLED: 3D rendering is disabled.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Renderer3dEnum
        {
            
            /// <summary>
            /// Enum MANAGEBYVSPHERECLIENT for value: MANAGE_BY_VSPHERE_CLIENT
            /// </summary>
            [EnumMember(Value = "MANAGE_BY_VSPHERE_CLIENT")]
            MANAGEBYVSPHERECLIENT = 1,
            
            /// <summary>
            /// Enum AUTOMATIC for value: AUTOMATIC
            /// </summary>
            [EnumMember(Value = "AUTOMATIC")]
            AUTOMATIC = 2,
            
            /// <summary>
            /// Enum SOFTWARE for value: SOFTWARE
            /// </summary>
            [EnumMember(Value = "SOFTWARE")]
            SOFTWARE = 3,
            
            /// <summary>
            /// Enum HARDWARE for value: HARDWARE
            /// </summary>
            [EnumMember(Value = "HARDWARE")]
            HARDWARE = 4,
            
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 5
        }

        /// <summary>
        /// 3D rendering is supported on Windows 7 or later guests running on VMs with virtual hardware version8 or later. The default protocol must be PCoIP and users must not be allowed to choose their ownprotocol to enable 3D rendering. For instant clone source desktop 3D rendering always mapped to MANAGE_BY_VSPHERE_CLIENT.Default value is DISABLED. * MANAGE_BY_VSPHERE_CLIENT: 3D rendering managed by vSphere Client. * AUTOMATIC: 3D rendering is automatic. * SOFTWARE: 3D rendering is software dependent. The software renderer is supported (at minimum) on virtual hardware version 8 in a vSphere 5.0 environment. * HARDWARE: 3D rendering is hardware dependent. The hardware-based renderer is supported (at minimum) on virtual hardware version 9 in a vSphere 5.1 environment. * DISABLED: 3D rendering is disabled.
        /// </summary>
        /// <value>3D rendering is supported on Windows 7 or later guests running on VMs with virtual hardware version8 or later. The default protocol must be PCoIP and users must not be allowed to choose their ownprotocol to enable 3D rendering. For instant clone source desktop 3D rendering always mapped to MANAGE_BY_VSPHERE_CLIENT.Default value is DISABLED. * MANAGE_BY_VSPHERE_CLIENT: 3D rendering managed by vSphere Client. * AUTOMATIC: 3D rendering is automatic. * SOFTWARE: 3D rendering is software dependent. The software renderer is supported (at minimum) on virtual hardware version 8 in a vSphere 5.0 environment. * HARDWARE: 3D rendering is hardware dependent. The hardware-based renderer is supported (at minimum) on virtual hardware version 9 in a vSphere 5.1 environment. * DISABLED: 3D rendering is disabled.</value>
        [DataMember(Name="renderer3d", EmitDefaultValue=false)]
        public Renderer3dEnum Renderer3d { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DesktopPoolDisplayProtocolSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DesktopPoolDisplayProtocolSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DesktopPoolDisplayProtocolSettings" /> class.
        /// </summary>
        /// <param name="allowUsersToChooseProtocol">Indicates whether the users can choose the protocol. Default value is true. (required).</param>
        /// <param name="defaultDisplayProtocol">The default display protocol for the desktop pool. For a managed desktop pool, this will default to PCOIP.For an unmanaged desktop pool, this will default to RDP. * RDP: Microsoft Remote Desktop Protocol. * PCOIP: PCoIP protocol. * BLAST: BLAST protocol. (required).</param>
        /// <param name="displayProtocols">List of supported display protocols for this desktop pool.Default value is [PCOIP, RDP, BLAST]. (required).</param>
        /// <param name="gridVgpusEnabled">When 3D rendering is managed by the vSphere Client, this enables support for NVIDIA GRID vGPUs.This will be false if 3D rendering is not managed by the vSphere Client. If this is true,the host or cluster associated with the desktop pool must support NVIDIA GRID and vGPU types required by the desktop pool&#39;s VirtualMachines,VmTemplate, or BaseImageSnapshot. If this is false, the desktop pool&#39;s VirtualMachines, VmTemplate, orBaseImageSnapshot must not support NVIDIA GRID vGPUs. Since suspending VMs with passthroughdevices such as vGPUs is not possible, power_policy cannot be set to SUSPEND if this is enabled.Default value is false..</param>
        /// <param name="htmlAccessEnabled">This property is no longer in use for Horizon Components. It is always set to true. HTML Access, enabled by VMware Blast technology, allows users to connect to machines from Web browsers. Horizon Client software does not have to be installed on the client devices. To enable HTML Access, you must install the HTML Machine Access feature pack. Also, Blast must be configured as a supported protocol in displayProtocols. (required).</param>
        /// <param name="maxNumberOfMonitors">When 3D is disabled, the &#39;Max number of monitors&#39; and &#39;Max resolution of any one monitor&#39; settings determine the amount ofvRAM assigned to machines in this desktop. The greater these values are, the more memory will be consumeon the associated ESX hosts. Existing virtual machines must be powered off and subsequently powered onfor the change to take effect. A restart will not cause the changes to take effect. If 3D is enabled and managedby View, the maximum number of monitors must be 1 or 2. For Instant Clones, this value is inherited from snapshot of Master VM..</param>
        /// <param name="maxResolutionOfAnyOneMonitor">If 3D rendering is enabled and managed by View, this must be set to the default value. When 3D rendering is disabled,the &#39;Max number of monitors&#39; and &#39;Max resolution of any one monitor&#39; settings determine the amount of vRAM assignedto machines in this desktop. The greater these values are, the more memory will be consumed on the associated ESX hosts.This setting is only relevant on managed machines. Existing virtual machines must be powered off and subsequently poweredon for the change to take effect. A restart will not cause the changes to take effect. For Instant Clones,this value is inherited from snapshot of Master VM. This property has a default value of WUXGA. * WSXGA_PLUS: 1680x1050 resolution. * WUXGA: 1920x1200 resolution. * WQXGA: 2560x1600 resolution. * UHD: 3840x2160 resolution..</param>
        /// <param name="renderer3d">3D rendering is supported on Windows 7 or later guests running on VMs with virtual hardware version8 or later. The default protocol must be PCoIP and users must not be allowed to choose their ownprotocol to enable 3D rendering. For instant clone source desktop 3D rendering always mapped to MANAGE_BY_VSPHERE_CLIENT.Default value is DISABLED. * MANAGE_BY_VSPHERE_CLIENT: 3D rendering managed by vSphere Client. * AUTOMATIC: 3D rendering is automatic. * SOFTWARE: 3D rendering is software dependent. The software renderer is supported (at minimum) on virtual hardware version 8 in a vSphere 5.0 environment. * HARDWARE: 3D rendering is hardware dependent. The hardware-based renderer is supported (at minimum) on virtual hardware version 9 in a vSphere 5.1 environment. * DISABLED: 3D rendering is disabled. (required).</param>
        /// <param name="sessionCollaborationEnabled">Enable session collaboration feature. Session collaborationallows a user to share their remote session with other users.BLAST must be configured as a supported protocol in supported_display_protocols.Default value is false. (required).</param>
        /// <param name="vgpuGridProfile">NVIDIA GRID vGPUs might have multiple profiles and any one of the available profiles can beapplied to newly created instant clone desktop. The profile specified in this field will beused in the newly created instant clone desktop. Will be set if enable_grid_vgpus set to true..</param>
        /// <param name="vramSizeMb">vRAM size for View managed 3D rendering. More VRAM can improve 3D performance.Size is in MB. On ESXi 5.0 hosts, the renderer allows a maximum VRAM size of 128MB. On ESXi 5.1and later hosts, the maximum VRAM size is 512MB. For Instant Clones, this value is inherited from snapshot of Master VM.This property is applicable when 3D renderer is not disabled. This has a default value of 96. (required).</param>
        public DesktopPoolDisplayProtocolSettings(bool? allowUsersToChooseProtocol = default(bool?), DefaultDisplayProtocolEnum defaultDisplayProtocol = default(DefaultDisplayProtocolEnum), List<DisplayProtocolsEnum> displayProtocols = default(List<DisplayProtocolsEnum>), bool? gridVgpusEnabled = default(bool?), bool? htmlAccessEnabled = default(bool?), int? maxNumberOfMonitors = default(int?), MaxResolutionOfAnyOneMonitorEnum? maxResolutionOfAnyOneMonitor = default(MaxResolutionOfAnyOneMonitorEnum?), Renderer3dEnum renderer3d = default(Renderer3dEnum), bool? sessionCollaborationEnabled = default(bool?), string vgpuGridProfile = default(string), int? vramSizeMb = default(int?))
        {
            // to ensure "allowUsersToChooseProtocol" is required (not null)
            if (allowUsersToChooseProtocol == null)
            {
                throw new InvalidDataException("allowUsersToChooseProtocol is a required property for DesktopPoolDisplayProtocolSettings and cannot be null");
            }
            else
            {
                this.AllowUsersToChooseProtocol = allowUsersToChooseProtocol;
            }
            // to ensure "defaultDisplayProtocol" is required (not null)
            if (defaultDisplayProtocol == null)
            {
                throw new InvalidDataException("defaultDisplayProtocol is a required property for DesktopPoolDisplayProtocolSettings and cannot be null");
            }
            else
            {
                this.DefaultDisplayProtocol = defaultDisplayProtocol;
            }
            // to ensure "displayProtocols" is required (not null)
            if (displayProtocols == null)
            {
                throw new InvalidDataException("displayProtocols is a required property for DesktopPoolDisplayProtocolSettings and cannot be null");
            }
            else
            {
                this.DisplayProtocols = displayProtocols;
            }
            // to ensure "htmlAccessEnabled" is required (not null)
            if (htmlAccessEnabled == null)
            {
                throw new InvalidDataException("htmlAccessEnabled is a required property for DesktopPoolDisplayProtocolSettings and cannot be null");
            }
            else
            {
                this.HtmlAccessEnabled = htmlAccessEnabled;
            }
            // to ensure "renderer3d" is required (not null)
            if (renderer3d == null)
            {
                throw new InvalidDataException("renderer3d is a required property for DesktopPoolDisplayProtocolSettings and cannot be null");
            }
            else
            {
                this.Renderer3d = renderer3d;
            }
            // to ensure "sessionCollaborationEnabled" is required (not null)
            if (sessionCollaborationEnabled == null)
            {
                throw new InvalidDataException("sessionCollaborationEnabled is a required property for DesktopPoolDisplayProtocolSettings and cannot be null");
            }
            else
            {
                this.SessionCollaborationEnabled = sessionCollaborationEnabled;
            }
            // to ensure "vramSizeMb" is required (not null)
            if (vramSizeMb == null)
            {
                throw new InvalidDataException("vramSizeMb is a required property for DesktopPoolDisplayProtocolSettings and cannot be null");
            }
            else
            {
                this.VramSizeMb = vramSizeMb;
            }
            this.GridVgpusEnabled = gridVgpusEnabled;
            this.MaxNumberOfMonitors = maxNumberOfMonitors;
            this.MaxResolutionOfAnyOneMonitor = maxResolutionOfAnyOneMonitor;
            this.VgpuGridProfile = vgpuGridProfile;
        }
        
        /// <summary>
        /// Indicates whether the users can choose the protocol. Default value is true.
        /// </summary>
        /// <value>Indicates whether the users can choose the protocol. Default value is true.</value>
        [DataMember(Name="allow_users_to_choose_protocol", EmitDefaultValue=false)]
        public bool? AllowUsersToChooseProtocol { get; set; }



        /// <summary>
        /// When 3D rendering is managed by the vSphere Client, this enables support for NVIDIA GRID vGPUs.This will be false if 3D rendering is not managed by the vSphere Client. If this is true,the host or cluster associated with the desktop pool must support NVIDIA GRID and vGPU types required by the desktop pool&#39;s VirtualMachines,VmTemplate, or BaseImageSnapshot. If this is false, the desktop pool&#39;s VirtualMachines, VmTemplate, orBaseImageSnapshot must not support NVIDIA GRID vGPUs. Since suspending VMs with passthroughdevices such as vGPUs is not possible, power_policy cannot be set to SUSPEND if this is enabled.Default value is false.
        /// </summary>
        /// <value>When 3D rendering is managed by the vSphere Client, this enables support for NVIDIA GRID vGPUs.This will be false if 3D rendering is not managed by the vSphere Client. If this is true,the host or cluster associated with the desktop pool must support NVIDIA GRID and vGPU types required by the desktop pool&#39;s VirtualMachines,VmTemplate, or BaseImageSnapshot. If this is false, the desktop pool&#39;s VirtualMachines, VmTemplate, orBaseImageSnapshot must not support NVIDIA GRID vGPUs. Since suspending VMs with passthroughdevices such as vGPUs is not possible, power_policy cannot be set to SUSPEND if this is enabled.Default value is false.</value>
        [DataMember(Name="grid_vgpus_enabled", EmitDefaultValue=false)]
        public bool? GridVgpusEnabled { get; set; }

        /// <summary>
        /// This property is no longer in use for Horizon Components. It is always set to true. HTML Access, enabled by VMware Blast technology, allows users to connect to machines from Web browsers. Horizon Client software does not have to be installed on the client devices. To enable HTML Access, you must install the HTML Machine Access feature pack. Also, Blast must be configured as a supported protocol in displayProtocols.
        /// </summary>
        /// <value>This property is no longer in use for Horizon Components. It is always set to true. HTML Access, enabled by VMware Blast technology, allows users to connect to machines from Web browsers. Horizon Client software does not have to be installed on the client devices. To enable HTML Access, you must install the HTML Machine Access feature pack. Also, Blast must be configured as a supported protocol in displayProtocols.</value>
        [DataMember(Name="html_access_enabled", EmitDefaultValue=false)]
        public bool? HtmlAccessEnabled { get; set; }

        /// <summary>
        /// When 3D is disabled, the &#39;Max number of monitors&#39; and &#39;Max resolution of any one monitor&#39; settings determine the amount ofvRAM assigned to machines in this desktop. The greater these values are, the more memory will be consumeon the associated ESX hosts. Existing virtual machines must be powered off and subsequently powered onfor the change to take effect. A restart will not cause the changes to take effect. If 3D is enabled and managedby View, the maximum number of monitors must be 1 or 2. For Instant Clones, this value is inherited from snapshot of Master VM.
        /// </summary>
        /// <value>When 3D is disabled, the &#39;Max number of monitors&#39; and &#39;Max resolution of any one monitor&#39; settings determine the amount ofvRAM assigned to machines in this desktop. The greater these values are, the more memory will be consumeon the associated ESX hosts. Existing virtual machines must be powered off and subsequently powered onfor the change to take effect. A restart will not cause the changes to take effect. If 3D is enabled and managedby View, the maximum number of monitors must be 1 or 2. For Instant Clones, this value is inherited from snapshot of Master VM.</value>
        [DataMember(Name="max_number_of_monitors", EmitDefaultValue=false)]
        public int? MaxNumberOfMonitors { get; set; }



        /// <summary>
        /// Enable session collaboration feature. Session collaborationallows a user to share their remote session with other users.BLAST must be configured as a supported protocol in supported_display_protocols.Default value is false.
        /// </summary>
        /// <value>Enable session collaboration feature. Session collaborationallows a user to share their remote session with other users.BLAST must be configured as a supported protocol in supported_display_protocols.Default value is false.</value>
        [DataMember(Name="session_collaboration_enabled", EmitDefaultValue=false)]
        public bool? SessionCollaborationEnabled { get; set; }

        /// <summary>
        /// NVIDIA GRID vGPUs might have multiple profiles and any one of the available profiles can beapplied to newly created instant clone desktop. The profile specified in this field will beused in the newly created instant clone desktop. Will be set if enable_grid_vgpus set to true.
        /// </summary>
        /// <value>NVIDIA GRID vGPUs might have multiple profiles and any one of the available profiles can beapplied to newly created instant clone desktop. The profile specified in this field will beused in the newly created instant clone desktop. Will be set if enable_grid_vgpus set to true.</value>
        [DataMember(Name="vgpu_grid_profile", EmitDefaultValue=false)]
        public string VgpuGridProfile { get; set; }

        /// <summary>
        /// vRAM size for View managed 3D rendering. More VRAM can improve 3D performance.Size is in MB. On ESXi 5.0 hosts, the renderer allows a maximum VRAM size of 128MB. On ESXi 5.1and later hosts, the maximum VRAM size is 512MB. For Instant Clones, this value is inherited from snapshot of Master VM.This property is applicable when 3D renderer is not disabled. This has a default value of 96.
        /// </summary>
        /// <value>vRAM size for View managed 3D rendering. More VRAM can improve 3D performance.Size is in MB. On ESXi 5.0 hosts, the renderer allows a maximum VRAM size of 128MB. On ESXi 5.1and later hosts, the maximum VRAM size is 512MB. For Instant Clones, this value is inherited from snapshot of Master VM.This property is applicable when 3D renderer is not disabled. This has a default value of 96.</value>
        [DataMember(Name="vram_size_mb", EmitDefaultValue=false)]
        public int? VramSizeMb { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DesktopPoolDisplayProtocolSettings {\n");
            sb.Append("  AllowUsersToChooseProtocol: ").Append(AllowUsersToChooseProtocol).Append("\n");
            sb.Append("  DefaultDisplayProtocol: ").Append(DefaultDisplayProtocol).Append("\n");
            sb.Append("  DisplayProtocols: ").Append(DisplayProtocols).Append("\n");
            sb.Append("  GridVgpusEnabled: ").Append(GridVgpusEnabled).Append("\n");
            sb.Append("  HtmlAccessEnabled: ").Append(HtmlAccessEnabled).Append("\n");
            sb.Append("  MaxNumberOfMonitors: ").Append(MaxNumberOfMonitors).Append("\n");
            sb.Append("  MaxResolutionOfAnyOneMonitor: ").Append(MaxResolutionOfAnyOneMonitor).Append("\n");
            sb.Append("  Renderer3d: ").Append(Renderer3d).Append("\n");
            sb.Append("  SessionCollaborationEnabled: ").Append(SessionCollaborationEnabled).Append("\n");
            sb.Append("  VgpuGridProfile: ").Append(VgpuGridProfile).Append("\n");
            sb.Append("  VramSizeMb: ").Append(VramSizeMb).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DesktopPoolDisplayProtocolSettings);
        }

        /// <summary>
        /// Returns true if DesktopPoolDisplayProtocolSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of DesktopPoolDisplayProtocolSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DesktopPoolDisplayProtocolSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowUsersToChooseProtocol == input.AllowUsersToChooseProtocol ||
                    (this.AllowUsersToChooseProtocol != null &&
                    this.AllowUsersToChooseProtocol.Equals(input.AllowUsersToChooseProtocol))
                ) && 
                (
                    this.DefaultDisplayProtocol == input.DefaultDisplayProtocol ||
                    (this.DefaultDisplayProtocol != null &&
                    this.DefaultDisplayProtocol.Equals(input.DefaultDisplayProtocol))
                ) && 
                (
                    this.DisplayProtocols == input.DisplayProtocols ||
                    this.DisplayProtocols != null &&
                    this.DisplayProtocols.SequenceEqual(input.DisplayProtocols)
                ) && 
                (
                    this.GridVgpusEnabled == input.GridVgpusEnabled ||
                    (this.GridVgpusEnabled != null &&
                    this.GridVgpusEnabled.Equals(input.GridVgpusEnabled))
                ) && 
                (
                    this.HtmlAccessEnabled == input.HtmlAccessEnabled ||
                    (this.HtmlAccessEnabled != null &&
                    this.HtmlAccessEnabled.Equals(input.HtmlAccessEnabled))
                ) && 
                (
                    this.MaxNumberOfMonitors == input.MaxNumberOfMonitors ||
                    (this.MaxNumberOfMonitors != null &&
                    this.MaxNumberOfMonitors.Equals(input.MaxNumberOfMonitors))
                ) && 
                (
                    this.MaxResolutionOfAnyOneMonitor == input.MaxResolutionOfAnyOneMonitor ||
                    (this.MaxResolutionOfAnyOneMonitor != null &&
                    this.MaxResolutionOfAnyOneMonitor.Equals(input.MaxResolutionOfAnyOneMonitor))
                ) && 
                (
                    this.Renderer3d == input.Renderer3d ||
                    (this.Renderer3d != null &&
                    this.Renderer3d.Equals(input.Renderer3d))
                ) && 
                (
                    this.SessionCollaborationEnabled == input.SessionCollaborationEnabled ||
                    (this.SessionCollaborationEnabled != null &&
                    this.SessionCollaborationEnabled.Equals(input.SessionCollaborationEnabled))
                ) && 
                (
                    this.VgpuGridProfile == input.VgpuGridProfile ||
                    (this.VgpuGridProfile != null &&
                    this.VgpuGridProfile.Equals(input.VgpuGridProfile))
                ) && 
                (
                    this.VramSizeMb == input.VramSizeMb ||
                    (this.VramSizeMb != null &&
                    this.VramSizeMb.Equals(input.VramSizeMb))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowUsersToChooseProtocol != null)
                    hashCode = hashCode * 59 + this.AllowUsersToChooseProtocol.GetHashCode();
                if (this.DefaultDisplayProtocol != null)
                    hashCode = hashCode * 59 + this.DefaultDisplayProtocol.GetHashCode();
                if (this.DisplayProtocols != null)
                    hashCode = hashCode * 59 + this.DisplayProtocols.GetHashCode();
                if (this.GridVgpusEnabled != null)
                    hashCode = hashCode * 59 + this.GridVgpusEnabled.GetHashCode();
                if (this.HtmlAccessEnabled != null)
                    hashCode = hashCode * 59 + this.HtmlAccessEnabled.GetHashCode();
                if (this.MaxNumberOfMonitors != null)
                    hashCode = hashCode * 59 + this.MaxNumberOfMonitors.GetHashCode();
                if (this.MaxResolutionOfAnyOneMonitor != null)
                    hashCode = hashCode * 59 + this.MaxResolutionOfAnyOneMonitor.GetHashCode();
                if (this.Renderer3d != null)
                    hashCode = hashCode * 59 + this.Renderer3d.GetHashCode();
                if (this.SessionCollaborationEnabled != null)
                    hashCode = hashCode * 59 + this.SessionCollaborationEnabled.GetHashCode();
                if (this.VgpuGridProfile != null)
                    hashCode = hashCode * 59 + this.VgpuGridProfile.GetHashCode();
                if (this.VramSizeMb != null)
                    hashCode = hashCode * 59 + this.VramSizeMb.GetHashCode();
                return hashCode;
            }
        }
    }

}
