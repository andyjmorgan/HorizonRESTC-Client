/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to a virtual disk.
    /// </summary>
    [DataContract]
    public partial class VirtualDiskData :  IEquatable<VirtualDiskData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VirtualDiskData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VirtualDiskData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VirtualDiskData" /> class.
        /// </summary>
        /// <param name="capacityMb">The disk capacity in MB. (required).</param>
        /// <param name="datastorePath">The virtual disk&#39;s datastore. (required).</param>
        /// <param name="path">The virtual disk path. (required).</param>
        public VirtualDiskData(long? capacityMb = default(long?), string datastorePath = default(string), string path = default(string))
        {
            // to ensure "capacityMb" is required (not null)
            if (capacityMb == null)
            {
                throw new InvalidDataException("capacityMb is a required property for VirtualDiskData and cannot be null");
            }
            else
            {
                this.CapacityMb = capacityMb;
            }
            // to ensure "datastorePath" is required (not null)
            if (datastorePath == null)
            {
                throw new InvalidDataException("datastorePath is a required property for VirtualDiskData and cannot be null");
            }
            else
            {
                this.DatastorePath = datastorePath;
            }
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new InvalidDataException("path is a required property for VirtualDiskData and cannot be null");
            }
            else
            {
                this.Path = path;
            }
        }
        
        /// <summary>
        /// The disk capacity in MB.
        /// </summary>
        /// <value>The disk capacity in MB.</value>
        [DataMember(Name="capacity_mb", EmitDefaultValue=false)]
        public long? CapacityMb { get; set; }

        /// <summary>
        /// The virtual disk&#39;s datastore.
        /// </summary>
        /// <value>The virtual disk&#39;s datastore.</value>
        [DataMember(Name="datastore_path", EmitDefaultValue=false)]
        public string DatastorePath { get; set; }

        /// <summary>
        /// The virtual disk path.
        /// </summary>
        /// <value>The virtual disk path.</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VirtualDiskData {\n");
            sb.Append("  CapacityMb: ").Append(CapacityMb).Append("\n");
            sb.Append("  DatastorePath: ").Append(DatastorePath).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VirtualDiskData);
        }

        /// <summary>
        /// Returns true if VirtualDiskData instances are equal
        /// </summary>
        /// <param name="input">Instance of VirtualDiskData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VirtualDiskData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CapacityMb == input.CapacityMb ||
                    (this.CapacityMb != null &&
                    this.CapacityMb.Equals(input.CapacityMb))
                ) && 
                (
                    this.DatastorePath == input.DatastorePath ||
                    (this.DatastorePath != null &&
                    this.DatastorePath.Equals(input.DatastorePath))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CapacityMb != null)
                    hashCode = hashCode * 59 + this.CapacityMb.GetHashCode();
                if (this.DatastorePath != null)
                    hashCode = hashCode * 59 + this.DatastorePath.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                return hashCode;
            }
        }
    }

}
