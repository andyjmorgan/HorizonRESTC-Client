/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information about the SSL Certificate thumbprints
    /// </summary>
    [DataContract]
    public partial class CertificateThumbprint :  IEquatable<CertificateThumbprint>
    {
        /// <summary>
        /// Algorithm used to compute the thumbprint. * SHA_1: SHA-1 hashing algorithm. * SHA_256: SHA-256 hashing algorithm.
        /// </summary>
        /// <value>Algorithm used to compute the thumbprint. * SHA_1: SHA-1 hashing algorithm. * SHA_256: SHA-256 hashing algorithm.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SslCertThumbprintAlgorithmEnum
        {
            
            /// <summary>
            /// Enum _1 for value: SHA_1
            /// </summary>
            [EnumMember(Value = "SHA_1")]
            _1 = 1,
            
            /// <summary>
            /// Enum _256 for value: SHA_256
            /// </summary>
            [EnumMember(Value = "SHA_256")]
            _256 = 2
        }

        /// <summary>
        /// Algorithm used to compute the thumbprint. * SHA_1: SHA-1 hashing algorithm. * SHA_256: SHA-256 hashing algorithm.
        /// </summary>
        /// <value>Algorithm used to compute the thumbprint. * SHA_1: SHA-1 hashing algorithm. * SHA_256: SHA-256 hashing algorithm.</value>
        [DataMember(Name="ssl_cert_thumbprint_algorithm", EmitDefaultValue=false)]
        public SslCertThumbprintAlgorithmEnum SslCertThumbprintAlgorithm { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateThumbprint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CertificateThumbprint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateThumbprint" /> class.
        /// </summary>
        /// <param name="sslCertThumbprint">A digest of the certificate. (required).</param>
        /// <param name="sslCertThumbprintAlgorithm">Algorithm used to compute the thumbprint. * SHA_1: SHA-1 hashing algorithm. * SHA_256: SHA-256 hashing algorithm. (required).</param>
        public CertificateThumbprint(string sslCertThumbprint = default(string), SslCertThumbprintAlgorithmEnum sslCertThumbprintAlgorithm = default(SslCertThumbprintAlgorithmEnum))
        {
            // to ensure "sslCertThumbprint" is required (not null)
            if (sslCertThumbprint == null)
            {
                throw new InvalidDataException("sslCertThumbprint is a required property for CertificateThumbprint and cannot be null");
            }
            else
            {
                this.SslCertThumbprint = sslCertThumbprint;
            }
            // to ensure "sslCertThumbprintAlgorithm" is required (not null)
            if (sslCertThumbprintAlgorithm == null)
            {
                throw new InvalidDataException("sslCertThumbprintAlgorithm is a required property for CertificateThumbprint and cannot be null");
            }
            else
            {
                this.SslCertThumbprintAlgorithm = sslCertThumbprintAlgorithm;
            }
        }
        
        /// <summary>
        /// A digest of the certificate.
        /// </summary>
        /// <value>A digest of the certificate.</value>
        [DataMember(Name="ssl_cert_thumbprint", EmitDefaultValue=false)]
        public string SslCertThumbprint { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificateThumbprint {\n");
            sb.Append("  SslCertThumbprint: ").Append(SslCertThumbprint).Append("\n");
            sb.Append("  SslCertThumbprintAlgorithm: ").Append(SslCertThumbprintAlgorithm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificateThumbprint);
        }

        /// <summary>
        /// Returns true if CertificateThumbprint instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificateThumbprint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateThumbprint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SslCertThumbprint == input.SslCertThumbprint ||
                    (this.SslCertThumbprint != null &&
                    this.SslCertThumbprint.Equals(input.SslCertThumbprint))
                ) && 
                (
                    this.SslCertThumbprintAlgorithm == input.SslCertThumbprintAlgorithm ||
                    (this.SslCertThumbprintAlgorithm != null &&
                    this.SslCertThumbprintAlgorithm.Equals(input.SslCertThumbprintAlgorithm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SslCertThumbprint != null)
                    hashCode = hashCode * 59 + this.SslCertThumbprint.GetHashCode();
                if (this.SslCertThumbprintAlgorithm != null)
                    hashCode = hashCode * 59 + this.SslCertThumbprintAlgorithm.GetHashCode();
                return hashCode;
            }
        }
    }

}
