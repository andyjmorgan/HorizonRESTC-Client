/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Response for each of the operation in a bulk operation.
    /// </summary>
    [DataContract]
    public partial class BulkItemResponseInfo :  IEquatable<BulkItemResponseInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkItemResponseInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BulkItemResponseInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkItemResponseInfo" /> class.
        /// </summary>
        /// <param name="errorMessages">Reasons for the failure of the operation..</param>
        /// <param name="id">Unique ID representing the entity on which the operation was performed. Will not be populated for create operation if the operation fails..</param>
        /// <param name="statusCode">Response HTTP status code of the operation. (required).</param>
        /// <param name="timestamp">Timestamp in milliseconds when the operation failed. Measured as epoch time. (required).</param>
        public BulkItemResponseInfo(List<string> errorMessages = default(List<string>), string id = default(string), int? statusCode = default(int?), long? timestamp = default(long?))
        {
            // to ensure "statusCode" is required (not null)
            if (statusCode == null)
            {
                throw new InvalidDataException("statusCode is a required property for BulkItemResponseInfo and cannot be null");
            }
            else
            {
                this.StatusCode = statusCode;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for BulkItemResponseInfo and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            this.ErrorMessages = errorMessages;
            this.Id = id;
        }
        
        /// <summary>
        /// Reasons for the failure of the operation.
        /// </summary>
        /// <value>Reasons for the failure of the operation.</value>
        [DataMember(Name="error_messages", EmitDefaultValue=false)]
        public List<string> ErrorMessages { get; set; }

        /// <summary>
        /// Unique ID representing the entity on which the operation was performed. Will not be populated for create operation if the operation fails.
        /// </summary>
        /// <value>Unique ID representing the entity on which the operation was performed. Will not be populated for create operation if the operation fails.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Response HTTP status code of the operation.
        /// </summary>
        /// <value>Response HTTP status code of the operation.</value>
        [DataMember(Name="status_code", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// Timestamp in milliseconds when the operation failed. Measured as epoch time.
        /// </summary>
        /// <value>Timestamp in milliseconds when the operation failed. Measured as epoch time.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BulkItemResponseInfo {\n");
            sb.Append("  ErrorMessages: ").Append(ErrorMessages).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BulkItemResponseInfo);
        }

        /// <summary>
        /// Returns true if BulkItemResponseInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of BulkItemResponseInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BulkItemResponseInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ErrorMessages == input.ErrorMessages ||
                    this.ErrorMessages != null &&
                    this.ErrorMessages.SequenceEqual(input.ErrorMessages)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ErrorMessages != null)
                    hashCode = hashCode * 59 + this.ErrorMessages.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }
    }

}
