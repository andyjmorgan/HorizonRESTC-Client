/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to image management version.
    /// </summary>
    [DataContract]
    public partial class ImageManagementVersionInfo :  IEquatable<ImageManagementVersionInfo>
    {
        /// <summary>
        /// Image management version status. * AVAILABLE: Image management version is available for desktop pools/farms to be created. * DEPLOYING_VM: Image management version is deploying VM on the selected pod. * DEPLOYMENT_DONE: Image management version status when VM deployment is done for the selected pod. * DELETED: Image management version has been deleted. * DISABLED: Image management version has been disabled and no further pool operation can be done using the same. * FAILED: Image management version creation has failed. * PARTIALLY_AVAILABLE: Some of the image management asset creation in some of the virtual centers have failed. * PUBLISHING: Image management version is being published and specialized internally like installing agents etc. * REPLICATING: Copying the specialized images across all virtual centers.
        /// </summary>
        /// <value>Image management version status. * AVAILABLE: Image management version is available for desktop pools/farms to be created. * DEPLOYING_VM: Image management version is deploying VM on the selected pod. * DEPLOYMENT_DONE: Image management version status when VM deployment is done for the selected pod. * DELETED: Image management version has been deleted. * DISABLED: Image management version has been disabled and no further pool operation can be done using the same. * FAILED: Image management version creation has failed. * PARTIALLY_AVAILABLE: Some of the image management asset creation in some of the virtual centers have failed. * PUBLISHING: Image management version is being published and specialized internally like installing agents etc. * REPLICATING: Copying the specialized images across all virtual centers.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum AVAILABLE for value: AVAILABLE
            /// </summary>
            [EnumMember(Value = "AVAILABLE")]
            AVAILABLE = 1,
            
            /// <summary>
            /// Enum DEPLOYINGVM for value: DEPLOYING_VM
            /// </summary>
            [EnumMember(Value = "DEPLOYING_VM")]
            DEPLOYINGVM = 2,
            
            /// <summary>
            /// Enum DEPLOYMENTDONE for value: DEPLOYMENT_DONE
            /// </summary>
            [EnumMember(Value = "DEPLOYMENT_DONE")]
            DEPLOYMENTDONE = 3,
            
            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 4,
            
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 5,
            
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 6,
            
            /// <summary>
            /// Enum PARTIALLYAVAILABLE for value: PARTIALLY_AVAILABLE
            /// </summary>
            [EnumMember(Value = "PARTIALLY_AVAILABLE")]
            PARTIALLYAVAILABLE = 7,
            
            /// <summary>
            /// Enum PUBLISHING for value: PUBLISHING
            /// </summary>
            [EnumMember(Value = "PUBLISHING")]
            PUBLISHING = 8,
            
            /// <summary>
            /// Enum REPLICATING for value: REPLICATING
            /// </summary>
            [EnumMember(Value = "REPLICATING")]
            REPLICATING = 9
        }

        /// <summary>
        /// Image management version status. * AVAILABLE: Image management version is available for desktop pools/farms to be created. * DEPLOYING_VM: Image management version is deploying VM on the selected pod. * DEPLOYMENT_DONE: Image management version status when VM deployment is done for the selected pod. * DELETED: Image management version has been deleted. * DISABLED: Image management version has been disabled and no further pool operation can be done using the same. * FAILED: Image management version creation has failed. * PARTIALLY_AVAILABLE: Some of the image management asset creation in some of the virtual centers have failed. * PUBLISHING: Image management version is being published and specialized internally like installing agents etc. * REPLICATING: Copying the specialized images across all virtual centers.
        /// </summary>
        /// <value>Image management version status. * AVAILABLE: Image management version is available for desktop pools/farms to be created. * DEPLOYING_VM: Image management version is deploying VM on the selected pod. * DEPLOYMENT_DONE: Image management version status when VM deployment is done for the selected pod. * DELETED: Image management version has been deleted. * DISABLED: Image management version has been disabled and no further pool operation can be done using the same. * FAILED: Image management version creation has failed. * PARTIALLY_AVAILABLE: Some of the image management asset creation in some of the virtual centers have failed. * PUBLISHING: Image management version is being published and specialized internally like installing agents etc. * REPLICATING: Copying the specialized images across all virtual centers.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageManagementVersionInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImageManagementVersionInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageManagementVersionInfo" /> class.
        /// </summary>
        /// <param name="additionalDetails">Additional details about image management version..</param>
        /// <param name="description">Image management version description..</param>
        /// <param name="id">Unique ID representing image management version. (required).</param>
        /// <param name="imStreamId">Image management stream ID.</param>
        /// <param name="name">Image management version name. (required).</param>
        /// <param name="status">Image management version status. * AVAILABLE: Image management version is available for desktop pools/farms to be created. * DEPLOYING_VM: Image management version is deploying VM on the selected pod. * DEPLOYMENT_DONE: Image management version status when VM deployment is done for the selected pod. * DELETED: Image management version has been deleted. * DISABLED: Image management version has been disabled and no further pool operation can be done using the same. * FAILED: Image management version creation has failed. * PARTIALLY_AVAILABLE: Some of the image management asset creation in some of the virtual centers have failed. * PUBLISHING: Image management version is being published and specialized internally like installing agents etc. * REPLICATING: Copying the specialized images across all virtual centers. (required).</param>
        public ImageManagementVersionInfo(Dictionary<string, string> additionalDetails = default(Dictionary<string, string>), string description = default(string), string id = default(string), string imStreamId = default(string), string name = default(string), StatusEnum status = default(StatusEnum))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ImageManagementVersionInfo and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ImageManagementVersionInfo and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for ImageManagementVersionInfo and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.AdditionalDetails = additionalDetails;
            this.Description = description;
            this.ImStreamId = imStreamId;
        }
        
        /// <summary>
        /// Additional details about image management version.
        /// </summary>
        /// <value>Additional details about image management version.</value>
        [DataMember(Name="additional_details", EmitDefaultValue=false)]
        public Dictionary<string, string> AdditionalDetails { get; set; }

        /// <summary>
        /// Image management version description.
        /// </summary>
        /// <value>Image management version description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Unique ID representing image management version.
        /// </summary>
        /// <value>Unique ID representing image management version.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Image management stream ID
        /// </summary>
        /// <value>Image management stream ID</value>
        [DataMember(Name="im_stream_id", EmitDefaultValue=false)]
        public string ImStreamId { get; set; }

        /// <summary>
        /// Image management version name.
        /// </summary>
        /// <value>Image management version name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImageManagementVersionInfo {\n");
            sb.Append("  AdditionalDetails: ").Append(AdditionalDetails).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImStreamId: ").Append(ImStreamId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImageManagementVersionInfo);
        }

        /// <summary>
        /// Returns true if ImageManagementVersionInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ImageManagementVersionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImageManagementVersionInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalDetails == input.AdditionalDetails ||
                    this.AdditionalDetails != null &&
                    this.AdditionalDetails.SequenceEqual(input.AdditionalDetails)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImStreamId == input.ImStreamId ||
                    (this.ImStreamId != null &&
                    this.ImStreamId.Equals(input.ImStreamId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalDetails != null)
                    hashCode = hashCode * 59 + this.AdditionalDetails.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImStreamId != null)
                    hashCode = hashCode * 59 + this.ImStreamId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }
    }

}
