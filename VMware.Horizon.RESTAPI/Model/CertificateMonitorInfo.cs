/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Monitoring data about server&#39;s certificate.
    /// </summary>
    [DataContract]
    public partial class CertificateMonitorInfo :  IEquatable<CertificateMonitorInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateMonitorInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CertificateMonitorInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateMonitorInfo" /> class.
        /// </summary>
        /// <param name="valid">Indicates if the certificate is valid. (required).</param>
        /// <param name="validFrom">Start time of the certificate validity in milliseconds. Measured as epoch time. (required).</param>
        /// <param name="validTo">Expiration time of the certificate validity in milliseconds. Measured as epoch time. (required).</param>
        public CertificateMonitorInfo(bool? valid = default(bool?), long? validFrom = default(long?), long? validTo = default(long?))
        {
            // to ensure "valid" is required (not null)
            if (valid == null)
            {
                throw new InvalidDataException("valid is a required property for CertificateMonitorInfo and cannot be null");
            }
            else
            {
                this.Valid = valid;
            }
            // to ensure "validFrom" is required (not null)
            if (validFrom == null)
            {
                throw new InvalidDataException("validFrom is a required property for CertificateMonitorInfo and cannot be null");
            }
            else
            {
                this.ValidFrom = validFrom;
            }
            // to ensure "validTo" is required (not null)
            if (validTo == null)
            {
                throw new InvalidDataException("validTo is a required property for CertificateMonitorInfo and cannot be null");
            }
            else
            {
                this.ValidTo = validTo;
            }
        }
        
        /// <summary>
        /// Indicates if the certificate is valid.
        /// </summary>
        /// <value>Indicates if the certificate is valid.</value>
        [DataMember(Name="valid", EmitDefaultValue=false)]
        public bool? Valid { get; set; }

        /// <summary>
        /// Start time of the certificate validity in milliseconds. Measured as epoch time.
        /// </summary>
        /// <value>Start time of the certificate validity in milliseconds. Measured as epoch time.</value>
        [DataMember(Name="valid_from", EmitDefaultValue=false)]
        public long? ValidFrom { get; set; }

        /// <summary>
        /// Expiration time of the certificate validity in milliseconds. Measured as epoch time.
        /// </summary>
        /// <value>Expiration time of the certificate validity in milliseconds. Measured as epoch time.</value>
        [DataMember(Name="valid_to", EmitDefaultValue=false)]
        public long? ValidTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificateMonitorInfo {\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificateMonitorInfo);
        }

        /// <summary>
        /// Returns true if CertificateMonitorInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificateMonitorInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateMonitorInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Valid == input.Valid ||
                    (this.Valid != null &&
                    this.Valid.Equals(input.Valid))
                ) && 
                (
                    this.ValidFrom == input.ValidFrom ||
                    (this.ValidFrom != null &&
                    this.ValidFrom.Equals(input.ValidFrom))
                ) && 
                (
                    this.ValidTo == input.ValidTo ||
                    (this.ValidTo != null &&
                    this.ValidTo.Equals(input.ValidTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Valid != null)
                    hashCode = hashCode * 59 + this.Valid.GetHashCode();
                if (this.ValidFrom != null)
                    hashCode = hashCode * 59 + this.ValidFrom.GetHashCode();
                if (this.ValidTo != null)
                    hashCode = hashCode * 59 + this.ValidTo.GetHashCode();
                return hashCode;
            }
        }
    }

}
