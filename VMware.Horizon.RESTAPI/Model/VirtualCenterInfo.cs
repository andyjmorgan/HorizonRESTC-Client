/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to Virtual Center.
    /// </summary>
    [DataContract]
    public partial class VirtualCenterInfo :  IEquatable<VirtualCenterInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VirtualCenterInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VirtualCenterInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VirtualCenterInfo" /> class.
        /// </summary>
        /// <param name="certificateOverride">Virtual center certificate thumbprint should the client choose to override an invalid certificate..</param>
        /// <param name="description">Human readable description of the Virtual Center instance..</param>
        /// <param name="displayName">Human readable name of the Virtual Center instance..</param>
        /// <param name="enabled">Indicates if the virtual center is enabled. (required).</param>
        /// <param name="id">Unique ID of the Virtual Center. (required).</param>
        /// <param name="instanceUuid">Virtual center&#39;s instanceUuid..</param>
        /// <param name="limits">Virtual center&#39;s limits for the number of concurrent operations. (required).</param>
        /// <param name="port">Port of the virtual center to connect to. (required).</param>
        /// <param name="seSparseReclamationEnabled">Indicates if Storage Efficiency Sparse (seSparse) reclamation is enabled. (required).</param>
        /// <param name="serverName">Virtual Center&#39;s server name or IP address. (required).</param>
        /// <param name="storageAcceleratorData">Storage Accelerator configuration details. (required).</param>
        /// <param name="useSsl">Indicates if SSL should be used when connecting to the server. (required).</param>
        /// <param name="userName">User name to use for the connection. (required).</param>
        /// <param name="version">Version of the Virtual Center. (required).</param>
        /// <param name="vmcDeployment">Indicates if virtual center is deployed in VMC..</param>
        public VirtualCenterInfo(CertificateOverrideData certificateOverride = default(CertificateOverrideData), string description = default(string), string displayName = default(string), bool? enabled = default(bool?), string id = default(string), string instanceUuid = default(string), VCLimits limits = default(VCLimits), int? port = default(int?), bool? seSparseReclamationEnabled = default(bool?), string serverName = default(string), StorageAcceleratorData storageAcceleratorData = default(StorageAcceleratorData), bool? useSsl = default(bool?), string userName = default(string), string version = default(string), bool? vmcDeployment = default(bool?))
        {
            // to ensure "enabled" is required (not null)
            if (enabled == null)
            {
                throw new InvalidDataException("enabled is a required property for VirtualCenterInfo and cannot be null");
            }
            else
            {
                this.Enabled = enabled;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for VirtualCenterInfo and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "limits" is required (not null)
            if (limits == null)
            {
                throw new InvalidDataException("limits is a required property for VirtualCenterInfo and cannot be null");
            }
            else
            {
                this.Limits = limits;
            }
            // to ensure "port" is required (not null)
            if (port == null)
            {
                throw new InvalidDataException("port is a required property for VirtualCenterInfo and cannot be null");
            }
            else
            {
                this.Port = port;
            }
            // to ensure "seSparseReclamationEnabled" is required (not null)
            if (seSparseReclamationEnabled == null)
            {
                throw new InvalidDataException("seSparseReclamationEnabled is a required property for VirtualCenterInfo and cannot be null");
            }
            else
            {
                this.SeSparseReclamationEnabled = seSparseReclamationEnabled;
            }
            // to ensure "serverName" is required (not null)
            if (serverName == null)
            {
                throw new InvalidDataException("serverName is a required property for VirtualCenterInfo and cannot be null");
            }
            else
            {
                this.ServerName = serverName;
            }
            // to ensure "storageAcceleratorData" is required (not null)
            if (storageAcceleratorData == null)
            {
                throw new InvalidDataException("storageAcceleratorData is a required property for VirtualCenterInfo and cannot be null");
            }
            else
            {
                this.StorageAcceleratorData = storageAcceleratorData;
            }
            // to ensure "useSsl" is required (not null)
            if (useSsl == null)
            {
                throw new InvalidDataException("useSsl is a required property for VirtualCenterInfo and cannot be null");
            }
            else
            {
                this.UseSsl = useSsl;
            }
            // to ensure "userName" is required (not null)
            if (userName == null)
            {
                throw new InvalidDataException("userName is a required property for VirtualCenterInfo and cannot be null");
            }
            else
            {
                this.UserName = userName;
            }
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for VirtualCenterInfo and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            this.CertificateOverride = certificateOverride;
            this.Description = description;
            this.DisplayName = displayName;
            this.InstanceUuid = instanceUuid;
            this.VmcDeployment = vmcDeployment;
        }
        
        /// <summary>
        /// Virtual center certificate thumbprint should the client choose to override an invalid certificate.
        /// </summary>
        /// <value>Virtual center certificate thumbprint should the client choose to override an invalid certificate.</value>
        [DataMember(Name="certificate_override", EmitDefaultValue=false)]
        public CertificateOverrideData CertificateOverride { get; set; }

        /// <summary>
        /// Human readable description of the Virtual Center instance.
        /// </summary>
        /// <value>Human readable description of the Virtual Center instance.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Human readable name of the Virtual Center instance.
        /// </summary>
        /// <value>Human readable name of the Virtual Center instance.</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Indicates if the virtual center is enabled.
        /// </summary>
        /// <value>Indicates if the virtual center is enabled.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Unique ID of the Virtual Center.
        /// </summary>
        /// <value>Unique ID of the Virtual Center.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Virtual center&#39;s instanceUuid.
        /// </summary>
        /// <value>Virtual center&#39;s instanceUuid.</value>
        [DataMember(Name="instance_uuid", EmitDefaultValue=false)]
        public string InstanceUuid { get; set; }

        /// <summary>
        /// Virtual center&#39;s limits for the number of concurrent operations.
        /// </summary>
        /// <value>Virtual center&#39;s limits for the number of concurrent operations.</value>
        [DataMember(Name="limits", EmitDefaultValue=false)]
        public VCLimits Limits { get; set; }

        /// <summary>
        /// Port of the virtual center to connect to.
        /// </summary>
        /// <value>Port of the virtual center to connect to.</value>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }

        /// <summary>
        /// Indicates if Storage Efficiency Sparse (seSparse) reclamation is enabled.
        /// </summary>
        /// <value>Indicates if Storage Efficiency Sparse (seSparse) reclamation is enabled.</value>
        [DataMember(Name="se_sparse_reclamation_enabled", EmitDefaultValue=false)]
        public bool? SeSparseReclamationEnabled { get; set; }

        /// <summary>
        /// Virtual Center&#39;s server name or IP address.
        /// </summary>
        /// <value>Virtual Center&#39;s server name or IP address.</value>
        [DataMember(Name="server_name", EmitDefaultValue=false)]
        public string ServerName { get; set; }

        /// <summary>
        /// Storage Accelerator configuration details.
        /// </summary>
        /// <value>Storage Accelerator configuration details.</value>
        [DataMember(Name="storage_accelerator_data", EmitDefaultValue=false)]
        public StorageAcceleratorData StorageAcceleratorData { get; set; }

        /// <summary>
        /// Indicates if SSL should be used when connecting to the server.
        /// </summary>
        /// <value>Indicates if SSL should be used when connecting to the server.</value>
        [DataMember(Name="use_ssl", EmitDefaultValue=false)]
        public bool? UseSsl { get; set; }

        /// <summary>
        /// User name to use for the connection.
        /// </summary>
        /// <value>User name to use for the connection.</value>
        [DataMember(Name="user_name", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Version of the Virtual Center.
        /// </summary>
        /// <value>Version of the Virtual Center.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Indicates if virtual center is deployed in VMC.
        /// </summary>
        /// <value>Indicates if virtual center is deployed in VMC.</value>
        [DataMember(Name="vmc_deployment", EmitDefaultValue=false)]
        public bool? VmcDeployment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VirtualCenterInfo {\n");
            sb.Append("  CertificateOverride: ").Append(CertificateOverride).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstanceUuid: ").Append(InstanceUuid).Append("\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  SeSparseReclamationEnabled: ").Append(SeSparseReclamationEnabled).Append("\n");
            sb.Append("  ServerName: ").Append(ServerName).Append("\n");
            sb.Append("  StorageAcceleratorData: ").Append(StorageAcceleratorData).Append("\n");
            sb.Append("  UseSsl: ").Append(UseSsl).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  VmcDeployment: ").Append(VmcDeployment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VirtualCenterInfo);
        }

        /// <summary>
        /// Returns true if VirtualCenterInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of VirtualCenterInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VirtualCenterInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CertificateOverride == input.CertificateOverride ||
                    (this.CertificateOverride != null &&
                    this.CertificateOverride.Equals(input.CertificateOverride))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InstanceUuid == input.InstanceUuid ||
                    (this.InstanceUuid != null &&
                    this.InstanceUuid.Equals(input.InstanceUuid))
                ) && 
                (
                    this.Limits == input.Limits ||
                    (this.Limits != null &&
                    this.Limits.Equals(input.Limits))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.SeSparseReclamationEnabled == input.SeSparseReclamationEnabled ||
                    (this.SeSparseReclamationEnabled != null &&
                    this.SeSparseReclamationEnabled.Equals(input.SeSparseReclamationEnabled))
                ) && 
                (
                    this.ServerName == input.ServerName ||
                    (this.ServerName != null &&
                    this.ServerName.Equals(input.ServerName))
                ) && 
                (
                    this.StorageAcceleratorData == input.StorageAcceleratorData ||
                    (this.StorageAcceleratorData != null &&
                    this.StorageAcceleratorData.Equals(input.StorageAcceleratorData))
                ) && 
                (
                    this.UseSsl == input.UseSsl ||
                    (this.UseSsl != null &&
                    this.UseSsl.Equals(input.UseSsl))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.VmcDeployment == input.VmcDeployment ||
                    (this.VmcDeployment != null &&
                    this.VmcDeployment.Equals(input.VmcDeployment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertificateOverride != null)
                    hashCode = hashCode * 59 + this.CertificateOverride.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InstanceUuid != null)
                    hashCode = hashCode * 59 + this.InstanceUuid.GetHashCode();
                if (this.Limits != null)
                    hashCode = hashCode * 59 + this.Limits.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.SeSparseReclamationEnabled != null)
                    hashCode = hashCode * 59 + this.SeSparseReclamationEnabled.GetHashCode();
                if (this.ServerName != null)
                    hashCode = hashCode * 59 + this.ServerName.GetHashCode();
                if (this.StorageAcceleratorData != null)
                    hashCode = hashCode * 59 + this.StorageAcceleratorData.GetHashCode();
                if (this.UseSsl != null)
                    hashCode = hashCode * 59 + this.UseSsl.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.VmcDeployment != null)
                    hashCode = hashCode * 59 + this.VmcDeployment.GetHashCode();
                return hashCode;
            }
        }
    }

}
