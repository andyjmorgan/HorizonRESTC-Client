/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to instant clone domain accounts of the environment.
    /// </summary>
    [DataContract]
    public partial class InstantCloneDomainAccountInfo :  IEquatable<InstantCloneDomainAccountInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstantCloneDomainAccountInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InstantCloneDomainAccountInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstantCloneDomainAccountInfo" /> class.
        /// </summary>
        /// <param name="adDomainId">ID of the AD Domain that this account user belongs to. (required).</param>
        /// <param name="id">Unique ID representing instant clone domain account. (required).</param>
        /// <param name="username">User name of the account. (required).</param>
        public InstantCloneDomainAccountInfo(string adDomainId = default(string), string id = default(string), string username = default(string))
        {
            // to ensure "adDomainId" is required (not null)
            if (adDomainId == null)
            {
                throw new InvalidDataException("adDomainId is a required property for InstantCloneDomainAccountInfo and cannot be null");
            }
            else
            {
                this.AdDomainId = adDomainId;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for InstantCloneDomainAccountInfo and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for InstantCloneDomainAccountInfo and cannot be null");
            }
            else
            {
                this.Username = username;
            }
        }
        
        /// <summary>
        /// ID of the AD Domain that this account user belongs to.
        /// </summary>
        /// <value>ID of the AD Domain that this account user belongs to.</value>
        [DataMember(Name="ad_domain_id", EmitDefaultValue=false)]
        public string AdDomainId { get; set; }

        /// <summary>
        /// Unique ID representing instant clone domain account.
        /// </summary>
        /// <value>Unique ID representing instant clone domain account.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// User name of the account.
        /// </summary>
        /// <value>User name of the account.</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstantCloneDomainAccountInfo {\n");
            sb.Append("  AdDomainId: ").Append(AdDomainId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstantCloneDomainAccountInfo);
        }

        /// <summary>
        /// Returns true if InstantCloneDomainAccountInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of InstantCloneDomainAccountInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstantCloneDomainAccountInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdDomainId == input.AdDomainId ||
                    (this.AdDomainId != null &&
                    this.AdDomainId.Equals(input.AdDomainId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdDomainId != null)
                    hashCode = hashCode * 59 + this.AdDomainId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }
    }

}
