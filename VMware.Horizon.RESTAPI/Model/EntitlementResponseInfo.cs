/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Entitlement response info object corrspsonding to the given ad-user-or-group SID for the entitlement operation.
    /// </summary>
    [DataContract]
    public partial class EntitlementResponseInfo :  IEquatable<EntitlementResponseInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntitlementResponseInfo" /> class.
        /// </summary>
        /// <param name="adUserOrGroupId">Unique SID representing the ad-user-or-group.</param>
        /// <param name="errorMessages">Reasons for the failure of the operation..</param>
        /// <param name="statusCode">Response HTTP status code of the operation..</param>
        /// <param name="timestamp">Timestamp in milliseconds when the operation failed. Measured as epoch time..</param>
        public EntitlementResponseInfo(string adUserOrGroupId = default(string), List<string> errorMessages = default(List<string>), int? statusCode = default(int?), long? timestamp = default(long?))
        {
            this.AdUserOrGroupId = adUserOrGroupId;
            this.ErrorMessages = errorMessages;
            this.StatusCode = statusCode;
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// Unique SID representing the ad-user-or-group
        /// </summary>
        /// <value>Unique SID representing the ad-user-or-group</value>
        [DataMember(Name="ad_user_or_group_id", EmitDefaultValue=false)]
        public string AdUserOrGroupId { get; set; }

        /// <summary>
        /// Reasons for the failure of the operation.
        /// </summary>
        /// <value>Reasons for the failure of the operation.</value>
        [DataMember(Name="error_messages", EmitDefaultValue=false)]
        public List<string> ErrorMessages { get; set; }

        /// <summary>
        /// Response HTTP status code of the operation.
        /// </summary>
        /// <value>Response HTTP status code of the operation.</value>
        [DataMember(Name="status_code", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// Timestamp in milliseconds when the operation failed. Measured as epoch time.
        /// </summary>
        /// <value>Timestamp in milliseconds when the operation failed. Measured as epoch time.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntitlementResponseInfo {\n");
            sb.Append("  AdUserOrGroupId: ").Append(AdUserOrGroupId).Append("\n");
            sb.Append("  ErrorMessages: ").Append(ErrorMessages).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntitlementResponseInfo);
        }

        /// <summary>
        /// Returns true if EntitlementResponseInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of EntitlementResponseInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntitlementResponseInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdUserOrGroupId == input.AdUserOrGroupId ||
                    (this.AdUserOrGroupId != null &&
                    this.AdUserOrGroupId.Equals(input.AdUserOrGroupId))
                ) && 
                (
                    this.ErrorMessages == input.ErrorMessages ||
                    this.ErrorMessages != null &&
                    this.ErrorMessages.SequenceEqual(input.ErrorMessages)
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdUserOrGroupId != null)
                    hashCode = hashCode * 59 + this.AdUserOrGroupId.GetHashCode();
                if (this.ErrorMessages != null)
                    hashCode = hashCode * 59 + this.ErrorMessages.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }
    }

}
