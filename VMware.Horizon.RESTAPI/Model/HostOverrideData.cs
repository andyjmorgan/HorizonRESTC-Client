/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Details of the Hypervisor hosts involved in Content Based Read Caching (CBRC)
    /// </summary>
    [DataContract]
    public partial class HostOverrideData :  IEquatable<HostOverrideData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HostOverrideData" /> class.
        /// </summary>
        /// <param name="cacheSizeMb">Size of the cache in megabytes. This property has a minimum value of 100. This property has a maximum value of 2048..</param>
        /// <param name="path">The path of the host that supports View Storage Accelerator..</param>
        public HostOverrideData(int? cacheSizeMb = default(int?), string path = default(string))
        {
            this.CacheSizeMb = cacheSizeMb;
            this.Path = path;
        }
        
        /// <summary>
        /// Size of the cache in megabytes. This property has a minimum value of 100. This property has a maximum value of 2048.
        /// </summary>
        /// <value>Size of the cache in megabytes. This property has a minimum value of 100. This property has a maximum value of 2048.</value>
        [DataMember(Name="cache_size_mb", EmitDefaultValue=false)]
        public int? CacheSizeMb { get; set; }

        /// <summary>
        /// The path of the host that supports View Storage Accelerator.
        /// </summary>
        /// <value>The path of the host that supports View Storage Accelerator.</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HostOverrideData {\n");
            sb.Append("  CacheSizeMb: ").Append(CacheSizeMb).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HostOverrideData);
        }

        /// <summary>
        /// Returns true if HostOverrideData instances are equal
        /// </summary>
        /// <param name="input">Instance of HostOverrideData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostOverrideData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CacheSizeMb == input.CacheSizeMb ||
                    (this.CacheSizeMb != null &&
                    this.CacheSizeMb.Equals(input.CacheSizeMb))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CacheSizeMb != null)
                    hashCode = hashCode * 59 + this.CacheSizeMb.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                return hashCode;
            }
        }
    }

}
