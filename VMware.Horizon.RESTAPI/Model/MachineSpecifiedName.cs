/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information required to add a machine to a desktop pool.
    /// </summary>
    [DataContract]
    public partial class MachineSpecifiedName :  IEquatable<MachineSpecifiedName>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineSpecifiedName" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MachineSpecifiedName() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineSpecifiedName" /> class.
        /// </summary>
        /// <param name="name">Name of the machine. (required).</param>
        /// <param name="userId">The unique SID of the user assigned to the machine..</param>
        public MachineSpecifiedName(string name = default(string), string userId = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for MachineSpecifiedName and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.UserId = userId;
        }
        
        /// <summary>
        /// Name of the machine.
        /// </summary>
        /// <value>Name of the machine.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The unique SID of the user assigned to the machine.
        /// </summary>
        /// <value>The unique SID of the user assigned to the machine.</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MachineSpecifiedName {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MachineSpecifiedName);
        }

        /// <summary>
        /// Returns true if MachineSpecifiedName instances are equal
        /// </summary>
        /// <param name="input">Instance of MachineSpecifiedName to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MachineSpecifiedName input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }
    }

}
