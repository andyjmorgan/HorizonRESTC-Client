/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Event Database Monitor Information
    /// </summary>
    [DataContract]
    public partial class EventDatabaseMonitorInfo :  IEquatable<EventDatabaseMonitorInfo>
    {
        /// <summary>
        /// State of the database. * CONNECTED: Connection Server is connected to the database. * CONNECTING: Connection Server is connecting to the database. * DISCONNECTED: Connection Server is disconnected from the database. * RECONNECTING: Connection Server is reconnecting to the database. * ERROR: Error in connecting to the database from Connection Server. * NOT_CONFIGURED: Database is not configured.
        /// </summary>
        /// <value>State of the database. * CONNECTED: Connection Server is connected to the database. * CONNECTING: Connection Server is connecting to the database. * DISCONNECTED: Connection Server is disconnected from the database. * RECONNECTING: Connection Server is reconnecting to the database. * ERROR: Error in connecting to the database from Connection Server. * NOT_CONFIGURED: Database is not configured.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum CONNECTED for value: CONNECTED
            /// </summary>
            [EnumMember(Value = "CONNECTED")]
            CONNECTED = 1,
            
            /// <summary>
            /// Enum CONNECTING for value: CONNECTING
            /// </summary>
            [EnumMember(Value = "CONNECTING")]
            CONNECTING = 2,
            
            /// <summary>
            /// Enum DISCONNECTED for value: DISCONNECTED
            /// </summary>
            [EnumMember(Value = "DISCONNECTED")]
            DISCONNECTED = 3,
            
            /// <summary>
            /// Enum RECONNECTING for value: RECONNECTING
            /// </summary>
            [EnumMember(Value = "RECONNECTING")]
            RECONNECTING = 4,
            
            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 5,
            
            /// <summary>
            /// Enum NOTCONFIGURED for value: NOT_CONFIGURED
            /// </summary>
            [EnumMember(Value = "NOT_CONFIGURED")]
            NOTCONFIGURED = 6
        }

        /// <summary>
        /// State of the database. * CONNECTED: Connection Server is connected to the database. * CONNECTING: Connection Server is connecting to the database. * DISCONNECTED: Connection Server is disconnected from the database. * RECONNECTING: Connection Server is reconnecting to the database. * ERROR: Error in connecting to the database from Connection Server. * NOT_CONFIGURED: Database is not configured.
        /// </summary>
        /// <value>State of the database. * CONNECTED: Connection Server is connected to the database. * CONNECTING: Connection Server is connecting to the database. * DISCONNECTED: Connection Server is disconnected from the database. * RECONNECTING: Connection Server is reconnecting to the database. * ERROR: Error in connecting to the database from Connection Server. * NOT_CONFIGURED: Database is not configured.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventDatabaseMonitorInfo" /> class.
        /// </summary>
        /// <param name="details">The basic details of the event database.</param>
        /// <param name="eventCount">Number of events recorded in the database.</param>
        /// <param name="status">State of the database. * CONNECTED: Connection Server is connected to the database. * CONNECTING: Connection Server is connecting to the database. * DISCONNECTED: Connection Server is disconnected from the database. * RECONNECTING: Connection Server is reconnecting to the database. * ERROR: Error in connecting to the database from Connection Server. * NOT_CONFIGURED: Database is not configured..</param>
        public EventDatabaseMonitorInfo(EventDatabaseMonitorDetails details = default(EventDatabaseMonitorDetails), int? eventCount = default(int?), StatusEnum? status = default(StatusEnum?))
        {
            this.Details = details;
            this.EventCount = eventCount;
            this.Status = status;
        }
        
        /// <summary>
        /// The basic details of the event database
        /// </summary>
        /// <value>The basic details of the event database</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public EventDatabaseMonitorDetails Details { get; set; }

        /// <summary>
        /// Number of events recorded in the database
        /// </summary>
        /// <value>Number of events recorded in the database</value>
        [DataMember(Name="event_count", EmitDefaultValue=false)]
        public int? EventCount { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventDatabaseMonitorInfo {\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  EventCount: ").Append(EventCount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventDatabaseMonitorInfo);
        }

        /// <summary>
        /// Returns true if EventDatabaseMonitorInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of EventDatabaseMonitorInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventDatabaseMonitorInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.EventCount == input.EventCount ||
                    (this.EventCount != null &&
                    this.EventCount.Equals(input.EventCount))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.EventCount != null)
                    hashCode = hashCode * 59 + this.EventCount.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }
    }

}
