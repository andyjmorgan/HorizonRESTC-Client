/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to AD Domains of the environment.
    /// </summary>
    [DataContract]
    public partial class ADDomainInfo :  IEquatable<ADDomainInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ADDomainInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ADDomainInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ADDomainInfo" /> class.
        /// </summary>
        /// <param name="dnsName">DNS name of the AD Domain. (required).</param>
        /// <param name="id">Unique ID representing AD Domain. (required).</param>
        /// <param name="netbiosName">NetBIOS name of the AD Domain. (required).</param>
        public ADDomainInfo(string dnsName = default(string), string id = default(string), string netbiosName = default(string))
        {
            // to ensure "dnsName" is required (not null)
            if (dnsName == null)
            {
                throw new InvalidDataException("dnsName is a required property for ADDomainInfo and cannot be null");
            }
            else
            {
                this.DnsName = dnsName;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ADDomainInfo and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "netbiosName" is required (not null)
            if (netbiosName == null)
            {
                throw new InvalidDataException("netbiosName is a required property for ADDomainInfo and cannot be null");
            }
            else
            {
                this.NetbiosName = netbiosName;
            }
        }
        
        /// <summary>
        /// DNS name of the AD Domain.
        /// </summary>
        /// <value>DNS name of the AD Domain.</value>
        [DataMember(Name="dns_name", EmitDefaultValue=false)]
        public string DnsName { get; set; }

        /// <summary>
        /// Unique ID representing AD Domain.
        /// </summary>
        /// <value>Unique ID representing AD Domain.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// NetBIOS name of the AD Domain.
        /// </summary>
        /// <value>NetBIOS name of the AD Domain.</value>
        [DataMember(Name="netbios_name", EmitDefaultValue=false)]
        public string NetbiosName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ADDomainInfo {\n");
            sb.Append("  DnsName: ").Append(DnsName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NetbiosName: ").Append(NetbiosName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ADDomainInfo);
        }

        /// <summary>
        /// Returns true if ADDomainInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ADDomainInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ADDomainInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DnsName == input.DnsName ||
                    (this.DnsName != null &&
                    this.DnsName.Equals(input.DnsName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.NetbiosName == input.NetbiosName ||
                    (this.NetbiosName != null &&
                    this.NetbiosName.Equals(input.NetbiosName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DnsName != null)
                    hashCode = hashCode * 59 + this.DnsName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.NetbiosName != null)
                    hashCode = hashCode * 59 + this.NetbiosName.GetHashCode();
                return hashCode;
            }
        }
    }

}
