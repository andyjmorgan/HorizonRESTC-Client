/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// EnrollmentServerDetails
    /// </summary>
    [DataContract]
    public partial class EnrollmentServerDetails :  IEquatable<EnrollmentServerDetails>
    {
        /// <summary>
        /// Enrollment server status. * OK: The state of enrollment server is OK. * ERROR: The enrollment server has an error.
        /// </summary>
        /// <value>Enrollment server status. * OK: The state of enrollment server is OK. * ERROR: The enrollment server has an error.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum OK for value: OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OK = 1,
            
            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 2
        }

        /// <summary>
        /// Enrollment server status. * OK: The state of enrollment server is OK. * ERROR: The enrollment server has an error.
        /// </summary>
        /// <value>Enrollment server status. * OK: The state of enrollment server is OK. * ERROR: The enrollment server has an error.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnrollmentServerDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnrollmentServerDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnrollmentServerDetails" /> class.
        /// </summary>
        /// <param name="dnsName">Enrollment server dns name. (required).</param>
        /// <param name="id">Unique ID of the Enrollment Server. (required).</param>
        /// <param name="status">Enrollment server status. * OK: The state of enrollment server is OK. * ERROR: The enrollment server has an error. (required).</param>
        public EnrollmentServerDetails(string dnsName = default(string), string id = default(string), StatusEnum status = default(StatusEnum))
        {
            // to ensure "dnsName" is required (not null)
            if (dnsName == null)
            {
                throw new InvalidDataException("dnsName is a required property for EnrollmentServerDetails and cannot be null");
            }
            else
            {
                this.DnsName = dnsName;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for EnrollmentServerDetails and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for EnrollmentServerDetails and cannot be null");
            }
            else
            {
                this.Status = status;
            }
        }
        
        /// <summary>
        /// Enrollment server dns name.
        /// </summary>
        /// <value>Enrollment server dns name.</value>
        [DataMember(Name="dns_name", EmitDefaultValue=false)]
        public string DnsName { get; set; }

        /// <summary>
        /// Unique ID of the Enrollment Server.
        /// </summary>
        /// <value>Unique ID of the Enrollment Server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnrollmentServerDetails {\n");
            sb.Append("  DnsName: ").Append(DnsName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnrollmentServerDetails);
        }

        /// <summary>
        /// Returns true if EnrollmentServerDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of EnrollmentServerDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnrollmentServerDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DnsName == input.DnsName ||
                    (this.DnsName != null &&
                    this.DnsName.Equals(input.DnsName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DnsName != null)
                    hashCode = hashCode * 59 + this.DnsName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }
    }

}
