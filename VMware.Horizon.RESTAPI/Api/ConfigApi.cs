/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using VMware.Horizon.RESTAPI.Client;
using VMware.Horizon.RESTAPI.Model;

namespace VMware.Horizon.RESTAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates instant clone domain account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Instant clone domain account object to be created.</param>
        /// <returns></returns>
        void CreateICDomainAccount (InstantCloneDomainAccountCreateSpec body);

        /// <summary>
        /// Creates instant clone domain account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Instant clone domain account object to be created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateICDomainAccountWithHttpInfo (InstantCloneDomainAccountCreateSpec body);
        /// <summary>
        /// Creates image management asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management asset object to be created.</param>
        /// <returns></returns>
        void CreateIMAsset (ImageManagementAssetCreateSpec body);

        /// <summary>
        /// Creates image management asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management asset object to be created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateIMAssetWithHttpInfo (ImageManagementAssetCreateSpec body);
        /// <summary>
        /// Creates one or more image management assets. Each of the index of result in the response, correspond to the index of the original asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management asset object to be created in bulk.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> CreateIMAssets (List<ImageManagementAssetCreateSpec> body);

        /// <summary>
        /// Creates one or more image management assets. Each of the index of result in the response, correspond to the index of the original asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management asset object to be created in bulk.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> CreateIMAssetsWithHttpInfo (List<ImageManagementAssetCreateSpec> body);
        /// <summary>
        /// Creates image management stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management stream object to be created.</param>
        /// <returns></returns>
        void CreateIMStream (ImageManagementStreamCreateSpec body);

        /// <summary>
        /// Creates image management stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management stream object to be created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateIMStreamWithHttpInfo (ImageManagementStreamCreateSpec body);
        /// <summary>
        /// Creates one or more image management streams. Each of the index of result in the response, correspond to the index of the original stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management stream object to be created in bulk.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> CreateIMStreams (List<ImageManagementStreamCreateSpec> body);

        /// <summary>
        /// Creates one or more image management streams. Each of the index of result in the response, correspond to the index of the original stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management stream object to be created in bulk.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> CreateIMStreamsWithHttpInfo (List<ImageManagementStreamCreateSpec> body);
        /// <summary>
        /// Creates image management tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management tag object to be created.</param>
        /// <returns></returns>
        void CreateIMTag (ImageManagementTagCreateSpec body);

        /// <summary>
        /// Creates image management tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management tag object to be created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateIMTagWithHttpInfo (ImageManagementTagCreateSpec body);
        /// <summary>
        /// Creates one or more image management tags. Each of the index of result in the response, correspond to the index of the original tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management tag object to be created in bulk.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> CreateIMTags (List<ImageManagementTagCreateSpec> body);

        /// <summary>
        /// Creates one or more image management tags. Each of the index of result in the response, correspond to the index of the original tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management tag object to be created in bulk.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> CreateIMTagsWithHttpInfo (List<ImageManagementTagCreateSpec> body);
        /// <summary>
        /// Creates image management version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management version object to be created.</param>
        /// <returns></returns>
        void CreateIMVersion (ImageManagementVersionCreateSpec body);

        /// <summary>
        /// Creates image management version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management version object to be created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateIMVersionWithHttpInfo (ImageManagementVersionCreateSpec body);
        /// <summary>
        /// Creates one or more image management versions. Each of the index of result in the response, correspond to the index of the original version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management version object to be created in bulk.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> CreateIMVersions (List<ImageManagementVersionCreateSpec> body);

        /// <summary>
        /// Creates one or more image management versions. Each of the index of result in the response, correspond to the index of the original version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management version object to be created in bulk.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> CreateIMVersionsWithHttpInfo (List<ImageManagementVersionCreateSpec> body);
        /// <summary>
        /// Deletes instant clone domain account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        void DeleteICDomainAccount (string id);

        /// <summary>
        /// Deletes instant clone domain account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteICDomainAccountWithHttpInfo (string id);
        /// <summary>
        /// Deletes image management asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        void DeleteIMAsset (string id);

        /// <summary>
        /// Deletes image management asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIMAssetWithHttpInfo (string id);
        /// <summary>
        /// Deletes image management stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        void DeleteIMStream (string id);

        /// <summary>
        /// Deletes image management stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIMStreamWithHttpInfo (string id);
        /// <summary>
        /// Deletes image management tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        void DeleteIMTag (string id);

        /// <summary>
        /// Deletes image management tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIMTagWithHttpInfo (string id);
        /// <summary>
        /// Deletes image management version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        void DeleteIMVersion (string id);

        /// <summary>
        /// Deletes image management version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIMVersionWithHttpInfo (string id);
        /// <summary>
        /// Retrieves the environment settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EnvironmentInfo</returns>
        EnvironmentInfo GetEnvironmentUsingGET ();

        /// <summary>
        /// Retrieves the environment settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EnvironmentInfo</returns>
        ApiResponse<EnvironmentInfo> GetEnvironmentUsingGETWithHttpInfo ();
        /// <summary>
        /// Retrieves the feature settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>FeatureSettings</returns>
        FeatureSettings GetFeatureSettingsUsingGET ();

        /// <summary>
        /// Retrieves the feature settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of FeatureSettings</returns>
        ApiResponse<FeatureSettings> GetFeatureSettingsUsingGETWithHttpInfo ();
        /// <summary>
        /// Retrieves the general settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GeneralSettings</returns>
        GeneralSettings GetGeneralSettingsUsingGET ();

        /// <summary>
        /// Retrieves the general settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GeneralSettings</returns>
        ApiResponse<GeneralSettings> GetGeneralSettingsUsingGETWithHttpInfo ();
        /// <summary>
        /// Gets instant clone domain account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>InstantCloneDomainAccountInfo</returns>
        InstantCloneDomainAccountInfo GetICDomainAccount (string id);

        /// <summary>
        /// Gets instant clone domain account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of InstantCloneDomainAccountInfo</returns>
        ApiResponse<InstantCloneDomainAccountInfo> GetICDomainAccountWithHttpInfo (string id);
        /// <summary>
        /// Gets image management asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ImageManagementAssetInfo</returns>
        ImageManagementAssetInfo GetIMAsset (string id);

        /// <summary>
        /// Gets image management asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ImageManagementAssetInfo</returns>
        ApiResponse<ImageManagementAssetInfo> GetIMAssetWithHttpInfo (string id);
        /// <summary>
        /// Gets image management stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ImageManagementStreamInfo</returns>
        ImageManagementStreamInfo GetIMStream (string id);

        /// <summary>
        /// Gets image management stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ImageManagementStreamInfo</returns>
        ApiResponse<ImageManagementStreamInfo> GetIMStreamWithHttpInfo (string id);
        /// <summary>
        /// Gets image management tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ImageManagementTagInfo</returns>
        ImageManagementTagInfo GetIMTag (string id);

        /// <summary>
        /// Gets image management tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ImageManagementTagInfo</returns>
        ApiResponse<ImageManagementTagInfo> GetIMTagWithHttpInfo (string id);
        /// <summary>
        /// Gets image management version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ImageManagementVersionInfo</returns>
        ImageManagementVersionInfo GetIMVersion (string id);

        /// <summary>
        /// Gets image management version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ImageManagementVersionInfo</returns>
        ApiResponse<ImageManagementVersionInfo> GetIMVersionWithHttpInfo (string id);
        /// <summary>
        /// Retrieves the security settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SecuritySettings</returns>
        SecuritySettings GetSecuritySettingsUsingGET ();

        /// <summary>
        /// Retrieves the security settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SecuritySettings</returns>
        ApiResponse<SecuritySettings> GetSecuritySettingsUsingGETWithHttpInfo ();
        /// <summary>
        /// Retrieves the configuration settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SettingsInfo</returns>
        SettingsInfo GetSettingsUsingGET ();

        /// <summary>
        /// Retrieves the configuration settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SettingsInfo</returns>
        ApiResponse<SettingsInfo> GetSettingsUsingGETWithHttpInfo ();
        /// <summary>
        /// Lists instant clone domain accounts of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InstantCloneDomainAccountInfo&gt;</returns>
        List<InstantCloneDomainAccountInfo> ListICDomainAccounts ();

        /// <summary>
        /// Lists instant clone domain accounts of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InstantCloneDomainAccountInfo&gt;</returns>
        ApiResponse<List<InstantCloneDomainAccountInfo>> ListICDomainAccountsWithHttpInfo ();
        /// <summary>
        /// Lists image management assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imVersionId">Image management version ID</param>
        /// <returns>List&lt;ImageManagementAssetInfo&gt;</returns>
        List<ImageManagementAssetInfo> ListIMAssets (string imVersionId);

        /// <summary>
        /// Lists image management assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imVersionId">Image management version ID</param>
        /// <returns>ApiResponse of List&lt;ImageManagementAssetInfo&gt;</returns>
        ApiResponse<List<ImageManagementAssetInfo>> ListIMAssetsWithHttpInfo (string imVersionId);
        /// <summary>
        /// Lists image management streams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ImageManagementStreamInfo&gt;</returns>
        List<ImageManagementStreamInfo> ListIMStreams ();

        /// <summary>
        /// Lists image management streams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ImageManagementStreamInfo&gt;</returns>
        ApiResponse<List<ImageManagementStreamInfo>> ListIMStreamsWithHttpInfo ();
        /// <summary>
        /// Lists image management tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imStreamId">Image management stream ID</param>
        /// <returns>List&lt;ImageManagementTagInfo&gt;</returns>
        List<ImageManagementTagInfo> ListIMTags (string imStreamId);

        /// <summary>
        /// Lists image management tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imStreamId">Image management stream ID</param>
        /// <returns>ApiResponse of List&lt;ImageManagementTagInfo&gt;</returns>
        ApiResponse<List<ImageManagementTagInfo>> ListIMTagsWithHttpInfo (string imStreamId);
        /// <summary>
        /// Lists image management versions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imStreamId">Image management stream ID</param>
        /// <returns>List&lt;ImageManagementVersionInfo&gt;</returns>
        List<ImageManagementVersionInfo> ListIMVersions (string imStreamId);

        /// <summary>
        /// Lists image management versions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imStreamId">Image management stream ID</param>
        /// <returns>ApiResponse of List&lt;ImageManagementVersionInfo&gt;</returns>
        ApiResponse<List<ImageManagementVersionInfo>> ListIMVersionsWithHttpInfo (string imStreamId);
        /// <summary>
        /// Lists RCX servers of the cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RCXServerInfo&gt;</returns>
        List<RCXServerInfo> ListRCXServers ();

        /// <summary>
        /// Lists RCX servers of the cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RCXServerInfo&gt;</returns>
        ApiResponse<List<RCXServerInfo>> ListRCXServersWithHttpInfo ();
        /// <summary>
        /// Lists Virtual Centers configured in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;VirtualCenterInfo&gt;</returns>
        List<VirtualCenterInfo> ListVCInfo ();

        /// <summary>
        /// Lists Virtual Centers configured in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;VirtualCenterInfo&gt;</returns>
        ApiResponse<List<VirtualCenterInfo>> ListVCInfoWithHttpInfo ();
        /// <summary>
        /// Registers the RCX client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RCX client object to be registered.</param>
        /// <returns></returns>
        void RegisterRCXClient (RCXClientRegisterSpec body);

        /// <summary>
        /// Registers the RCX client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RCX client object to be registered.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegisterRCXClientWithHttpInfo (RCXClientRegisterSpec body);
        /// <summary>
        /// Unregisters the given RCX Client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        void UnregisterRCXClient (string id);

        /// <summary>
        /// Unregisters the given RCX Client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnregisterRCXClientWithHttpInfo (string id);
        /// <summary>
        /// Updates the feature settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Feature settings object to be updated.</param>
        /// <returns></returns>
        void UpdateFeatureSettingsUsingPUT (FeatureSettingsUpdateSpec body);

        /// <summary>
        /// Updates the feature settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Feature settings object to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateFeatureSettingsUsingPUTWithHttpInfo (FeatureSettingsUpdateSpec body);
        /// <summary>
        /// Updates the general settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">General settings object to be updated.</param>
        /// <returns></returns>
        void UpdateGeneralSettingsUsingPUT (GeneralSettingsUpdateSpec body);

        /// <summary>
        /// Updates the general settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">General settings object to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateGeneralSettingsUsingPUTWithHttpInfo (GeneralSettingsUpdateSpec body);
        /// <summary>
        /// Updates instant clone domain account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Instant clone domain account object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns></returns>
        void UpdateICDomainAccount (InstantCloneDomainAccountUpdateSpec body, string id);

        /// <summary>
        /// Updates instant clone domain account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Instant clone domain account object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateICDomainAccountWithHttpInfo (InstantCloneDomainAccountUpdateSpec body, string id);
        /// <summary>
        /// Updates image management asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management asset object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns></returns>
        void UpdateIMAsset (ImageManagementAssetUpdateSpec body, string id);

        /// <summary>
        /// Updates image management asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management asset object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateIMAssetWithHttpInfo (ImageManagementAssetUpdateSpec body, string id);
        /// <summary>
        /// Updates image management stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management stream object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns></returns>
        void UpdateIMStream (ImageManagementStreamUpdateSpec body, string id);

        /// <summary>
        /// Updates image management stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management stream object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateIMStreamWithHttpInfo (ImageManagementStreamUpdateSpec body, string id);
        /// <summary>
        /// Updates image management tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management tag object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns></returns>
        void UpdateIMTag (ImageManagementTagUpdateSpec body, string id);

        /// <summary>
        /// Updates image management tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management tag object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateIMTagWithHttpInfo (ImageManagementTagUpdateSpec body, string id);
        /// <summary>
        /// Updates image management version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management version object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns></returns>
        void UpdateIMVersion (ImageManagementVersionUpdateSpec body, string id);

        /// <summary>
        /// Updates image management version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management version object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateIMVersionWithHttpInfo (ImageManagementVersionUpdateSpec body, string id);
        /// <summary>
        /// Updates the given RCX client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RCX client object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns></returns>
        void UpdateRCXClient (RCXClientUpdateSpec body, string id);

        /// <summary>
        /// Updates the given RCX client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RCX client object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRCXClientWithHttpInfo (RCXClientUpdateSpec body, string id);
        /// <summary>
        /// Updates the security settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Security settings object to be updated.</param>
        /// <returns></returns>
        void UpdateSecuritySettingsUsingPUT (SecuritySettingsUpdateSpec body);

        /// <summary>
        /// Updates the security settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Security settings object to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSecuritySettingsUsingPUTWithHttpInfo (SecuritySettingsUpdateSpec body);
        /// <summary>
        /// Updates the configuration settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Configuration settings object to be updated.</param>
        /// <returns></returns>
        void UpdateSettingsUsingPUT (SettingsUpdateSpec body);

        /// <summary>
        /// Updates the configuration settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Configuration settings object to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSettingsUsingPUTWithHttpInfo (SettingsUpdateSpec body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates instant clone domain account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Instant clone domain account object to be created.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateICDomainAccountAsync (InstantCloneDomainAccountCreateSpec body);

        /// <summary>
        /// Creates instant clone domain account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Instant clone domain account object to be created.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateICDomainAccountAsyncWithHttpInfo (InstantCloneDomainAccountCreateSpec body);
        /// <summary>
        /// Creates image management asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management asset object to be created.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateIMAssetAsync (ImageManagementAssetCreateSpec body);

        /// <summary>
        /// Creates image management asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management asset object to be created.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateIMAssetAsyncWithHttpInfo (ImageManagementAssetCreateSpec body);
        /// <summary>
        /// Creates one or more image management assets. Each of the index of result in the response, correspond to the index of the original asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management asset object to be created in bulk.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> CreateIMAssetsAsync (List<ImageManagementAssetCreateSpec> body);

        /// <summary>
        /// Creates one or more image management assets. Each of the index of result in the response, correspond to the index of the original asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management asset object to be created in bulk.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> CreateIMAssetsAsyncWithHttpInfo (List<ImageManagementAssetCreateSpec> body);
        /// <summary>
        /// Creates image management stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management stream object to be created.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateIMStreamAsync (ImageManagementStreamCreateSpec body);

        /// <summary>
        /// Creates image management stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management stream object to be created.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateIMStreamAsyncWithHttpInfo (ImageManagementStreamCreateSpec body);
        /// <summary>
        /// Creates one or more image management streams. Each of the index of result in the response, correspond to the index of the original stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management stream object to be created in bulk.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> CreateIMStreamsAsync (List<ImageManagementStreamCreateSpec> body);

        /// <summary>
        /// Creates one or more image management streams. Each of the index of result in the response, correspond to the index of the original stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management stream object to be created in bulk.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> CreateIMStreamsAsyncWithHttpInfo (List<ImageManagementStreamCreateSpec> body);
        /// <summary>
        /// Creates image management tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management tag object to be created.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateIMTagAsync (ImageManagementTagCreateSpec body);

        /// <summary>
        /// Creates image management tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management tag object to be created.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateIMTagAsyncWithHttpInfo (ImageManagementTagCreateSpec body);
        /// <summary>
        /// Creates one or more image management tags. Each of the index of result in the response, correspond to the index of the original tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management tag object to be created in bulk.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> CreateIMTagsAsync (List<ImageManagementTagCreateSpec> body);

        /// <summary>
        /// Creates one or more image management tags. Each of the index of result in the response, correspond to the index of the original tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management tag object to be created in bulk.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> CreateIMTagsAsyncWithHttpInfo (List<ImageManagementTagCreateSpec> body);
        /// <summary>
        /// Creates image management version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management version object to be created.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateIMVersionAsync (ImageManagementVersionCreateSpec body);

        /// <summary>
        /// Creates image management version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management version object to be created.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateIMVersionAsyncWithHttpInfo (ImageManagementVersionCreateSpec body);
        /// <summary>
        /// Creates one or more image management versions. Each of the index of result in the response, correspond to the index of the original version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management version object to be created in bulk.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> CreateIMVersionsAsync (List<ImageManagementVersionCreateSpec> body);

        /// <summary>
        /// Creates one or more image management versions. Each of the index of result in the response, correspond to the index of the original version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management version object to be created in bulk.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> CreateIMVersionsAsyncWithHttpInfo (List<ImageManagementVersionCreateSpec> body);
        /// <summary>
        /// Deletes instant clone domain account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteICDomainAccountAsync (string id);

        /// <summary>
        /// Deletes instant clone domain account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteICDomainAccountAsyncWithHttpInfo (string id);
        /// <summary>
        /// Deletes image management asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIMAssetAsync (string id);

        /// <summary>
        /// Deletes image management asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIMAssetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Deletes image management stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIMStreamAsync (string id);

        /// <summary>
        /// Deletes image management stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIMStreamAsyncWithHttpInfo (string id);
        /// <summary>
        /// Deletes image management tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIMTagAsync (string id);

        /// <summary>
        /// Deletes image management tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIMTagAsyncWithHttpInfo (string id);
        /// <summary>
        /// Deletes image management version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIMVersionAsync (string id);

        /// <summary>
        /// Deletes image management version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIMVersionAsyncWithHttpInfo (string id);
        /// <summary>
        /// Retrieves the environment settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EnvironmentInfo</returns>
        System.Threading.Tasks.Task<EnvironmentInfo> GetEnvironmentUsingGETAsync ();

        /// <summary>
        /// Retrieves the environment settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EnvironmentInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvironmentInfo>> GetEnvironmentUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the feature settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of FeatureSettings</returns>
        System.Threading.Tasks.Task<FeatureSettings> GetFeatureSettingsUsingGETAsync ();

        /// <summary>
        /// Retrieves the feature settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (FeatureSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureSettings>> GetFeatureSettingsUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the general settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GeneralSettings</returns>
        System.Threading.Tasks.Task<GeneralSettings> GetGeneralSettingsUsingGETAsync ();

        /// <summary>
        /// Retrieves the general settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GeneralSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeneralSettings>> GetGeneralSettingsUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// Gets instant clone domain account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of InstantCloneDomainAccountInfo</returns>
        System.Threading.Tasks.Task<InstantCloneDomainAccountInfo> GetICDomainAccountAsync (string id);

        /// <summary>
        /// Gets instant clone domain account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (InstantCloneDomainAccountInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstantCloneDomainAccountInfo>> GetICDomainAccountAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets image management asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ImageManagementAssetInfo</returns>
        System.Threading.Tasks.Task<ImageManagementAssetInfo> GetIMAssetAsync (string id);

        /// <summary>
        /// Gets image management asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ImageManagementAssetInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageManagementAssetInfo>> GetIMAssetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets image management stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ImageManagementStreamInfo</returns>
        System.Threading.Tasks.Task<ImageManagementStreamInfo> GetIMStreamAsync (string id);

        /// <summary>
        /// Gets image management stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ImageManagementStreamInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageManagementStreamInfo>> GetIMStreamAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets image management tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ImageManagementTagInfo</returns>
        System.Threading.Tasks.Task<ImageManagementTagInfo> GetIMTagAsync (string id);

        /// <summary>
        /// Gets image management tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ImageManagementTagInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageManagementTagInfo>> GetIMTagAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets image management version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ImageManagementVersionInfo</returns>
        System.Threading.Tasks.Task<ImageManagementVersionInfo> GetIMVersionAsync (string id);

        /// <summary>
        /// Gets image management version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ImageManagementVersionInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageManagementVersionInfo>> GetIMVersionAsyncWithHttpInfo (string id);
        /// <summary>
        /// Retrieves the security settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SecuritySettings</returns>
        System.Threading.Tasks.Task<SecuritySettings> GetSecuritySettingsUsingGETAsync ();

        /// <summary>
        /// Retrieves the security settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SecuritySettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecuritySettings>> GetSecuritySettingsUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the configuration settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SettingsInfo</returns>
        System.Threading.Tasks.Task<SettingsInfo> GetSettingsUsingGETAsync ();

        /// <summary>
        /// Retrieves the configuration settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SettingsInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsInfo>> GetSettingsUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// Lists instant clone domain accounts of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InstantCloneDomainAccountInfo&gt;</returns>
        System.Threading.Tasks.Task<List<InstantCloneDomainAccountInfo>> ListICDomainAccountsAsync ();

        /// <summary>
        /// Lists instant clone domain accounts of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InstantCloneDomainAccountInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InstantCloneDomainAccountInfo>>> ListICDomainAccountsAsyncWithHttpInfo ();
        /// <summary>
        /// Lists image management assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imVersionId">Image management version ID</param>
        /// <returns>Task of List&lt;ImageManagementAssetInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ImageManagementAssetInfo>> ListIMAssetsAsync (string imVersionId);

        /// <summary>
        /// Lists image management assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imVersionId">Image management version ID</param>
        /// <returns>Task of ApiResponse (List&lt;ImageManagementAssetInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ImageManagementAssetInfo>>> ListIMAssetsAsyncWithHttpInfo (string imVersionId);
        /// <summary>
        /// Lists image management streams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ImageManagementStreamInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ImageManagementStreamInfo>> ListIMStreamsAsync ();

        /// <summary>
        /// Lists image management streams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ImageManagementStreamInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ImageManagementStreamInfo>>> ListIMStreamsAsyncWithHttpInfo ();
        /// <summary>
        /// Lists image management tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imStreamId">Image management stream ID</param>
        /// <returns>Task of List&lt;ImageManagementTagInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ImageManagementTagInfo>> ListIMTagsAsync (string imStreamId);

        /// <summary>
        /// Lists image management tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imStreamId">Image management stream ID</param>
        /// <returns>Task of ApiResponse (List&lt;ImageManagementTagInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ImageManagementTagInfo>>> ListIMTagsAsyncWithHttpInfo (string imStreamId);
        /// <summary>
        /// Lists image management versions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imStreamId">Image management stream ID</param>
        /// <returns>Task of List&lt;ImageManagementVersionInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ImageManagementVersionInfo>> ListIMVersionsAsync (string imStreamId);

        /// <summary>
        /// Lists image management versions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imStreamId">Image management stream ID</param>
        /// <returns>Task of ApiResponse (List&lt;ImageManagementVersionInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ImageManagementVersionInfo>>> ListIMVersionsAsyncWithHttpInfo (string imStreamId);
        /// <summary>
        /// Lists RCX servers of the cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RCXServerInfo&gt;</returns>
        System.Threading.Tasks.Task<List<RCXServerInfo>> ListRCXServersAsync ();

        /// <summary>
        /// Lists RCX servers of the cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RCXServerInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RCXServerInfo>>> ListRCXServersAsyncWithHttpInfo ();
        /// <summary>
        /// Lists Virtual Centers configured in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;VirtualCenterInfo&gt;</returns>
        System.Threading.Tasks.Task<List<VirtualCenterInfo>> ListVCInfoAsync ();

        /// <summary>
        /// Lists Virtual Centers configured in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;VirtualCenterInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VirtualCenterInfo>>> ListVCInfoAsyncWithHttpInfo ();
        /// <summary>
        /// Registers the RCX client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RCX client object to be registered.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegisterRCXClientAsync (RCXClientRegisterSpec body);

        /// <summary>
        /// Registers the RCX client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RCX client object to be registered.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterRCXClientAsyncWithHttpInfo (RCXClientRegisterSpec body);
        /// <summary>
        /// Unregisters the given RCX Client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnregisterRCXClientAsync (string id);

        /// <summary>
        /// Unregisters the given RCX Client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnregisterRCXClientAsyncWithHttpInfo (string id);
        /// <summary>
        /// Updates the feature settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Feature settings object to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateFeatureSettingsUsingPUTAsync (FeatureSettingsUpdateSpec body);

        /// <summary>
        /// Updates the feature settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Feature settings object to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFeatureSettingsUsingPUTAsyncWithHttpInfo (FeatureSettingsUpdateSpec body);
        /// <summary>
        /// Updates the general settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">General settings object to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateGeneralSettingsUsingPUTAsync (GeneralSettingsUpdateSpec body);

        /// <summary>
        /// Updates the general settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">General settings object to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGeneralSettingsUsingPUTAsyncWithHttpInfo (GeneralSettingsUpdateSpec body);
        /// <summary>
        /// Updates instant clone domain account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Instant clone domain account object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateICDomainAccountAsync (InstantCloneDomainAccountUpdateSpec body, string id);

        /// <summary>
        /// Updates instant clone domain account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Instant clone domain account object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateICDomainAccountAsyncWithHttpInfo (InstantCloneDomainAccountUpdateSpec body, string id);
        /// <summary>
        /// Updates image management asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management asset object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateIMAssetAsync (ImageManagementAssetUpdateSpec body, string id);

        /// <summary>
        /// Updates image management asset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management asset object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIMAssetAsyncWithHttpInfo (ImageManagementAssetUpdateSpec body, string id);
        /// <summary>
        /// Updates image management stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management stream object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateIMStreamAsync (ImageManagementStreamUpdateSpec body, string id);

        /// <summary>
        /// Updates image management stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management stream object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIMStreamAsyncWithHttpInfo (ImageManagementStreamUpdateSpec body, string id);
        /// <summary>
        /// Updates image management tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management tag object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateIMTagAsync (ImageManagementTagUpdateSpec body, string id);

        /// <summary>
        /// Updates image management tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management tag object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIMTagAsyncWithHttpInfo (ImageManagementTagUpdateSpec body, string id);
        /// <summary>
        /// Updates image management version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management version object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateIMVersionAsync (ImageManagementVersionUpdateSpec body, string id);

        /// <summary>
        /// Updates image management version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management version object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIMVersionAsyncWithHttpInfo (ImageManagementVersionUpdateSpec body, string id);
        /// <summary>
        /// Updates the given RCX client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RCX client object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRCXClientAsync (RCXClientUpdateSpec body, string id);

        /// <summary>
        /// Updates the given RCX client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RCX client object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRCXClientAsyncWithHttpInfo (RCXClientUpdateSpec body, string id);
        /// <summary>
        /// Updates the security settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Security settings object to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSecuritySettingsUsingPUTAsync (SecuritySettingsUpdateSpec body);

        /// <summary>
        /// Updates the security settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Security settings object to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSecuritySettingsUsingPUTAsyncWithHttpInfo (SecuritySettingsUpdateSpec body);
        /// <summary>
        /// Updates the configuration settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Configuration settings object to be updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSettingsUsingPUTAsync (SettingsUpdateSpec body);

        /// <summary>
        /// Updates the configuration settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Configuration settings object to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSettingsUsingPUTAsyncWithHttpInfo (SettingsUpdateSpec body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConfigApi : IConfigApi
    {
        private VMware.Horizon.RESTAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigApi(String basePath)
        {
            this.Configuration = new VMware.Horizon.RESTAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = VMware.Horizon.RESTAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConfigApi(VMware.Horizon.RESTAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = VMware.Horizon.RESTAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VMware.Horizon.RESTAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VMware.Horizon.RESTAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VMware.Horizon.RESTAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates instant clone domain account. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Instant clone domain account object to be created.</param>
        /// <returns></returns>
        public void CreateICDomainAccount (InstantCloneDomainAccountCreateSpec body)
        {
             CreateICDomainAccountWithHttpInfo(body);
        }

        /// <summary>
        /// Creates instant clone domain account. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Instant clone domain account object to be created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateICDomainAccountWithHttpInfo (InstantCloneDomainAccountCreateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateICDomainAccount");

            var localVarPath = "./config/v1/ic-domain-accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateICDomainAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates instant clone domain account. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Instant clone domain account object to be created.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateICDomainAccountAsync (InstantCloneDomainAccountCreateSpec body)
        {
             await CreateICDomainAccountAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Creates instant clone domain account. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Instant clone domain account object to be created.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateICDomainAccountAsyncWithHttpInfo (InstantCloneDomainAccountCreateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateICDomainAccount");

            var localVarPath = "./config/v1/ic-domain-accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateICDomainAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates image management asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management asset object to be created.</param>
        /// <returns></returns>
        public void CreateIMAsset (ImageManagementAssetCreateSpec body)
        {
             CreateIMAssetWithHttpInfo(body);
        }

        /// <summary>
        /// Creates image management asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management asset object to be created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateIMAssetWithHttpInfo (ImageManagementAssetCreateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateIMAsset");

            var localVarPath = "./config/v1/im-assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIMAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates image management asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management asset object to be created.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateIMAssetAsync (ImageManagementAssetCreateSpec body)
        {
             await CreateIMAssetAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Creates image management asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management asset object to be created.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateIMAssetAsyncWithHttpInfo (ImageManagementAssetCreateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateIMAsset");

            var localVarPath = "./config/v1/im-assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIMAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates one or more image management assets. Each of the index of result in the response, correspond to the index of the original asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management asset object to be created in bulk.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> CreateIMAssets (List<ImageManagementAssetCreateSpec> body)
        {
             ApiResponse<List<BulkItemResponseInfo>> localVarResponse = CreateIMAssetsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more image management assets. Each of the index of result in the response, correspond to the index of the original asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management asset object to be created in bulk.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse< List<BulkItemResponseInfo> > CreateIMAssetsWithHttpInfo (List<ImageManagementAssetCreateSpec> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateIMAssets");

            var localVarPath = "./config/v1/im-assets/action/bulk-create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIMAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Creates one or more image management assets. Each of the index of result in the response, correspond to the index of the original asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management asset object to be created in bulk.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> CreateIMAssetsAsync (List<ImageManagementAssetCreateSpec> body)
        {
             ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await CreateIMAssetsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates one or more image management assets. Each of the index of result in the response, correspond to the index of the original asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management asset object to be created in bulk.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> CreateIMAssetsAsyncWithHttpInfo (List<ImageManagementAssetCreateSpec> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateIMAssets");

            var localVarPath = "./config/v1/im-assets/action/bulk-create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIMAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Creates image management stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management stream object to be created.</param>
        /// <returns></returns>
        public void CreateIMStream (ImageManagementStreamCreateSpec body)
        {
             CreateIMStreamWithHttpInfo(body);
        }

        /// <summary>
        /// Creates image management stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management stream object to be created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateIMStreamWithHttpInfo (ImageManagementStreamCreateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateIMStream");

            var localVarPath = "./config/v1/im-streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIMStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates image management stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management stream object to be created.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateIMStreamAsync (ImageManagementStreamCreateSpec body)
        {
             await CreateIMStreamAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Creates image management stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management stream object to be created.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateIMStreamAsyncWithHttpInfo (ImageManagementStreamCreateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateIMStream");

            var localVarPath = "./config/v1/im-streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIMStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates one or more image management streams. Each of the index of result in the response, correspond to the index of the original stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management stream object to be created in bulk.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> CreateIMStreams (List<ImageManagementStreamCreateSpec> body)
        {
             ApiResponse<List<BulkItemResponseInfo>> localVarResponse = CreateIMStreamsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more image management streams. Each of the index of result in the response, correspond to the index of the original stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management stream object to be created in bulk.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse< List<BulkItemResponseInfo> > CreateIMStreamsWithHttpInfo (List<ImageManagementStreamCreateSpec> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateIMStreams");

            var localVarPath = "./config/v1/im-streams/action/bulk-create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIMStreams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Creates one or more image management streams. Each of the index of result in the response, correspond to the index of the original stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management stream object to be created in bulk.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> CreateIMStreamsAsync (List<ImageManagementStreamCreateSpec> body)
        {
             ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await CreateIMStreamsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates one or more image management streams. Each of the index of result in the response, correspond to the index of the original stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management stream object to be created in bulk.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> CreateIMStreamsAsyncWithHttpInfo (List<ImageManagementStreamCreateSpec> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateIMStreams");

            var localVarPath = "./config/v1/im-streams/action/bulk-create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIMStreams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Creates image management tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management tag object to be created.</param>
        /// <returns></returns>
        public void CreateIMTag (ImageManagementTagCreateSpec body)
        {
             CreateIMTagWithHttpInfo(body);
        }

        /// <summary>
        /// Creates image management tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management tag object to be created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateIMTagWithHttpInfo (ImageManagementTagCreateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateIMTag");

            var localVarPath = "./config/v1/im-tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIMTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates image management tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management tag object to be created.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateIMTagAsync (ImageManagementTagCreateSpec body)
        {
             await CreateIMTagAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Creates image management tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management tag object to be created.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateIMTagAsyncWithHttpInfo (ImageManagementTagCreateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateIMTag");

            var localVarPath = "./config/v1/im-tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIMTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates one or more image management tags. Each of the index of result in the response, correspond to the index of the original tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management tag object to be created in bulk.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> CreateIMTags (List<ImageManagementTagCreateSpec> body)
        {
             ApiResponse<List<BulkItemResponseInfo>> localVarResponse = CreateIMTagsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more image management tags. Each of the index of result in the response, correspond to the index of the original tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management tag object to be created in bulk.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse< List<BulkItemResponseInfo> > CreateIMTagsWithHttpInfo (List<ImageManagementTagCreateSpec> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateIMTags");

            var localVarPath = "./config/v1/im-tags/action/bulk-create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIMTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Creates one or more image management tags. Each of the index of result in the response, correspond to the index of the original tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management tag object to be created in bulk.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> CreateIMTagsAsync (List<ImageManagementTagCreateSpec> body)
        {
             ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await CreateIMTagsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates one or more image management tags. Each of the index of result in the response, correspond to the index of the original tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management tag object to be created in bulk.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> CreateIMTagsAsyncWithHttpInfo (List<ImageManagementTagCreateSpec> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateIMTags");

            var localVarPath = "./config/v1/im-tags/action/bulk-create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIMTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Creates image management version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management version object to be created.</param>
        /// <returns></returns>
        public void CreateIMVersion (ImageManagementVersionCreateSpec body)
        {
             CreateIMVersionWithHttpInfo(body);
        }

        /// <summary>
        /// Creates image management version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management version object to be created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateIMVersionWithHttpInfo (ImageManagementVersionCreateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateIMVersion");

            var localVarPath = "./config/v1/im-versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIMVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates image management version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management version object to be created.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateIMVersionAsync (ImageManagementVersionCreateSpec body)
        {
             await CreateIMVersionAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Creates image management version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management version object to be created.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateIMVersionAsyncWithHttpInfo (ImageManagementVersionCreateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateIMVersion");

            var localVarPath = "./config/v1/im-versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIMVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates one or more image management versions. Each of the index of result in the response, correspond to the index of the original version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management version object to be created in bulk.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> CreateIMVersions (List<ImageManagementVersionCreateSpec> body)
        {
             ApiResponse<List<BulkItemResponseInfo>> localVarResponse = CreateIMVersionsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more image management versions. Each of the index of result in the response, correspond to the index of the original version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management version object to be created in bulk.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse< List<BulkItemResponseInfo> > CreateIMVersionsWithHttpInfo (List<ImageManagementVersionCreateSpec> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateIMVersions");

            var localVarPath = "./config/v1/im-versions/action/bulk-create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIMVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Creates one or more image management versions. Each of the index of result in the response, correspond to the index of the original version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management version object to be created in bulk.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> CreateIMVersionsAsync (List<ImageManagementVersionCreateSpec> body)
        {
             ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await CreateIMVersionsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates one or more image management versions. Each of the index of result in the response, correspond to the index of the original version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Image management version object to be created in bulk.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> CreateIMVersionsAsyncWithHttpInfo (List<ImageManagementVersionCreateSpec> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->CreateIMVersions");

            var localVarPath = "./config/v1/im-versions/action/bulk-create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIMVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Deletes instant clone domain account. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void DeleteICDomainAccount (string id)
        {
             DeleteICDomainAccountWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes instant clone domain account. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteICDomainAccountWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->DeleteICDomainAccount");

            var localVarPath = "./config/v1/ic-domain-accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteICDomainAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes instant clone domain account. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteICDomainAccountAsync (string id)
        {
             await DeleteICDomainAccountAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes instant clone domain account. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteICDomainAccountAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->DeleteICDomainAccount");

            var localVarPath = "./config/v1/ic-domain-accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteICDomainAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes image management asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void DeleteIMAsset (string id)
        {
             DeleteIMAssetWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes image management asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteIMAssetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->DeleteIMAsset");

            var localVarPath = "./config/v1/im-assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIMAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes image management asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIMAssetAsync (string id)
        {
             await DeleteIMAssetAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes image management asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIMAssetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->DeleteIMAsset");

            var localVarPath = "./config/v1/im-assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIMAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes image management stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void DeleteIMStream (string id)
        {
             DeleteIMStreamWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes image management stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteIMStreamWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->DeleteIMStream");

            var localVarPath = "./config/v1/im-streams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIMStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes image management stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIMStreamAsync (string id)
        {
             await DeleteIMStreamAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes image management stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIMStreamAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->DeleteIMStream");

            var localVarPath = "./config/v1/im-streams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIMStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes image management tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void DeleteIMTag (string id)
        {
             DeleteIMTagWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes image management tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteIMTagWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->DeleteIMTag");

            var localVarPath = "./config/v1/im-tags/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIMTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes image management tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIMTagAsync (string id)
        {
             await DeleteIMTagAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes image management tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIMTagAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->DeleteIMTag");

            var localVarPath = "./config/v1/im-tags/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIMTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes image management version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void DeleteIMVersion (string id)
        {
             DeleteIMVersionWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes image management version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteIMVersionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->DeleteIMVersion");

            var localVarPath = "./config/v1/im-versions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIMVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes image management version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIMVersionAsync (string id)
        {
             await DeleteIMVersionAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes image management version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIMVersionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->DeleteIMVersion");

            var localVarPath = "./config/v1/im-versions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIMVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieves the environment settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EnvironmentInfo</returns>
        public EnvironmentInfo GetEnvironmentUsingGET ()
        {
             ApiResponse<EnvironmentInfo> localVarResponse = GetEnvironmentUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the environment settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EnvironmentInfo</returns>
        public ApiResponse< EnvironmentInfo > GetEnvironmentUsingGETWithHttpInfo ()
        {

            var localVarPath = "./config/v1/environment-properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnvironmentUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvironmentInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EnvironmentInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvironmentInfo)));
        }

        /// <summary>
        /// Retrieves the environment settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EnvironmentInfo</returns>
        public async System.Threading.Tasks.Task<EnvironmentInfo> GetEnvironmentUsingGETAsync ()
        {
             ApiResponse<EnvironmentInfo> localVarResponse = await GetEnvironmentUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the environment settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EnvironmentInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvironmentInfo>> GetEnvironmentUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "./config/v1/environment-properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnvironmentUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvironmentInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EnvironmentInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvironmentInfo)));
        }

        /// <summary>
        /// Retrieves the feature settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>FeatureSettings</returns>
        public FeatureSettings GetFeatureSettingsUsingGET ()
        {
             ApiResponse<FeatureSettings> localVarResponse = GetFeatureSettingsUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the feature settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of FeatureSettings</returns>
        public ApiResponse< FeatureSettings > GetFeatureSettingsUsingGETWithHttpInfo ()
        {

            var localVarPath = "./config/v1/settings/feature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureSettingsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FeatureSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureSettings)));
        }

        /// <summary>
        /// Retrieves the feature settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of FeatureSettings</returns>
        public async System.Threading.Tasks.Task<FeatureSettings> GetFeatureSettingsUsingGETAsync ()
        {
             ApiResponse<FeatureSettings> localVarResponse = await GetFeatureSettingsUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the feature settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (FeatureSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureSettings>> GetFeatureSettingsUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "./config/v1/settings/feature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureSettingsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FeatureSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureSettings)));
        }

        /// <summary>
        /// Retrieves the general settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GeneralSettings</returns>
        public GeneralSettings GetGeneralSettingsUsingGET ()
        {
             ApiResponse<GeneralSettings> localVarResponse = GetGeneralSettingsUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the general settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GeneralSettings</returns>
        public ApiResponse< GeneralSettings > GetGeneralSettingsUsingGETWithHttpInfo ()
        {

            var localVarPath = "./config/v1/settings/general";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGeneralSettingsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeneralSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GeneralSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeneralSettings)));
        }

        /// <summary>
        /// Retrieves the general settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GeneralSettings</returns>
        public async System.Threading.Tasks.Task<GeneralSettings> GetGeneralSettingsUsingGETAsync ()
        {
             ApiResponse<GeneralSettings> localVarResponse = await GetGeneralSettingsUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the general settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GeneralSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeneralSettings>> GetGeneralSettingsUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "./config/v1/settings/general";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGeneralSettingsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeneralSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GeneralSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeneralSettings)));
        }

        /// <summary>
        /// Gets instant clone domain account. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>InstantCloneDomainAccountInfo</returns>
        public InstantCloneDomainAccountInfo GetICDomainAccount (string id)
        {
             ApiResponse<InstantCloneDomainAccountInfo> localVarResponse = GetICDomainAccountWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets instant clone domain account. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of InstantCloneDomainAccountInfo</returns>
        public ApiResponse< InstantCloneDomainAccountInfo > GetICDomainAccountWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->GetICDomainAccount");

            var localVarPath = "./config/v1/ic-domain-accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetICDomainAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstantCloneDomainAccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InstantCloneDomainAccountInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstantCloneDomainAccountInfo)));
        }

        /// <summary>
        /// Gets instant clone domain account. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of InstantCloneDomainAccountInfo</returns>
        public async System.Threading.Tasks.Task<InstantCloneDomainAccountInfo> GetICDomainAccountAsync (string id)
        {
             ApiResponse<InstantCloneDomainAccountInfo> localVarResponse = await GetICDomainAccountAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets instant clone domain account. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (InstantCloneDomainAccountInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstantCloneDomainAccountInfo>> GetICDomainAccountAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->GetICDomainAccount");

            var localVarPath = "./config/v1/ic-domain-accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetICDomainAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstantCloneDomainAccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InstantCloneDomainAccountInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstantCloneDomainAccountInfo)));
        }

        /// <summary>
        /// Gets image management asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ImageManagementAssetInfo</returns>
        public ImageManagementAssetInfo GetIMAsset (string id)
        {
             ApiResponse<ImageManagementAssetInfo> localVarResponse = GetIMAssetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets image management asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ImageManagementAssetInfo</returns>
        public ApiResponse< ImageManagementAssetInfo > GetIMAssetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->GetIMAsset");

            var localVarPath = "./config/v1/im-assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIMAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageManagementAssetInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ImageManagementAssetInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageManagementAssetInfo)));
        }

        /// <summary>
        /// Gets image management asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ImageManagementAssetInfo</returns>
        public async System.Threading.Tasks.Task<ImageManagementAssetInfo> GetIMAssetAsync (string id)
        {
             ApiResponse<ImageManagementAssetInfo> localVarResponse = await GetIMAssetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets image management asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ImageManagementAssetInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageManagementAssetInfo>> GetIMAssetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->GetIMAsset");

            var localVarPath = "./config/v1/im-assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIMAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageManagementAssetInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ImageManagementAssetInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageManagementAssetInfo)));
        }

        /// <summary>
        /// Gets image management stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ImageManagementStreamInfo</returns>
        public ImageManagementStreamInfo GetIMStream (string id)
        {
             ApiResponse<ImageManagementStreamInfo> localVarResponse = GetIMStreamWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets image management stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ImageManagementStreamInfo</returns>
        public ApiResponse< ImageManagementStreamInfo > GetIMStreamWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->GetIMStream");

            var localVarPath = "./config/v1/im-streams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIMStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageManagementStreamInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ImageManagementStreamInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageManagementStreamInfo)));
        }

        /// <summary>
        /// Gets image management stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ImageManagementStreamInfo</returns>
        public async System.Threading.Tasks.Task<ImageManagementStreamInfo> GetIMStreamAsync (string id)
        {
             ApiResponse<ImageManagementStreamInfo> localVarResponse = await GetIMStreamAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets image management stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ImageManagementStreamInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageManagementStreamInfo>> GetIMStreamAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->GetIMStream");

            var localVarPath = "./config/v1/im-streams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIMStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageManagementStreamInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ImageManagementStreamInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageManagementStreamInfo)));
        }

        /// <summary>
        /// Gets image management tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ImageManagementTagInfo</returns>
        public ImageManagementTagInfo GetIMTag (string id)
        {
             ApiResponse<ImageManagementTagInfo> localVarResponse = GetIMTagWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets image management tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ImageManagementTagInfo</returns>
        public ApiResponse< ImageManagementTagInfo > GetIMTagWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->GetIMTag");

            var localVarPath = "./config/v1/im-tags/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIMTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageManagementTagInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ImageManagementTagInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageManagementTagInfo)));
        }

        /// <summary>
        /// Gets image management tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ImageManagementTagInfo</returns>
        public async System.Threading.Tasks.Task<ImageManagementTagInfo> GetIMTagAsync (string id)
        {
             ApiResponse<ImageManagementTagInfo> localVarResponse = await GetIMTagAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets image management tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ImageManagementTagInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageManagementTagInfo>> GetIMTagAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->GetIMTag");

            var localVarPath = "./config/v1/im-tags/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIMTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageManagementTagInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ImageManagementTagInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageManagementTagInfo)));
        }

        /// <summary>
        /// Gets image management version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ImageManagementVersionInfo</returns>
        public ImageManagementVersionInfo GetIMVersion (string id)
        {
             ApiResponse<ImageManagementVersionInfo> localVarResponse = GetIMVersionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets image management version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ImageManagementVersionInfo</returns>
        public ApiResponse< ImageManagementVersionInfo > GetIMVersionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->GetIMVersion");

            var localVarPath = "./config/v1/im-versions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIMVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageManagementVersionInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ImageManagementVersionInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageManagementVersionInfo)));
        }

        /// <summary>
        /// Gets image management version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ImageManagementVersionInfo</returns>
        public async System.Threading.Tasks.Task<ImageManagementVersionInfo> GetIMVersionAsync (string id)
        {
             ApiResponse<ImageManagementVersionInfo> localVarResponse = await GetIMVersionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets image management version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ImageManagementVersionInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageManagementVersionInfo>> GetIMVersionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->GetIMVersion");

            var localVarPath = "./config/v1/im-versions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIMVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageManagementVersionInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ImageManagementVersionInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageManagementVersionInfo)));
        }

        /// <summary>
        /// Retrieves the security settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SecuritySettings</returns>
        public SecuritySettings GetSecuritySettingsUsingGET ()
        {
             ApiResponse<SecuritySettings> localVarResponse = GetSecuritySettingsUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the security settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SecuritySettings</returns>
        public ApiResponse< SecuritySettings > GetSecuritySettingsUsingGETWithHttpInfo ()
        {

            var localVarPath = "./config/v1/settings/security";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecuritySettingsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecuritySettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SecuritySettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecuritySettings)));
        }

        /// <summary>
        /// Retrieves the security settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SecuritySettings</returns>
        public async System.Threading.Tasks.Task<SecuritySettings> GetSecuritySettingsUsingGETAsync ()
        {
             ApiResponse<SecuritySettings> localVarResponse = await GetSecuritySettingsUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the security settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SecuritySettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecuritySettings>> GetSecuritySettingsUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "./config/v1/settings/security";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecuritySettingsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecuritySettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SecuritySettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecuritySettings)));
        }

        /// <summary>
        /// Retrieves the configuration settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SettingsInfo</returns>
        public SettingsInfo GetSettingsUsingGET ()
        {
             ApiResponse<SettingsInfo> localVarResponse = GetSettingsUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the configuration settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SettingsInfo</returns>
        public ApiResponse< SettingsInfo > GetSettingsUsingGETWithHttpInfo ()
        {

            var localVarPath = "./config/v1/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettingsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingsInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SettingsInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingsInfo)));
        }

        /// <summary>
        /// Retrieves the configuration settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SettingsInfo</returns>
        public async System.Threading.Tasks.Task<SettingsInfo> GetSettingsUsingGETAsync ()
        {
             ApiResponse<SettingsInfo> localVarResponse = await GetSettingsUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the configuration settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SettingsInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SettingsInfo>> GetSettingsUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "./config/v1/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettingsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingsInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SettingsInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingsInfo)));
        }

        /// <summary>
        /// Lists instant clone domain accounts of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InstantCloneDomainAccountInfo&gt;</returns>
        public List<InstantCloneDomainAccountInfo> ListICDomainAccounts ()
        {
             ApiResponse<List<InstantCloneDomainAccountInfo>> localVarResponse = ListICDomainAccountsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists instant clone domain accounts of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InstantCloneDomainAccountInfo&gt;</returns>
        public ApiResponse< List<InstantCloneDomainAccountInfo> > ListICDomainAccountsWithHttpInfo ()
        {

            var localVarPath = "./config/v1/ic-domain-accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListICDomainAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InstantCloneDomainAccountInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<InstantCloneDomainAccountInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InstantCloneDomainAccountInfo>)));
        }

        /// <summary>
        /// Lists instant clone domain accounts of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InstantCloneDomainAccountInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<InstantCloneDomainAccountInfo>> ListICDomainAccountsAsync ()
        {
             ApiResponse<List<InstantCloneDomainAccountInfo>> localVarResponse = await ListICDomainAccountsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists instant clone domain accounts of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InstantCloneDomainAccountInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InstantCloneDomainAccountInfo>>> ListICDomainAccountsAsyncWithHttpInfo ()
        {

            var localVarPath = "./config/v1/ic-domain-accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListICDomainAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InstantCloneDomainAccountInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<InstantCloneDomainAccountInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InstantCloneDomainAccountInfo>)));
        }

        /// <summary>
        /// Lists image management assets. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imVersionId">Image management version ID</param>
        /// <returns>List&lt;ImageManagementAssetInfo&gt;</returns>
        public List<ImageManagementAssetInfo> ListIMAssets (string imVersionId)
        {
             ApiResponse<List<ImageManagementAssetInfo>> localVarResponse = ListIMAssetsWithHttpInfo(imVersionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists image management assets. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imVersionId">Image management version ID</param>
        /// <returns>ApiResponse of List&lt;ImageManagementAssetInfo&gt;</returns>
        public ApiResponse< List<ImageManagementAssetInfo> > ListIMAssetsWithHttpInfo (string imVersionId)
        {
            // verify the required parameter 'imVersionId' is set
            if (imVersionId == null)
                throw new ApiException(400, "Missing required parameter 'imVersionId' when calling ConfigApi->ListIMAssets");

            var localVarPath = "./config/v1/im-assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imVersionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "im_version_id", imVersionId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIMAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageManagementAssetInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ImageManagementAssetInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageManagementAssetInfo>)));
        }

        /// <summary>
        /// Lists image management assets. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imVersionId">Image management version ID</param>
        /// <returns>Task of List&lt;ImageManagementAssetInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ImageManagementAssetInfo>> ListIMAssetsAsync (string imVersionId)
        {
             ApiResponse<List<ImageManagementAssetInfo>> localVarResponse = await ListIMAssetsAsyncWithHttpInfo(imVersionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists image management assets. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imVersionId">Image management version ID</param>
        /// <returns>Task of ApiResponse (List&lt;ImageManagementAssetInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ImageManagementAssetInfo>>> ListIMAssetsAsyncWithHttpInfo (string imVersionId)
        {
            // verify the required parameter 'imVersionId' is set
            if (imVersionId == null)
                throw new ApiException(400, "Missing required parameter 'imVersionId' when calling ConfigApi->ListIMAssets");

            var localVarPath = "./config/v1/im-assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imVersionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "im_version_id", imVersionId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIMAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageManagementAssetInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ImageManagementAssetInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageManagementAssetInfo>)));
        }

        /// <summary>
        /// Lists image management streams. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ImageManagementStreamInfo&gt;</returns>
        public List<ImageManagementStreamInfo> ListIMStreams ()
        {
             ApiResponse<List<ImageManagementStreamInfo>> localVarResponse = ListIMStreamsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists image management streams. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ImageManagementStreamInfo&gt;</returns>
        public ApiResponse< List<ImageManagementStreamInfo> > ListIMStreamsWithHttpInfo ()
        {

            var localVarPath = "./config/v1/im-streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIMStreams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageManagementStreamInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ImageManagementStreamInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageManagementStreamInfo>)));
        }

        /// <summary>
        /// Lists image management streams. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ImageManagementStreamInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ImageManagementStreamInfo>> ListIMStreamsAsync ()
        {
             ApiResponse<List<ImageManagementStreamInfo>> localVarResponse = await ListIMStreamsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists image management streams. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ImageManagementStreamInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ImageManagementStreamInfo>>> ListIMStreamsAsyncWithHttpInfo ()
        {

            var localVarPath = "./config/v1/im-streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIMStreams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageManagementStreamInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ImageManagementStreamInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageManagementStreamInfo>)));
        }

        /// <summary>
        /// Lists image management tags. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imStreamId">Image management stream ID</param>
        /// <returns>List&lt;ImageManagementTagInfo&gt;</returns>
        public List<ImageManagementTagInfo> ListIMTags (string imStreamId)
        {
             ApiResponse<List<ImageManagementTagInfo>> localVarResponse = ListIMTagsWithHttpInfo(imStreamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists image management tags. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imStreamId">Image management stream ID</param>
        /// <returns>ApiResponse of List&lt;ImageManagementTagInfo&gt;</returns>
        public ApiResponse< List<ImageManagementTagInfo> > ListIMTagsWithHttpInfo (string imStreamId)
        {
            // verify the required parameter 'imStreamId' is set
            if (imStreamId == null)
                throw new ApiException(400, "Missing required parameter 'imStreamId' when calling ConfigApi->ListIMTags");

            var localVarPath = "./config/v1/im-tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "im_stream_id", imStreamId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIMTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageManagementTagInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ImageManagementTagInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageManagementTagInfo>)));
        }

        /// <summary>
        /// Lists image management tags. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imStreamId">Image management stream ID</param>
        /// <returns>Task of List&lt;ImageManagementTagInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ImageManagementTagInfo>> ListIMTagsAsync (string imStreamId)
        {
             ApiResponse<List<ImageManagementTagInfo>> localVarResponse = await ListIMTagsAsyncWithHttpInfo(imStreamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists image management tags. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imStreamId">Image management stream ID</param>
        /// <returns>Task of ApiResponse (List&lt;ImageManagementTagInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ImageManagementTagInfo>>> ListIMTagsAsyncWithHttpInfo (string imStreamId)
        {
            // verify the required parameter 'imStreamId' is set
            if (imStreamId == null)
                throw new ApiException(400, "Missing required parameter 'imStreamId' when calling ConfigApi->ListIMTags");

            var localVarPath = "./config/v1/im-tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "im_stream_id", imStreamId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIMTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageManagementTagInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ImageManagementTagInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageManagementTagInfo>)));
        }

        /// <summary>
        /// Lists image management versions. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imStreamId">Image management stream ID</param>
        /// <returns>List&lt;ImageManagementVersionInfo&gt;</returns>
        public List<ImageManagementVersionInfo> ListIMVersions (string imStreamId)
        {
             ApiResponse<List<ImageManagementVersionInfo>> localVarResponse = ListIMVersionsWithHttpInfo(imStreamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists image management versions. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imStreamId">Image management stream ID</param>
        /// <returns>ApiResponse of List&lt;ImageManagementVersionInfo&gt;</returns>
        public ApiResponse< List<ImageManagementVersionInfo> > ListIMVersionsWithHttpInfo (string imStreamId)
        {
            // verify the required parameter 'imStreamId' is set
            if (imStreamId == null)
                throw new ApiException(400, "Missing required parameter 'imStreamId' when calling ConfigApi->ListIMVersions");

            var localVarPath = "./config/v1/im-versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "im_stream_id", imStreamId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIMVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageManagementVersionInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ImageManagementVersionInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageManagementVersionInfo>)));
        }

        /// <summary>
        /// Lists image management versions. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imStreamId">Image management stream ID</param>
        /// <returns>Task of List&lt;ImageManagementVersionInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ImageManagementVersionInfo>> ListIMVersionsAsync (string imStreamId)
        {
             ApiResponse<List<ImageManagementVersionInfo>> localVarResponse = await ListIMVersionsAsyncWithHttpInfo(imStreamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists image management versions. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imStreamId">Image management stream ID</param>
        /// <returns>Task of ApiResponse (List&lt;ImageManagementVersionInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ImageManagementVersionInfo>>> ListIMVersionsAsyncWithHttpInfo (string imStreamId)
        {
            // verify the required parameter 'imStreamId' is set
            if (imStreamId == null)
                throw new ApiException(400, "Missing required parameter 'imStreamId' when calling ConfigApi->ListIMVersions");

            var localVarPath = "./config/v1/im-versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imStreamId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "im_stream_id", imStreamId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIMVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageManagementVersionInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ImageManagementVersionInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageManagementVersionInfo>)));
        }

        /// <summary>
        /// Lists RCX servers of the cluster. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RCXServerInfo&gt;</returns>
        public List<RCXServerInfo> ListRCXServers ()
        {
             ApiResponse<List<RCXServerInfo>> localVarResponse = ListRCXServersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists RCX servers of the cluster. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RCXServerInfo&gt;</returns>
        public ApiResponse< List<RCXServerInfo> > ListRCXServersWithHttpInfo ()
        {

            var localVarPath = "./config/v1/rcx/servers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRCXServers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RCXServerInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<RCXServerInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RCXServerInfo>)));
        }

        /// <summary>
        /// Lists RCX servers of the cluster. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RCXServerInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<RCXServerInfo>> ListRCXServersAsync ()
        {
             ApiResponse<List<RCXServerInfo>> localVarResponse = await ListRCXServersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists RCX servers of the cluster. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RCXServerInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RCXServerInfo>>> ListRCXServersAsyncWithHttpInfo ()
        {

            var localVarPath = "./config/v1/rcx/servers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRCXServers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RCXServerInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<RCXServerInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RCXServerInfo>)));
        }

        /// <summary>
        /// Lists Virtual Centers configured in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;VirtualCenterInfo&gt;</returns>
        public List<VirtualCenterInfo> ListVCInfo ()
        {
             ApiResponse<List<VirtualCenterInfo>> localVarResponse = ListVCInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists Virtual Centers configured in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;VirtualCenterInfo&gt;</returns>
        public ApiResponse< List<VirtualCenterInfo> > ListVCInfoWithHttpInfo ()
        {

            var localVarPath = "./config/v1/virtual-centers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListVCInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VirtualCenterInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<VirtualCenterInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VirtualCenterInfo>)));
        }

        /// <summary>
        /// Lists Virtual Centers configured in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;VirtualCenterInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<VirtualCenterInfo>> ListVCInfoAsync ()
        {
             ApiResponse<List<VirtualCenterInfo>> localVarResponse = await ListVCInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists Virtual Centers configured in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;VirtualCenterInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VirtualCenterInfo>>> ListVCInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "./config/v1/virtual-centers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListVCInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VirtualCenterInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<VirtualCenterInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VirtualCenterInfo>)));
        }

        /// <summary>
        /// Registers the RCX client 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RCX client object to be registered.</param>
        /// <returns></returns>
        public void RegisterRCXClient (RCXClientRegisterSpec body)
        {
             RegisterRCXClientWithHttpInfo(body);
        }

        /// <summary>
        /// Registers the RCX client 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RCX client object to be registered.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RegisterRCXClientWithHttpInfo (RCXClientRegisterSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->RegisterRCXClient");

            var localVarPath = "./config/v1/rcx/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterRCXClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Registers the RCX client 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RCX client object to be registered.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegisterRCXClientAsync (RCXClientRegisterSpec body)
        {
             await RegisterRCXClientAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Registers the RCX client 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RCX client object to be registered.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RegisterRCXClientAsyncWithHttpInfo (RCXClientRegisterSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->RegisterRCXClient");

            var localVarPath = "./config/v1/rcx/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterRCXClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unregisters the given RCX Client 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void UnregisterRCXClient (string id)
        {
             UnregisterRCXClientWithHttpInfo(id);
        }

        /// <summary>
        /// Unregisters the given RCX Client 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnregisterRCXClientWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->UnregisterRCXClient");

            var localVarPath = "./config/v1/rcx/clients/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnregisterRCXClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unregisters the given RCX Client 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnregisterRCXClientAsync (string id)
        {
             await UnregisterRCXClientAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Unregisters the given RCX Client 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnregisterRCXClientAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->UnregisterRCXClient");

            var localVarPath = "./config/v1/rcx/clients/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnregisterRCXClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the feature settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Feature settings object to be updated.</param>
        /// <returns></returns>
        public void UpdateFeatureSettingsUsingPUT (FeatureSettingsUpdateSpec body)
        {
             UpdateFeatureSettingsUsingPUTWithHttpInfo(body);
        }

        /// <summary>
        /// Updates the feature settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Feature settings object to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateFeatureSettingsUsingPUTWithHttpInfo (FeatureSettingsUpdateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateFeatureSettingsUsingPUT");

            var localVarPath = "./config/v1/settings/feature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFeatureSettingsUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the feature settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Feature settings object to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateFeatureSettingsUsingPUTAsync (FeatureSettingsUpdateSpec body)
        {
             await UpdateFeatureSettingsUsingPUTAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Updates the feature settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Feature settings object to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFeatureSettingsUsingPUTAsyncWithHttpInfo (FeatureSettingsUpdateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateFeatureSettingsUsingPUT");

            var localVarPath = "./config/v1/settings/feature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFeatureSettingsUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the general settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">General settings object to be updated.</param>
        /// <returns></returns>
        public void UpdateGeneralSettingsUsingPUT (GeneralSettingsUpdateSpec body)
        {
             UpdateGeneralSettingsUsingPUTWithHttpInfo(body);
        }

        /// <summary>
        /// Updates the general settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">General settings object to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateGeneralSettingsUsingPUTWithHttpInfo (GeneralSettingsUpdateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateGeneralSettingsUsingPUT");

            var localVarPath = "./config/v1/settings/general";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGeneralSettingsUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the general settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">General settings object to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateGeneralSettingsUsingPUTAsync (GeneralSettingsUpdateSpec body)
        {
             await UpdateGeneralSettingsUsingPUTAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Updates the general settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">General settings object to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGeneralSettingsUsingPUTAsyncWithHttpInfo (GeneralSettingsUpdateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateGeneralSettingsUsingPUT");

            var localVarPath = "./config/v1/settings/general";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGeneralSettingsUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates instant clone domain account. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Instant clone domain account object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void UpdateICDomainAccount (InstantCloneDomainAccountUpdateSpec body, string id)
        {
             UpdateICDomainAccountWithHttpInfo(body, id);
        }

        /// <summary>
        /// Updates instant clone domain account. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Instant clone domain account object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateICDomainAccountWithHttpInfo (InstantCloneDomainAccountUpdateSpec body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateICDomainAccount");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->UpdateICDomainAccount");

            var localVarPath = "./config/v1/ic-domain-accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateICDomainAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates instant clone domain account. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Instant clone domain account object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateICDomainAccountAsync (InstantCloneDomainAccountUpdateSpec body, string id)
        {
             await UpdateICDomainAccountAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Updates instant clone domain account. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Instant clone domain account object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateICDomainAccountAsyncWithHttpInfo (InstantCloneDomainAccountUpdateSpec body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateICDomainAccount");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->UpdateICDomainAccount");

            var localVarPath = "./config/v1/ic-domain-accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateICDomainAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates image management asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management asset object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void UpdateIMAsset (ImageManagementAssetUpdateSpec body, string id)
        {
             UpdateIMAssetWithHttpInfo(body, id);
        }

        /// <summary>
        /// Updates image management asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management asset object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateIMAssetWithHttpInfo (ImageManagementAssetUpdateSpec body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateIMAsset");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->UpdateIMAsset");

            var localVarPath = "./config/v1/im-assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIMAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates image management asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management asset object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateIMAssetAsync (ImageManagementAssetUpdateSpec body, string id)
        {
             await UpdateIMAssetAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Updates image management asset. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management asset object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIMAssetAsyncWithHttpInfo (ImageManagementAssetUpdateSpec body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateIMAsset");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->UpdateIMAsset");

            var localVarPath = "./config/v1/im-assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIMAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates image management stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management stream object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void UpdateIMStream (ImageManagementStreamUpdateSpec body, string id)
        {
             UpdateIMStreamWithHttpInfo(body, id);
        }

        /// <summary>
        /// Updates image management stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management stream object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateIMStreamWithHttpInfo (ImageManagementStreamUpdateSpec body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateIMStream");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->UpdateIMStream");

            var localVarPath = "./config/v1/im-streams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIMStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates image management stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management stream object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateIMStreamAsync (ImageManagementStreamUpdateSpec body, string id)
        {
             await UpdateIMStreamAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Updates image management stream. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management stream object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIMStreamAsyncWithHttpInfo (ImageManagementStreamUpdateSpec body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateIMStream");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->UpdateIMStream");

            var localVarPath = "./config/v1/im-streams/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIMStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates image management tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management tag object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void UpdateIMTag (ImageManagementTagUpdateSpec body, string id)
        {
             UpdateIMTagWithHttpInfo(body, id);
        }

        /// <summary>
        /// Updates image management tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management tag object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateIMTagWithHttpInfo (ImageManagementTagUpdateSpec body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateIMTag");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->UpdateIMTag");

            var localVarPath = "./config/v1/im-tags/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIMTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates image management tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management tag object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateIMTagAsync (ImageManagementTagUpdateSpec body, string id)
        {
             await UpdateIMTagAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Updates image management tag. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management tag object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIMTagAsyncWithHttpInfo (ImageManagementTagUpdateSpec body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateIMTag");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->UpdateIMTag");

            var localVarPath = "./config/v1/im-tags/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIMTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates image management version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management version object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void UpdateIMVersion (ImageManagementVersionUpdateSpec body, string id)
        {
             UpdateIMVersionWithHttpInfo(body, id);
        }

        /// <summary>
        /// Updates image management version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management version object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateIMVersionWithHttpInfo (ImageManagementVersionUpdateSpec body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateIMVersion");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->UpdateIMVersion");

            var localVarPath = "./config/v1/im-versions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIMVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates image management version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management version object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateIMVersionAsync (ImageManagementVersionUpdateSpec body, string id)
        {
             await UpdateIMVersionAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Updates image management version. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image management version object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIMVersionAsyncWithHttpInfo (ImageManagementVersionUpdateSpec body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateIMVersion");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->UpdateIMVersion");

            var localVarPath = "./config/v1/im-versions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIMVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the given RCX client. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RCX client object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void UpdateRCXClient (RCXClientUpdateSpec body, string id)
        {
             UpdateRCXClientWithHttpInfo(body, id);
        }

        /// <summary>
        /// Updates the given RCX client. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RCX client object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRCXClientWithHttpInfo (RCXClientUpdateSpec body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateRCXClient");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->UpdateRCXClient");

            var localVarPath = "./config/v1/rcx/clients/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRCXClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the given RCX client. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RCX client object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRCXClientAsync (RCXClientUpdateSpec body, string id)
        {
             await UpdateRCXClientAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Updates the given RCX client. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RCX client object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRCXClientAsyncWithHttpInfo (RCXClientUpdateSpec body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateRCXClient");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigApi->UpdateRCXClient");

            var localVarPath = "./config/v1/rcx/clients/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRCXClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the security settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Security settings object to be updated.</param>
        /// <returns></returns>
        public void UpdateSecuritySettingsUsingPUT (SecuritySettingsUpdateSpec body)
        {
             UpdateSecuritySettingsUsingPUTWithHttpInfo(body);
        }

        /// <summary>
        /// Updates the security settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Security settings object to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSecuritySettingsUsingPUTWithHttpInfo (SecuritySettingsUpdateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateSecuritySettingsUsingPUT");

            var localVarPath = "./config/v1/settings/security";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSecuritySettingsUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the security settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Security settings object to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSecuritySettingsUsingPUTAsync (SecuritySettingsUpdateSpec body)
        {
             await UpdateSecuritySettingsUsingPUTAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Updates the security settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Security settings object to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSecuritySettingsUsingPUTAsyncWithHttpInfo (SecuritySettingsUpdateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateSecuritySettingsUsingPUT");

            var localVarPath = "./config/v1/settings/security";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSecuritySettingsUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the configuration settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Configuration settings object to be updated.</param>
        /// <returns></returns>
        public void UpdateSettingsUsingPUT (SettingsUpdateSpec body)
        {
             UpdateSettingsUsingPUTWithHttpInfo(body);
        }

        /// <summary>
        /// Updates the configuration settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Configuration settings object to be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSettingsUsingPUTWithHttpInfo (SettingsUpdateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateSettingsUsingPUT");

            var localVarPath = "./config/v1/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSettingsUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the configuration settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Configuration settings object to be updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSettingsUsingPUTAsync (SettingsUpdateSpec body)
        {
             await UpdateSettingsUsingPUTAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Updates the configuration settings. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Configuration settings object to be updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSettingsUsingPUTAsyncWithHttpInfo (SettingsUpdateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConfigApi->UpdateSettingsUsingPUT");

            var localVarPath = "./config/v1/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSettingsUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
