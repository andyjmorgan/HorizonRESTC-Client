/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using VMware.Horizon.RESTAPI.Client;
using VMware.Horizon.RESTAPI.Model;

namespace VMware.Horizon.RESTAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntitlementsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create the bulk entitlements for a set of application pools
        /// </summary>
        /// <remarks>
        /// The input spec must not contain duplicate Ids.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk application entitlements to be created.</param>
        /// <returns>List&lt;BulkEntitlementResponseInfo&gt;</returns>
        List<BulkEntitlementResponseInfo> BulkCreateApplicationPoolEntitlements(List<EntitlementSpec> body);

        /// <summary>
        /// Create the bulk entitlements for a set of application pools
        /// </summary>
        /// <remarks>
        /// The input spec must not contain duplicate Ids.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk application entitlements to be created.</param>
        /// <returns>ApiResponse of List&lt;BulkEntitlementResponseInfo&gt;</returns>
        ApiResponse<List<BulkEntitlementResponseInfo>> BulkCreateApplicationPoolEntitlementsWithHttpInfo(List<EntitlementSpec> body);
        /// <summary>
        /// Create the bulk entitlements for a set of desktop pools
        /// </summary>
        /// <remarks>
        /// The input spec must not contain duplicate Ids.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk desktop entitlements to be created.</param>
        /// <returns>List&lt;BulkEntitlementResponseInfo&gt;</returns>
        List<BulkEntitlementResponseInfo> BulkCreateDesktopPoolEntitlements(List<EntitlementSpec> body);

        /// <summary>
        /// Create the bulk entitlements for a set of desktop pools
        /// </summary>
        /// <remarks>
        /// The input spec must not contain duplicate Ids.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk desktop entitlements to be created.</param>
        /// <returns>ApiResponse of List&lt;BulkEntitlementResponseInfo&gt;</returns>
        ApiResponse<List<BulkEntitlementResponseInfo>> BulkCreateDesktopPoolEntitlementsWithHttpInfo(List<EntitlementSpec> body);
        /// <summary>
        /// Delete the bulk entitlements for a set of application pools
        /// </summary>
        /// <remarks>
        /// The input spec must not contain duplicate Ids.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk application entitlements to be deleted.</param>
        /// <returns>List&lt;BulkEntitlementResponseInfo&gt;</returns>
        List<BulkEntitlementResponseInfo> BulkDeleteApplicationPoolEntitlements(List<EntitlementSpec> body);

        /// <summary>
        /// Delete the bulk entitlements for a set of application pools
        /// </summary>
        /// <remarks>
        /// The input spec must not contain duplicate Ids.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk application entitlements to be deleted.</param>
        /// <returns>ApiResponse of List&lt;BulkEntitlementResponseInfo&gt;</returns>
        ApiResponse<List<BulkEntitlementResponseInfo>> BulkDeleteApplicationPoolEntitlementsWithHttpInfo(List<EntitlementSpec> body);
        /// <summary>
        /// Delete the bulk entitlements for a set of desktop pools
        /// </summary>
        /// <remarks>
        /// The input spec must not contain duplicate Ids.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk desktop entitlements to be deleted.</param>
        /// <returns>List&lt;BulkEntitlementResponseInfo&gt;</returns>
        List<BulkEntitlementResponseInfo> BulkDeleteDesktopPoolEntitlements(List<EntitlementSpec> body);

        /// <summary>
        /// Delete the bulk entitlements for a set of desktop pools
        /// </summary>
        /// <remarks>
        /// The input spec must not contain duplicate Ids.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk desktop entitlements to be deleted.</param>
        /// <returns>ApiResponse of List&lt;BulkEntitlementResponseInfo&gt;</returns>
        ApiResponse<List<BulkEntitlementResponseInfo>> BulkDeleteDesktopPoolEntitlementsWithHttpInfo(List<EntitlementSpec> body);
        /// <summary>
        /// Returns the IDs of users or groups entitled to a given application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>EntitlementInfo</returns>
        EntitlementInfo GetApplicationPoolEntitlements(string id);

        /// <summary>
        /// Returns the IDs of users or groups entitled to a given application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntitlementInfo</returns>
        ApiResponse<EntitlementInfo> GetApplicationPoolEntitlementsWithHttpInfo(string id);
        /// <summary>
        /// Returns the IDs of users or groups entitled to a given desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>EntitlementInfo</returns>
        EntitlementInfo GetDesktopPoolEntitlements(string id);

        /// <summary>
        /// Returns the IDs of users or groups entitled to a given desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntitlementInfo</returns>
        ApiResponse<EntitlementInfo> GetDesktopPoolEntitlementsWithHttpInfo(string id);
        /// <summary>
        /// Lists the entitlements for Application Pools in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;EntitlementInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in documentation.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;EntitlementInfo&gt;</returns>
        List<EntitlementInfo> ListApplicationPoolEntitlements(CustomModel.Pagination Pagination = null, string filter = null);

        /// <summary>
        /// Lists the entitlements for Application Pools in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;EntitlementInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in documentation.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;EntitlementInfo&gt;</returns>
        ApiResponse<List<EntitlementInfo>> ListApplicationPoolEntitlementsWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null);
        /// <summary>
        /// Lists the entitlements for Desktop Pools in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;EntitlementInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in documentation.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;EntitlementInfo&gt;</returns>
        List<EntitlementInfo> ListDesktopPoolEntitlements(CustomModel.Pagination Pagination = null, string filter = null);

        /// <summary>
        /// Lists the entitlements for Desktop Pools in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;EntitlementInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in documentation.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;EntitlementInfo&gt;</returns>
        ApiResponse<List<EntitlementInfo>> ListDesktopPoolEntitlementsWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create the bulk entitlements for a set of application pools
        /// </summary>
        /// <remarks>
        /// The input spec must not contain duplicate Ids.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk application entitlements to be created.</param>
        /// <returns>Task of List&lt;BulkEntitlementResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkEntitlementResponseInfo>> BulkCreateApplicationPoolEntitlementsAsync(List<EntitlementSpec> body);

        /// <summary>
        /// Create the bulk entitlements for a set of application pools
        /// </summary>
        /// <remarks>
        /// The input spec must not contain duplicate Ids.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk application entitlements to be created.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkEntitlementResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkEntitlementResponseInfo>>> BulkCreateApplicationPoolEntitlementsAsyncWithHttpInfo(List<EntitlementSpec> body);
        /// <summary>
        /// Create the bulk entitlements for a set of desktop pools
        /// </summary>
        /// <remarks>
        /// The input spec must not contain duplicate Ids.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk desktop entitlements to be created.</param>
        /// <returns>Task of List&lt;BulkEntitlementResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkEntitlementResponseInfo>> BulkCreateDesktopPoolEntitlementsAsync(List<EntitlementSpec> body);

        /// <summary>
        /// Create the bulk entitlements for a set of desktop pools
        /// </summary>
        /// <remarks>
        /// The input spec must not contain duplicate Ids.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk desktop entitlements to be created.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkEntitlementResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkEntitlementResponseInfo>>> BulkCreateDesktopPoolEntitlementsAsyncWithHttpInfo(List<EntitlementSpec> body);
        /// <summary>
        /// Delete the bulk entitlements for a set of application pools
        /// </summary>
        /// <remarks>
        /// The input spec must not contain duplicate Ids.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk application entitlements to be deleted.</param>
        /// <returns>Task of List&lt;BulkEntitlementResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkEntitlementResponseInfo>> BulkDeleteApplicationPoolEntitlementsAsync(List<EntitlementSpec> body);

        /// <summary>
        /// Delete the bulk entitlements for a set of application pools
        /// </summary>
        /// <remarks>
        /// The input spec must not contain duplicate Ids.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk application entitlements to be deleted.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkEntitlementResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkEntitlementResponseInfo>>> BulkDeleteApplicationPoolEntitlementsAsyncWithHttpInfo(List<EntitlementSpec> body);
        /// <summary>
        /// Delete the bulk entitlements for a set of desktop pools
        /// </summary>
        /// <remarks>
        /// The input spec must not contain duplicate Ids.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk desktop entitlements to be deleted.</param>
        /// <returns>Task of List&lt;BulkEntitlementResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkEntitlementResponseInfo>> BulkDeleteDesktopPoolEntitlementsAsync(List<EntitlementSpec> body);

        /// <summary>
        /// Delete the bulk entitlements for a set of desktop pools
        /// </summary>
        /// <remarks>
        /// The input spec must not contain duplicate Ids.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk desktop entitlements to be deleted.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkEntitlementResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkEntitlementResponseInfo>>> BulkDeleteDesktopPoolEntitlementsAsyncWithHttpInfo(List<EntitlementSpec> body);
        /// <summary>
        /// Returns the IDs of users or groups entitled to a given application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of EntitlementInfo</returns>
        System.Threading.Tasks.Task<EntitlementInfo> GetApplicationPoolEntitlementsAsync(string id);

        /// <summary>
        /// Returns the IDs of users or groups entitled to a given application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntitlementInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntitlementInfo>> GetApplicationPoolEntitlementsAsyncWithHttpInfo(string id);
        /// <summary>
        /// Returns the IDs of users or groups entitled to a given desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of EntitlementInfo</returns>
        System.Threading.Tasks.Task<EntitlementInfo> GetDesktopPoolEntitlementsAsync(string id);

        /// <summary>
        /// Returns the IDs of users or groups entitled to a given desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntitlementInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntitlementInfo>> GetDesktopPoolEntitlementsAsyncWithHttpInfo(string id);
        /// <summary>
        /// Lists the entitlements for Application Pools in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;EntitlementInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in documentation.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;EntitlementInfo&gt;</returns>
        System.Threading.Tasks.Task<List<EntitlementInfo>> ListApplicationPoolEntitlementsAsync(CustomModel.Pagination Pagination = null, string filter = null);

        /// <summary>
        /// Lists the entitlements for Application Pools in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;EntitlementInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in documentation.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;EntitlementInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntitlementInfo>>> ListApplicationPoolEntitlementsAsyncWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null);
        /// <summary>
        /// Lists the entitlements for Desktop Pools in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;EntitlementInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in documentation.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;EntitlementInfo&gt;</returns>
        System.Threading.Tasks.Task<List<EntitlementInfo>> ListDesktopPoolEntitlementsAsync(CustomModel.Pagination Pagination = null, string filter = null);

        /// <summary>
        /// Lists the entitlements for Desktop Pools in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;EntitlementInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in documentation.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;EntitlementInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntitlementInfo>>> ListDesktopPoolEntitlementsAsyncWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntitlementsApi : IEntitlementsApi
    {
        private VMware.Horizon.RESTAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EntitlementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntitlementsApi(String basePath)
        {
            this.Configuration = new VMware.Horizon.RESTAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = VMware.Horizon.RESTAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntitlementsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntitlementsApi(VMware.Horizon.RESTAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = VMware.Horizon.RESTAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VMware.Horizon.RESTAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VMware.Horizon.RESTAPI.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VMware.Horizon.RESTAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create the bulk entitlements for a set of application pools The input spec must not contain duplicate Ids.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk application entitlements to be created.</param>
        /// <returns>List&lt;BulkEntitlementResponseInfo&gt;</returns>
        public List<BulkEntitlementResponseInfo> BulkCreateApplicationPoolEntitlements(List<EntitlementSpec> body)
        {
            ApiResponse<List<BulkEntitlementResponseInfo>> localVarResponse = BulkCreateApplicationPoolEntitlementsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create the bulk entitlements for a set of application pools The input spec must not contain duplicate Ids.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk application entitlements to be created.</param>
        /// <returns>ApiResponse of List&lt;BulkEntitlementResponseInfo&gt;</returns>
        public ApiResponse<List<BulkEntitlementResponseInfo>> BulkCreateApplicationPoolEntitlementsWithHttpInfo(List<EntitlementSpec> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EntitlementsApi->BulkCreateApplicationPoolEntitlements");

            var localVarPath = "./entitlements/v1/application-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkCreateApplicationPoolEntitlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkEntitlementResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkEntitlementResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkEntitlementResponseInfo>)));
        }

        /// <summary>
        /// Create the bulk entitlements for a set of application pools The input spec must not contain duplicate Ids.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk application entitlements to be created.</param>
        /// <returns>Task of List&lt;BulkEntitlementResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkEntitlementResponseInfo>> BulkCreateApplicationPoolEntitlementsAsync(List<EntitlementSpec> body)
        {
            ApiResponse<List<BulkEntitlementResponseInfo>> localVarResponse = await BulkCreateApplicationPoolEntitlementsAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create the bulk entitlements for a set of application pools The input spec must not contain duplicate Ids.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk application entitlements to be created.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkEntitlementResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkEntitlementResponseInfo>>> BulkCreateApplicationPoolEntitlementsAsyncWithHttpInfo(List<EntitlementSpec> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EntitlementsApi->BulkCreateApplicationPoolEntitlements");

            var localVarPath = "./entitlements/v1/application-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkCreateApplicationPoolEntitlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkEntitlementResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkEntitlementResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkEntitlementResponseInfo>)));
        }

        /// <summary>
        /// Create the bulk entitlements for a set of desktop pools The input spec must not contain duplicate Ids.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk desktop entitlements to be created.</param>
        /// <returns>List&lt;BulkEntitlementResponseInfo&gt;</returns>
        public List<BulkEntitlementResponseInfo> BulkCreateDesktopPoolEntitlements(List<EntitlementSpec> body)
        {
            ApiResponse<List<BulkEntitlementResponseInfo>> localVarResponse = BulkCreateDesktopPoolEntitlementsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create the bulk entitlements for a set of desktop pools The input spec must not contain duplicate Ids.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk desktop entitlements to be created.</param>
        /// <returns>ApiResponse of List&lt;BulkEntitlementResponseInfo&gt;</returns>
        public ApiResponse<List<BulkEntitlementResponseInfo>> BulkCreateDesktopPoolEntitlementsWithHttpInfo(List<EntitlementSpec> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EntitlementsApi->BulkCreateDesktopPoolEntitlements");

            var localVarPath = "./entitlements/v1/desktop-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkCreateDesktopPoolEntitlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkEntitlementResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkEntitlementResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkEntitlementResponseInfo>)));
        }

        /// <summary>
        /// Create the bulk entitlements for a set of desktop pools The input spec must not contain duplicate Ids.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk desktop entitlements to be created.</param>
        /// <returns>Task of List&lt;BulkEntitlementResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkEntitlementResponseInfo>> BulkCreateDesktopPoolEntitlementsAsync(List<EntitlementSpec> body)
        {
            ApiResponse<List<BulkEntitlementResponseInfo>> localVarResponse = await BulkCreateDesktopPoolEntitlementsAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create the bulk entitlements for a set of desktop pools The input spec must not contain duplicate Ids.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk desktop entitlements to be created.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkEntitlementResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkEntitlementResponseInfo>>> BulkCreateDesktopPoolEntitlementsAsyncWithHttpInfo(List<EntitlementSpec> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EntitlementsApi->BulkCreateDesktopPoolEntitlements");

            var localVarPath = "./entitlements/v1/desktop-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkCreateDesktopPoolEntitlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkEntitlementResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkEntitlementResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkEntitlementResponseInfo>)));
        }

        /// <summary>
        /// Delete the bulk entitlements for a set of application pools The input spec must not contain duplicate Ids.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk application entitlements to be deleted.</param>
        /// <returns>List&lt;BulkEntitlementResponseInfo&gt;</returns>
        public List<BulkEntitlementResponseInfo> BulkDeleteApplicationPoolEntitlements(List<EntitlementSpec> body)
        {
            ApiResponse<List<BulkEntitlementResponseInfo>> localVarResponse = BulkDeleteApplicationPoolEntitlementsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the bulk entitlements for a set of application pools The input spec must not contain duplicate Ids.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk application entitlements to be deleted.</param>
        /// <returns>ApiResponse of List&lt;BulkEntitlementResponseInfo&gt;</returns>
        public ApiResponse<List<BulkEntitlementResponseInfo>> BulkDeleteApplicationPoolEntitlementsWithHttpInfo(List<EntitlementSpec> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EntitlementsApi->BulkDeleteApplicationPoolEntitlements");

            var localVarPath = "./entitlements/v1/application-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkDeleteApplicationPoolEntitlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkEntitlementResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkEntitlementResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkEntitlementResponseInfo>)));
        }

        /// <summary>
        /// Delete the bulk entitlements for a set of application pools The input spec must not contain duplicate Ids.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk application entitlements to be deleted.</param>
        /// <returns>Task of List&lt;BulkEntitlementResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkEntitlementResponseInfo>> BulkDeleteApplicationPoolEntitlementsAsync(List<EntitlementSpec> body)
        {
            ApiResponse<List<BulkEntitlementResponseInfo>> localVarResponse = await BulkDeleteApplicationPoolEntitlementsAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Delete the bulk entitlements for a set of application pools The input spec must not contain duplicate Ids.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk application entitlements to be deleted.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkEntitlementResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkEntitlementResponseInfo>>> BulkDeleteApplicationPoolEntitlementsAsyncWithHttpInfo(List<EntitlementSpec> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EntitlementsApi->BulkDeleteApplicationPoolEntitlements");

            var localVarPath = "./entitlements/v1/application-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkDeleteApplicationPoolEntitlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkEntitlementResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkEntitlementResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkEntitlementResponseInfo>)));
        }

        /// <summary>
        /// Delete the bulk entitlements for a set of desktop pools The input spec must not contain duplicate Ids.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk desktop entitlements to be deleted.</param>
        /// <returns>List&lt;BulkEntitlementResponseInfo&gt;</returns>
        public List<BulkEntitlementResponseInfo> BulkDeleteDesktopPoolEntitlements(List<EntitlementSpec> body)
        {
            ApiResponse<List<BulkEntitlementResponseInfo>> localVarResponse = BulkDeleteDesktopPoolEntitlementsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the bulk entitlements for a set of desktop pools The input spec must not contain duplicate Ids.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk desktop entitlements to be deleted.</param>
        /// <returns>ApiResponse of List&lt;BulkEntitlementResponseInfo&gt;</returns>
        public ApiResponse<List<BulkEntitlementResponseInfo>> BulkDeleteDesktopPoolEntitlementsWithHttpInfo(List<EntitlementSpec> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EntitlementsApi->BulkDeleteDesktopPoolEntitlements");

            var localVarPath = "./entitlements/v1/desktop-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkDeleteDesktopPoolEntitlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkEntitlementResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkEntitlementResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkEntitlementResponseInfo>)));
        }

        /// <summary>
        /// Delete the bulk entitlements for a set of desktop pools The input spec must not contain duplicate Ids.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk desktop entitlements to be deleted.</param>
        /// <returns>Task of List&lt;BulkEntitlementResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkEntitlementResponseInfo>> BulkDeleteDesktopPoolEntitlementsAsync(List<EntitlementSpec> body)
        {
            ApiResponse<List<BulkEntitlementResponseInfo>> localVarResponse = await BulkDeleteDesktopPoolEntitlementsAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Delete the bulk entitlements for a set of desktop pools The input spec must not contain duplicate Ids.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifications for bulk desktop entitlements to be deleted.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkEntitlementResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkEntitlementResponseInfo>>> BulkDeleteDesktopPoolEntitlementsAsyncWithHttpInfo(List<EntitlementSpec> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EntitlementsApi->BulkDeleteDesktopPoolEntitlements");

            var localVarPath = "./entitlements/v1/desktop-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkDeleteDesktopPoolEntitlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkEntitlementResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkEntitlementResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkEntitlementResponseInfo>)));
        }

        /// <summary>
        /// Returns the IDs of users or groups entitled to a given application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>EntitlementInfo</returns>
        public EntitlementInfo GetApplicationPoolEntitlements(string id)
        {
            ApiResponse<EntitlementInfo> localVarResponse = GetApplicationPoolEntitlementsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the IDs of users or groups entitled to a given application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntitlementInfo</returns>
        public ApiResponse<EntitlementInfo> GetApplicationPoolEntitlementsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EntitlementsApi->GetApplicationPoolEntitlements");

            var localVarPath = "./entitlements/v1/application-pools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationPoolEntitlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitlementInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EntitlementInfo)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitlementInfo)));
        }

        /// <summary>
        /// Returns the IDs of users or groups entitled to a given application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of EntitlementInfo</returns>
        public async System.Threading.Tasks.Task<EntitlementInfo> GetApplicationPoolEntitlementsAsync(string id)
        {
            ApiResponse<EntitlementInfo> localVarResponse = await GetApplicationPoolEntitlementsAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the IDs of users or groups entitled to a given application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntitlementInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntitlementInfo>> GetApplicationPoolEntitlementsAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EntitlementsApi->GetApplicationPoolEntitlements");

            var localVarPath = "./entitlements/v1/application-pools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationPoolEntitlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitlementInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EntitlementInfo)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitlementInfo)));
        }

        /// <summary>
        /// Returns the IDs of users or groups entitled to a given desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>EntitlementInfo</returns>
        public EntitlementInfo GetDesktopPoolEntitlements(string id)
        {
            ApiResponse<EntitlementInfo> localVarResponse = GetDesktopPoolEntitlementsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the IDs of users or groups entitled to a given desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of EntitlementInfo</returns>
        public ApiResponse<EntitlementInfo> GetDesktopPoolEntitlementsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EntitlementsApi->GetDesktopPoolEntitlements");

            var localVarPath = "./entitlements/v1/desktop-pools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDesktopPoolEntitlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitlementInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EntitlementInfo)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitlementInfo)));
        }

        /// <summary>
        /// Returns the IDs of users or groups entitled to a given desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of EntitlementInfo</returns>
        public async System.Threading.Tasks.Task<EntitlementInfo> GetDesktopPoolEntitlementsAsync(string id)
        {
            ApiResponse<EntitlementInfo> localVarResponse = await GetDesktopPoolEntitlementsAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the IDs of users or groups entitled to a given desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (EntitlementInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntitlementInfo>> GetDesktopPoolEntitlementsAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EntitlementsApi->GetDesktopPoolEntitlements");

            var localVarPath = "./entitlements/v1/desktop-pools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDesktopPoolEntitlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitlementInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EntitlementInfo)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitlementInfo)));
        }

        /// <summary>
        /// Lists the entitlements for Application Pools in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;EntitlementInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in documentation.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;EntitlementInfo&gt;</returns>
        public List<EntitlementInfo> ListApplicationPoolEntitlements(CustomModel.Pagination Pagination = null, string filter = null)
        {

            List<EntitlementInfo> ReturnValue = new List<EntitlementInfo>();
            Pagination = CustomHelpers.PaginationHelpers.ValidatePagination(Pagination);

            while (true)
            {
                ApiResponse<List<EntitlementInfo>> localVarResponse = ListApplicationPoolEntitlementsWithHttpInfo(Pagination, filter);



                ReturnValue.AddRange(localVarResponse.Data);

                if (!CustomHelpers.PaginationHelpers.HasMoreRecords(localVarResponse.Headers))
                {
                    break;
                }
                else
                {
                    Pagination.page += 1;
                }


            }
            return ReturnValue;

            //ApiResponse<List<EntitlementInfo>> localVarResponse = ListApplicationPoolEntitlementsWithHttpInfo(Pagination,filter);
            // return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the entitlements for Application Pools in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;EntitlementInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in documentation.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;EntitlementInfo&gt;</returns>
        public ApiResponse<List<EntitlementInfo>> ListApplicationPoolEntitlementsWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null)
        {

            var localVarPath = "./entitlements/v1/application-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            if (!string.IsNullOrEmpty(filter))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter));
            }

            if (Pagination != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", Pagination.page));
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", Pagination.size));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplicationPoolEntitlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntitlementInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<EntitlementInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntitlementInfo>)));
        }

        /// <summary>
        /// Lists the entitlements for Application Pools in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;EntitlementInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in documentation.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;EntitlementInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntitlementInfo>> ListApplicationPoolEntitlementsAsync(CustomModel.Pagination Pagination = null, string filter = null)
        {
            List<EntitlementInfo> ReturnValue = new List<EntitlementInfo>();
            Pagination = CustomHelpers.PaginationHelpers.ValidatePagination(Pagination);

            while (true)
            {
                ApiResponse<List<EntitlementInfo>> localVarResponse = await ListApplicationPoolEntitlementsAsyncWithHttpInfo(Pagination, filter);

                lock (ReturnValue)
                {
                    ReturnValue.AddRange(localVarResponse.Data);

                    if (!CustomHelpers.PaginationHelpers.HasMoreRecords(localVarResponse.Headers))
                    {
                        break;
                    }
                    else
                    {
                        Pagination.page += 1;
                    }
                }
            }
            return ReturnValue;

            //ApiResponse<List<EntitlementInfo>> localVarResponse = await ListApplicationPoolEntitlementsAsyncWithHttpInfo(Pagination, filter);
            //return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the entitlements for Application Pools in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;EntitlementInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in documentation.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;EntitlementInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EntitlementInfo>>> ListApplicationPoolEntitlementsAsyncWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null)
        {

            var localVarPath = "./entitlements/v1/application-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            if (!string.IsNullOrEmpty(filter))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter));
            }

            if (Pagination != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", Pagination.page));
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", Pagination.size));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplicationPoolEntitlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntitlementInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<EntitlementInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntitlementInfo>)));
        }

        /// <summary>
        /// Lists the entitlements for Desktop Pools in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;EntitlementInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in documentation.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;EntitlementInfo&gt;</returns>
        public List<EntitlementInfo> ListDesktopPoolEntitlements(CustomModel.Pagination Pagination = null, string filter = null)
        {
            List<EntitlementInfo> ReturnValue = new List<EntitlementInfo>();
            Pagination = CustomHelpers.PaginationHelpers.ValidatePagination(Pagination);

            while (true)
            {
                ApiResponse<List<EntitlementInfo>> localVarResponse = ListDesktopPoolEntitlementsWithHttpInfo(Pagination, filter);


                ReturnValue.AddRange(localVarResponse.Data);

                if (!CustomHelpers.PaginationHelpers.HasMoreRecords(localVarResponse.Headers))
                {
                    break;
                }
                else
                {
                    Pagination.page += 1;
                }

            }
            return ReturnValue;

            //ApiResponse<List<EntitlementInfo>> localVarResponse = ListDesktopPoolEntitlementsWithHttpInfo();
            //  return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the entitlements for Desktop Pools in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;EntitlementInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in documentation.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;EntitlementInfo&gt;</returns>
        public ApiResponse<List<EntitlementInfo>> ListDesktopPoolEntitlementsWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null)
        {

            var localVarPath = "./entitlements/v1/desktop-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            if (!string.IsNullOrEmpty(filter))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter));
            }

            if (Pagination != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", Pagination.page));
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", Pagination.size));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDesktopPoolEntitlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntitlementInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<EntitlementInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntitlementInfo>)));
        }

        /// <summary>
        /// Lists the entitlements for Desktop Pools in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;EntitlementInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in documentation.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;EntitlementInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntitlementInfo>> ListDesktopPoolEntitlementsAsync(CustomModel.Pagination Pagination = null, string filter = null)
        {
            List<EntitlementInfo> ReturnValue = new List<EntitlementInfo>();
            Pagination = CustomHelpers.PaginationHelpers.ValidatePagination(Pagination);

            while (true)
            {
                ApiResponse<List<EntitlementInfo>> localVarResponse = await ListDesktopPoolEntitlementsAsyncWithHttpInfo(Pagination, filter);

                ReturnValue.AddRange(localVarResponse.Data);

                if (!CustomHelpers.PaginationHelpers.HasMoreRecords(localVarResponse.Headers))
                {
                    break;
                }
                else
                {
                    Pagination.page += 1;
                }
            }
            return ReturnValue;
            //ApiResponse<List<EntitlementInfo>> localVarResponse = await ListDesktopPoolEntitlementsAsyncWithHttpInfo();
            // return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the entitlements for Desktop Pools in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;EntitlementInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in documentation.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;EntitlementInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EntitlementInfo>>> ListDesktopPoolEntitlementsAsyncWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null)
        {

            var localVarPath = "./entitlements/v1/desktop-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            if (!string.IsNullOrEmpty(filter))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter));
            }

            if (Pagination != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", Pagination.page));
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", Pagination.size));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDesktopPoolEntitlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntitlementInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<EntitlementInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntitlementInfo>)));
        }

    }
}
