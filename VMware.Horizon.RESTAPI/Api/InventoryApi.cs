/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using RestSharp.Portable;
using VMware.Horizon.RESTAPI.Client;
using VMware.Horizon.RESTAPI.Model;

namespace VMware.Horizon.RESTAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds machines to the given manual desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be added to the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> AddMachines(List<string> body, string id);

        /// <summary>
        /// Adds machines to the given manual desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be added to the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> AddMachinesWithHttpInfo(List<string> body, string id);
        /// <summary>
        /// Adds the named machines to the given desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of MachineSpecifiedName representing the machines to be added to the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> AddMachinesByName(List<MachineSpecifiedName> body, string id);

        /// <summary>
        /// Adds the named machines to the given desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of MachineSpecifiedName representing the machines to be added to the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> AddMachinesByNameWithHttpInfo(List<MachineSpecifiedName> body, string id);
        /// <summary>
        /// Assigns the specified users to the machine.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a user SID in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of User SIDs representing the users to be assigned to the machine.</param>
        /// <param name="id">id</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> AssignUsers(List<string> body, string id);

        /// <summary>
        /// Assigns the specified users to the machine.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a user SID in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of User SIDs representing the users to be assigned to the machine.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> AssignUsersWithHttpInfo(List<string> body, string id);
        /// <summary>
        /// Creates an application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Application pool object to be created.</param>
        /// <returns></returns>
        void CreateApplicationPool(ApplicationPoolCreateSpec body);

        /// <summary>
        /// Creates an application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Application pool object to be created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateApplicationPoolWithHttpInfo(ApplicationPoolCreateSpec body);
        /// <summary>
        /// Deletes application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        void DeleteApplicationPool(string id);

        /// <summary>
        /// Deletes application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApplicationPoolWithHttpInfo(string id);
        /// <summary>
        /// Deletes the machine.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specification applicable to deleting the machine.</param>
        /// <param name="id">id</param>
        /// <returns></returns>
        void DeleteMachine(MachineDeleteData body, string id);

        /// <summary>
        /// Deletes the machine.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specification applicable to deleting the machine.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMachineWithHttpInfo(MachineDeleteData body, string id);
        /// <summary>
        /// Deletes the specified machines.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The machines and specification for deletion.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> DeleteMachines(MachineDeleteSpec body);

        /// <summary>
        /// Deletes the specified machines.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The machines and specification for deletion.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> DeleteMachinesWithHttpInfo(MachineDeleteSpec body);
        /// <summary>
        /// Disconnects user sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be disconnected.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> DisconnectSessions(List<string> body);

        /// <summary>
        /// Disconnects user sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be disconnected.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> DisconnectSessionsWithHttpInfo(List<string> body);
        /// <summary>
        /// Puts the machines into maintenance mode.
        /// </summary>
        /// <remarks>
        /// When in maintenance mode, users cannot access the machines. Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be put into maintenance mode.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> EnterMaintenance(List<string> body);

        /// <summary>
        /// Puts the machines into maintenance mode.
        /// </summary>
        /// <remarks>
        /// When in maintenance mode, users cannot access the machines. Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be put into maintenance mode.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> EnterMaintenanceWithHttpInfo(List<string> body);
        /// <summary>
        /// Puts the machines out of maintenance mode.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be put out of maintenance mode.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> ExitMaintenance(List<string> body);

        /// <summary>
        /// Puts the machines out of maintenance mode.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be put out of maintenance mode.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> ExitMaintenanceWithHttpInfo(List<string> body);
        /// <summary>
        /// Gets application icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApplicationIconInfo</returns>
        ApplicationIconInfo GetApplicationIcon(string id);

        /// <summary>
        /// Gets application icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ApplicationIconInfo</returns>
        ApiResponse<ApplicationIconInfo> GetApplicationIconWithHttpInfo(string id);
        /// <summary>
        /// Gets application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApplicationPoolInfo</returns>
        ApplicationPoolInfo GetApplicationPool(string id);

        /// <summary>
        /// Gets application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ApplicationPoolInfo</returns>
        ApiResponse<ApplicationPoolInfo> GetApplicationPoolWithHttpInfo(string id);
        /// <summary>
        /// Gets the Desktop Pool information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>DesktopPoolInfo</returns>
        DesktopPoolInfo GetDesktopPool(string id);

        /// <summary>
        /// Gets the Desktop Pool information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of DesktopPoolInfo</returns>
        ApiResponse<DesktopPoolInfo> GetDesktopPoolWithHttpInfo(string id);
        /// <summary>
        /// Gets the desktop pool information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>DesktopPoolInfoV2</returns>
        DesktopPoolInfoV2 GetDesktopPoolV2(string id);

        /// <summary>
        /// Gets the desktop pool information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of DesktopPoolInfoV2</returns>
        ApiResponse<DesktopPoolInfoV2> GetDesktopPoolV2WithHttpInfo(string id);
        /// <summary>
        /// Gets the Farm information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>FarmInfo</returns>
        FarmInfo GetFarm(string id);

        /// <summary>
        /// Gets the Farm information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of FarmInfo</returns>
        ApiResponse<FarmInfo> GetFarmWithHttpInfo(string id);
        /// <summary>
        /// Gets the Machine information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>MachineInfo</returns>
        MachineInfo GetMachineUsingGET(string id);

        /// <summary>
        /// Gets the Machine information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of MachineInfo</returns>
        ApiResponse<MachineInfo> GetMachineUsingGETWithHttpInfo(string id);
        /// <summary>
        /// Gets the Session information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>SessionInfo</returns>
        SessionInfo GetSessionInfo(string id);

        /// <summary>
        /// Gets the Session information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of SessionInfo</returns>
        ApiResponse<SessionInfo> GetSessionInfoWithHttpInfo(string id);
        /// <summary>
        /// Lists the application icons for the given application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationPoolId">Application Pool ID</param>
        /// <returns>List&lt;ApplicationIconInfo&gt;</returns>
        List<ApplicationIconInfo> ListApplicationIcons(string applicationPoolId);

        /// <summary>
        /// Lists the application icons for the given application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationPoolId">Application Pool ID</param>
        /// <returns>ApiResponse of List&lt;ApplicationIconInfo&gt;</returns>
        ApiResponse<List<ApplicationIconInfo>> ListApplicationIconsWithHttpInfo(string applicationPoolId);
        /// <summary>
        /// Lists the application pools in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;For filters, refer to &#39;ApplicationPoolInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ApplicationPoolInfo&gt;</returns>
        List<ApplicationPoolInfo> ListApplicationPools(CustomModel.Pagination Pagination = null, string filter = null);

        /// <summary>
        /// Lists the application pools in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;For filters, refer to &#39;ApplicationPoolInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ApplicationPoolInfo&gt;</returns>
        ApiResponse<List<ApplicationPoolInfo>> ListApplicationPoolsWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null);
        /// <summary>
        /// Lists the Desktop Pools in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DesktopPoolInfo&gt;</returns>
        List<DesktopPoolInfo> ListDesktopPools();

        /// <summary>
        /// Lists the Desktop Pools in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DesktopPoolInfo&gt;</returns>
        ApiResponse<List<DesktopPoolInfo>> ListDesktopPoolsWithHttpInfo();
        /// <summary>
        /// Lists the desktop pools in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt;.&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DesktopPoolInfoV2&gt;</returns>
        List<DesktopPoolInfoV2> ListDesktopPoolsV2(CustomModel.Pagination Pagination = null);

        /// <summary>
        /// Lists the desktop pools in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt;.&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DesktopPoolInfoV2&gt;</returns>
        ApiResponse<List<DesktopPoolInfoV2>> ListDesktopPoolsV2WithHttpInfo(CustomModel.Pagination Pagination = null);
        /// <summary>
        /// Lists the Farms in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FarmInfo&gt;</returns>
        List<FarmInfo> ListFarms();

        /// <summary>
        /// Lists the Farms in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FarmInfo&gt;</returns>
        ApiResponse<List<FarmInfo>> ListFarmsWithHttpInfo();
        /// <summary>
        /// Lists the installed applications on the given desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>List&lt;InstalledApplicationInfo&gt;</returns>
        List<InstalledApplicationInfo> ListInstalledApplications(string id);

        /// <summary>
        /// Lists the installed applications on the given desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;InstalledApplicationInfo&gt;</returns>
        ApiResponse<List<InstalledApplicationInfo>> ListInstalledApplicationsWithHttpInfo(string id);
        /// <summary>
        /// Lists the installed applications on the given farm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>List&lt;InstalledApplicationInfo&gt;</returns>
        List<InstalledApplicationInfo> ListInstalledApplications1(string id);

        /// <summary>
        /// Lists the installed applications on the given farm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;InstalledApplicationInfo&gt;</returns>
        ApiResponse<List<InstalledApplicationInfo>> ListInstalledApplications1WithHttpInfo(string id);
        /// <summary>
        /// Lists the Machines in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;MachineInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MachineInfo&gt;</returns>
        List<MachineInfo> ListMachinesUsingGET(CustomModel.Pagination Pagination = null, string filter = null);

        /// <summary>
        /// Lists the Machines in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;MachineInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MachineInfo&gt;</returns>
        ApiResponse<List<MachineInfo>> ListMachinesUsingGETWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null);
        /// <summary>
        /// Lists the Session information in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt;.&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SessionInfo&gt;</returns>
        List<SessionInfo> ListSessionInfo(CustomModel.Pagination Pagination = null);

        /// <summary>
        /// Lists the Session information in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt;.&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SessionInfo&gt;</returns>
        ApiResponse<List<SessionInfo>> ListSessionInfoWithHttpInfo(CustomModel.Pagination Pagination = null);
        /// <summary>
        /// Logs off user sessions, if they are not locked.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be logged off.</param>
        /// <param name="forced">Indicates to Log off session forcibly.  If passed as \&quot;true\&quot;, then sessions are logoff forcibly, even if they are locked.  If passed as \&quot;false\&quot; or not passed at all, then sessions will be normally logged off, if they are not locked. (optional, default to false)</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> LogOffSessions(List<string> body, bool? forced = null);

        /// <summary>
        /// Logs off user sessions, if they are not locked.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be logged off.</param>
        /// <param name="forced">Indicates to Log off session forcibly.  If passed as \&quot;true\&quot;, then sessions are logoff forcibly, even if they are locked.  If passed as \&quot;false\&quot; or not passed at all, then sessions will be normally logged off, if they are not locked. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> LogOffSessionsWithHttpInfo(List<string> body, bool? forced = null);
        /// <summary>
        /// Rebuilds the specified machines.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be rebuilt.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> RebuildMachines(List<string> body);

        /// <summary>
        /// Rebuilds the specified machines.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be rebuilt.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> RebuildMachinesWithHttpInfo(List<string> body);
        /// <summary>
        /// Recovers the specified machines.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be recovered.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> RecoverMachines(List<string> body);

        /// <summary>
        /// Recovers the specified machines.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be recovered.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> RecoverMachinesWithHttpInfo(List<string> body);
        /// <summary>
        /// Removes machines from the given manual desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be removed from the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> RemoveMachines(List<string> body, string id);

        /// <summary>
        /// Removes machines from the given manual desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be removed from the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> RemoveMachinesWithHttpInfo(List<string> body, string id);
        /// <summary>
        /// Resets the specified machines.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be reset.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> ResetMachines(List<string> body);

        /// <summary>
        /// Resets the specified machines.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be reset.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> ResetMachinesWithHttpInfo(List<string> body);
        /// <summary>
        /// Resets machine of user sessions. The machine must be managed by Virtual Center and the session cannot be an application or an RDS desktop session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be reset.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> ResetSessions(List<string> body);

        /// <summary>
        /// Resets machine of user sessions. The machine must be managed by Virtual Center and the session cannot be an application or an RDS desktop session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be reset.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> ResetSessionsWithHttpInfo(List<string> body);
        /// <summary>
        /// Restarts the specified machines.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be restarted.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> RestartMachines(List<string> body);

        /// <summary>
        /// Restarts the specified machines.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be restarted.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> RestartMachinesWithHttpInfo(List<string> body);
        /// <summary>
        /// Restarts machine of user sessions. The machine must be managed by Virtual Center and the session cannot be an application or an RDS desktop session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be restarted.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> RestartSessions(List<string> body);

        /// <summary>
        /// Restarts machine of user sessions. The machine must be managed by Virtual Center and the session cannot be an application or an RDS desktop session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be restarted.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> RestartSessionsWithHttpInfo(List<string> body);
        /// <summary>
        /// Sends the message to user sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Message information object to be sent to sessions.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> SendMessageToSessions(SessionSendMessageSpec body);

        /// <summary>
        /// Sends the message to user sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Message information object to be sent to sessions.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> SendMessageToSessionsWithHttpInfo(SessionSendMessageSpec body);
        /// <summary>
        /// Un-assigns the specified users from the machine.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a user SID in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of User SIDs representing the users to be un-assigned from the machine.</param>
        /// <param name="id">id</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        List<BulkItemResponseInfo> UnassignUsers(List<string> body, string id);

        /// <summary>
        /// Un-assigns the specified users from the machine.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a user SID in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of User SIDs representing the users to be un-assigned from the machine.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        ApiResponse<List<BulkItemResponseInfo>> UnassignUsersWithHttpInfo(List<string> body, string id);
        /// <summary>
        /// Updates application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Application pool object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns></returns>
        void UpdateApplicationPool(ApplicationPoolUpdateSpec body, string id);

        /// <summary>
        /// Updates application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Application pool object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateApplicationPoolWithHttpInfo(ApplicationPoolUpdateSpec body, string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds machines to the given manual desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be added to the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> AddMachinesAsync(List<string> body, string id);

        /// <summary>
        /// Adds machines to the given manual desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be added to the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> AddMachinesAsyncWithHttpInfo(List<string> body, string id);
        /// <summary>
        /// Adds the named machines to the given desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of MachineSpecifiedName representing the machines to be added to the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> AddMachinesByNameAsync(List<MachineSpecifiedName> body, string id);

        /// <summary>
        /// Adds the named machines to the given desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of MachineSpecifiedName representing the machines to be added to the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> AddMachinesByNameAsyncWithHttpInfo(List<MachineSpecifiedName> body, string id);
        /// <summary>
        /// Assigns the specified users to the machine.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a user SID in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of User SIDs representing the users to be assigned to the machine.</param>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> AssignUsersAsync(List<string> body, string id);

        /// <summary>
        /// Assigns the specified users to the machine.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a user SID in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of User SIDs representing the users to be assigned to the machine.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> AssignUsersAsyncWithHttpInfo(List<string> body, string id);
        /// <summary>
        /// Creates an application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Application pool object to be created.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateApplicationPoolAsync(ApplicationPoolCreateSpec body);

        /// <summary>
        /// Creates an application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Application pool object to be created.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateApplicationPoolAsyncWithHttpInfo(ApplicationPoolCreateSpec body);
        /// <summary>
        /// Deletes application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApplicationPoolAsync(string id);

        /// <summary>
        /// Deletes application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationPoolAsyncWithHttpInfo(string id);
        /// <summary>
        /// Deletes the machine.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specification applicable to deleting the machine.</param>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMachineAsync(MachineDeleteData body, string id);

        /// <summary>
        /// Deletes the machine.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specification applicable to deleting the machine.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMachineAsyncWithHttpInfo(MachineDeleteData body, string id);
        /// <summary>
        /// Deletes the specified machines.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The machines and specification for deletion.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> DeleteMachinesAsync(MachineDeleteSpec body);

        /// <summary>
        /// Deletes the specified machines.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The machines and specification for deletion.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> DeleteMachinesAsyncWithHttpInfo(MachineDeleteSpec body);
        /// <summary>
        /// Disconnects user sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be disconnected.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> DisconnectSessionsAsync(List<string> body);

        /// <summary>
        /// Disconnects user sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be disconnected.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> DisconnectSessionsAsyncWithHttpInfo(List<string> body);
        /// <summary>
        /// Puts the machines into maintenance mode.
        /// </summary>
        /// <remarks>
        /// When in maintenance mode, users cannot access the machines. Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be put into maintenance mode.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> EnterMaintenanceAsync(List<string> body);

        /// <summary>
        /// Puts the machines into maintenance mode.
        /// </summary>
        /// <remarks>
        /// When in maintenance mode, users cannot access the machines. Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be put into maintenance mode.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> EnterMaintenanceAsyncWithHttpInfo(List<string> body);
        /// <summary>
        /// Puts the machines out of maintenance mode.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be put out of maintenance mode.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> ExitMaintenanceAsync(List<string> body);

        /// <summary>
        /// Puts the machines out of maintenance mode.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be put out of maintenance mode.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> ExitMaintenanceAsyncWithHttpInfo(List<string> body);
        /// <summary>
        /// Gets application icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApplicationIconInfo</returns>
        System.Threading.Tasks.Task<ApplicationIconInfo> GetApplicationIconAsync(string id);

        /// <summary>
        /// Gets application icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ApplicationIconInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationIconInfo>> GetApplicationIconAsyncWithHttpInfo(string id);
        /// <summary>
        /// Gets application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApplicationPoolInfo</returns>
        System.Threading.Tasks.Task<ApplicationPoolInfo> GetApplicationPoolAsync(string id);

        /// <summary>
        /// Gets application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ApplicationPoolInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationPoolInfo>> GetApplicationPoolAsyncWithHttpInfo(string id);
        /// <summary>
        /// Gets the Desktop Pool information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of DesktopPoolInfo</returns>
        System.Threading.Tasks.Task<DesktopPoolInfo> GetDesktopPoolAsync(string id);

        /// <summary>
        /// Gets the Desktop Pool information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (DesktopPoolInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesktopPoolInfo>> GetDesktopPoolAsyncWithHttpInfo(string id);
        /// <summary>
        /// Gets the desktop pool information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of DesktopPoolInfoV2</returns>
        System.Threading.Tasks.Task<DesktopPoolInfoV2> GetDesktopPoolV2Async(string id);

        /// <summary>
        /// Gets the desktop pool information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (DesktopPoolInfoV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesktopPoolInfoV2>> GetDesktopPoolV2AsyncWithHttpInfo(string id);
        /// <summary>
        /// Gets the Farm information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of FarmInfo</returns>
        System.Threading.Tasks.Task<FarmInfo> GetFarmAsync(string id);

        /// <summary>
        /// Gets the Farm information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (FarmInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<FarmInfo>> GetFarmAsyncWithHttpInfo(string id);
        /// <summary>
        /// Gets the Machine information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of MachineInfo</returns>
        System.Threading.Tasks.Task<MachineInfo> GetMachineUsingGETAsync(string id);

        /// <summary>
        /// Gets the Machine information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (MachineInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MachineInfo>> GetMachineUsingGETAsyncWithHttpInfo(string id);
        /// <summary>
        /// Gets the Session information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of SessionInfo</returns>
        System.Threading.Tasks.Task<SessionInfo> GetSessionInfoAsync(string id);

        /// <summary>
        /// Gets the Session information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (SessionInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionInfo>> GetSessionInfoAsyncWithHttpInfo(string id);
        /// <summary>
        /// Lists the application icons for the given application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationPoolId">Application Pool ID</param>
        /// <returns>Task of List&lt;ApplicationIconInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ApplicationIconInfo>> ListApplicationIconsAsync(string applicationPoolId);

        /// <summary>
        /// Lists the application icons for the given application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationPoolId">Application Pool ID</param>
        /// <returns>Task of ApiResponse (List&lt;ApplicationIconInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApplicationIconInfo>>> ListApplicationIconsAsyncWithHttpInfo(string applicationPoolId);
        /// <summary>
        /// Lists the application pools in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;For filters, refer to &#39;ApplicationPoolInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ApplicationPoolInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ApplicationPoolInfo>> ListApplicationPoolsAsync(CustomModel.Pagination Pagination = null, string filter = null);

        /// <summary>
        /// Lists the application pools in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;For filters, refer to &#39;ApplicationPoolInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ApplicationPoolInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApplicationPoolInfo>>> ListApplicationPoolsAsyncWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null);
        /// <summary>
        /// Lists the Desktop Pools in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DesktopPoolInfo&gt;</returns>
        System.Threading.Tasks.Task<List<DesktopPoolInfo>> ListDesktopPoolsAsync();

        /// <summary>
        /// Lists the Desktop Pools in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DesktopPoolInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DesktopPoolInfo>>> ListDesktopPoolsAsyncWithHttpInfo();
        /// <summary>
        /// Lists the desktop pools in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt;.&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DesktopPoolInfoV2&gt;</returns>
        System.Threading.Tasks.Task<List<DesktopPoolInfoV2>> ListDesktopPoolsV2Async(CustomModel.Pagination Pagination = null);

        /// <summary>
        /// Lists the desktop pools in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt;.&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DesktopPoolInfoV2&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DesktopPoolInfoV2>>> ListDesktopPoolsV2AsyncWithHttpInfo(CustomModel.Pagination Pagination = null);
        /// <summary>
        /// Lists the Farms in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FarmInfo&gt;</returns>
        System.Threading.Tasks.Task<List<FarmInfo>> ListFarmsAsync();

        /// <summary>
        /// Lists the Farms in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FarmInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FarmInfo>>> ListFarmsAsyncWithHttpInfo();
        /// <summary>
        /// Lists the installed applications on the given desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;InstalledApplicationInfo&gt;</returns>
        System.Threading.Tasks.Task<List<InstalledApplicationInfo>> ListInstalledApplicationsAsync(string id);

        /// <summary>
        /// Lists the installed applications on the given desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;InstalledApplicationInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InstalledApplicationInfo>>> ListInstalledApplicationsAsyncWithHttpInfo(string id);
        /// <summary>
        /// Lists the installed applications on the given farm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;InstalledApplicationInfo&gt;</returns>
        System.Threading.Tasks.Task<List<InstalledApplicationInfo>> ListInstalledApplications1Async(string id);

        /// <summary>
        /// Lists the installed applications on the given farm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;InstalledApplicationInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InstalledApplicationInfo>>> ListInstalledApplications1AsyncWithHttpInfo(string id);
        /// <summary>
        /// Lists the Machines in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;MachineInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MachineInfo&gt;</returns>
        System.Threading.Tasks.Task<List<MachineInfo>> ListMachinesUsingGETAsync(CustomModel.Pagination Pagination = null, string filter = null);

        /// <summary>
        /// Lists the Machines in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;MachineInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MachineInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MachineInfo>>> ListMachinesUsingGETAsyncWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null);
        /// <summary>
        /// Lists the Session information in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt;.&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SessionInfo&gt;</returns>
        System.Threading.Tasks.Task<List<SessionInfo>> ListSessionInfoAsync(CustomModel.Pagination Pagination = null);

        /// <summary>
        /// Lists the Session information in the environment.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt;.&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SessionInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SessionInfo>>> ListSessionInfoAsyncWithHttpInfo(CustomModel.Pagination Pagination = null);
        /// <summary>
        /// Logs off user sessions, if they are not locked.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be logged off.</param>
        /// <param name="forced">Indicates to Log off session forcibly.  If passed as \&quot;true\&quot;, then sessions are logoff forcibly, even if they are locked.  If passed as \&quot;false\&quot; or not passed at all, then sessions will be normally logged off, if they are not locked. (optional, default to false)</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> LogOffSessionsAsync(List<string> body, bool? forced = null);

        /// <summary>
        /// Logs off user sessions, if they are not locked.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be logged off.</param>
        /// <param name="forced">Indicates to Log off session forcibly.  If passed as \&quot;true\&quot;, then sessions are logoff forcibly, even if they are locked.  If passed as \&quot;false\&quot; or not passed at all, then sessions will be normally logged off, if they are not locked. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> LogOffSessionsAsyncWithHttpInfo(List<string> body, bool? forced = null);
        /// <summary>
        /// Rebuilds the specified machines.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be rebuilt.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> RebuildMachinesAsync(List<string> body);

        /// <summary>
        /// Rebuilds the specified machines.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be rebuilt.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> RebuildMachinesAsyncWithHttpInfo(List<string> body);
        /// <summary>
        /// Recovers the specified machines.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be recovered.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> RecoverMachinesAsync(List<string> body);

        /// <summary>
        /// Recovers the specified machines.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be recovered.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> RecoverMachinesAsyncWithHttpInfo(List<string> body);
        /// <summary>
        /// Removes machines from the given manual desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be removed from the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> RemoveMachinesAsync(List<string> body, string id);

        /// <summary>
        /// Removes machines from the given manual desktop pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be removed from the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> RemoveMachinesAsyncWithHttpInfo(List<string> body, string id);
        /// <summary>
        /// Resets the specified machines.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be reset.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> ResetMachinesAsync(List<string> body);

        /// <summary>
        /// Resets the specified machines.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be reset.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> ResetMachinesAsyncWithHttpInfo(List<string> body);
        /// <summary>
        /// Resets machine of user sessions. The machine must be managed by Virtual Center and the session cannot be an application or an RDS desktop session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be reset.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> ResetSessionsAsync(List<string> body);

        /// <summary>
        /// Resets machine of user sessions. The machine must be managed by Virtual Center and the session cannot be an application or an RDS desktop session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be reset.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> ResetSessionsAsyncWithHttpInfo(List<string> body);
        /// <summary>
        /// Restarts the specified machines.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be restarted.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> RestartMachinesAsync(List<string> body);

        /// <summary>
        /// Restarts the specified machines.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a machine id in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be restarted.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> RestartMachinesAsyncWithHttpInfo(List<string> body);
        /// <summary>
        /// Restarts machine of user sessions. The machine must be managed by Virtual Center and the session cannot be an application or an RDS desktop session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be restarted.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> RestartSessionsAsync(List<string> body);

        /// <summary>
        /// Restarts machine of user sessions. The machine must be managed by Virtual Center and the session cannot be an application or an RDS desktop session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be restarted.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> RestartSessionsAsyncWithHttpInfo(List<string> body);
        /// <summary>
        /// Sends the message to user sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Message information object to be sent to sessions.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> SendMessageToSessionsAsync(SessionSendMessageSpec body);

        /// <summary>
        /// Sends the message to user sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Message information object to be sent to sessions.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> SendMessageToSessionsAsyncWithHttpInfo(SessionSendMessageSpec body);
        /// <summary>
        /// Un-assigns the specified users from the machine.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a user SID in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of User SIDs representing the users to be un-assigned from the machine.</param>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BulkItemResponseInfo>> UnassignUsersAsync(List<string> body, string id);

        /// <summary>
        /// Un-assigns the specified users from the machine.
        /// </summary>
        /// <remarks>
        /// Each response entity in the result corresponds to a user SID in the input.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of User SIDs representing the users to be un-assigned from the machine.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> UnassignUsersAsyncWithHttpInfo(List<string> body, string id);
        /// <summary>
        /// Updates application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Application pool object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateApplicationPoolAsync(ApplicationPoolUpdateSpec body, string id);

        /// <summary>
        /// Updates application pool.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Application pool object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApplicationPoolAsyncWithHttpInfo(ApplicationPoolUpdateSpec body, string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InventoryApi : IInventoryApi
    {
        private VMware.Horizon.RESTAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InventoryApi(String basePath)
        {
            this.Configuration = new VMware.Horizon.RESTAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = VMware.Horizon.RESTAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InventoryApi(VMware.Horizon.RESTAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = VMware.Horizon.RESTAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VMware.Horizon.RESTAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VMware.Horizon.RESTAPI.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VMware.Horizon.RESTAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds machines to the given manual desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be added to the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> AddMachines(List<string> body, string id)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = AddMachinesWithHttpInfo(body, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds machines to the given manual desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be added to the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> AddMachinesWithHttpInfo(List<string> body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->AddMachines");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->AddMachines");

            var localVarPath = "./inventory/v1/desktop-pools/{id}/action/add-machines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Adds machines to the given manual desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be added to the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> AddMachinesAsync(List<string> body, string id)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await AddMachinesAsyncWithHttpInfo(body, id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Adds machines to the given manual desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be added to the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> AddMachinesAsyncWithHttpInfo(List<string> body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->AddMachines");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->AddMachines");

            var localVarPath = "./inventory/v1/desktop-pools/{id}/action/add-machines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Adds the named machines to the given desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of MachineSpecifiedName representing the machines to be added to the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> AddMachinesByName(List<MachineSpecifiedName> body, string id)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = AddMachinesByNameWithHttpInfo(body, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds the named machines to the given desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of MachineSpecifiedName representing the machines to be added to the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> AddMachinesByNameWithHttpInfo(List<MachineSpecifiedName> body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->AddMachinesByName");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->AddMachinesByName");

            var localVarPath = "./inventory/v1/desktop-pools/{id}/action/add-machines-by-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMachinesByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Adds the named machines to the given desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of MachineSpecifiedName representing the machines to be added to the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> AddMachinesByNameAsync(List<MachineSpecifiedName> body, string id)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await AddMachinesByNameAsyncWithHttpInfo(body, id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Adds the named machines to the given desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of MachineSpecifiedName representing the machines to be added to the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> AddMachinesByNameAsyncWithHttpInfo(List<MachineSpecifiedName> body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->AddMachinesByName");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->AddMachinesByName");

            var localVarPath = "./inventory/v1/desktop-pools/{id}/action/add-machines-by-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMachinesByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Assigns the specified users to the machine. Each response entity in the result corresponds to a user SID in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of User SIDs representing the users to be assigned to the machine.</param>
        /// <param name="id">id</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> AssignUsers(List<string> body, string id)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = AssignUsersWithHttpInfo(body, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assigns the specified users to the machine. Each response entity in the result corresponds to a user SID in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of User SIDs representing the users to be assigned to the machine.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> AssignUsersWithHttpInfo(List<string> body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->AssignUsers");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->AssignUsers");

            var localVarPath = "./inventory/v1/machines/{id}/action/assign-users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Assigns the specified users to the machine. Each response entity in the result corresponds to a user SID in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of User SIDs representing the users to be assigned to the machine.</param>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> AssignUsersAsync(List<string> body, string id)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await AssignUsersAsyncWithHttpInfo(body, id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Assigns the specified users to the machine. Each response entity in the result corresponds to a user SID in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of User SIDs representing the users to be assigned to the machine.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> AssignUsersAsyncWithHttpInfo(List<string> body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->AssignUsers");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->AssignUsers");

            var localVarPath = "./inventory/v1/machines/{id}/action/assign-users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Creates an application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Application pool object to be created.</param>
        /// <returns></returns>
        public void CreateApplicationPool(ApplicationPoolCreateSpec body)
        {
            CreateApplicationPoolWithHttpInfo(body);
        }

        /// <summary>
        /// Creates an application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Application pool object to be created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateApplicationPoolWithHttpInfo(ApplicationPoolCreateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->CreateApplicationPool");

            var localVarPath = "./inventory/v1/application-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplicationPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates an application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Application pool object to be created.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateApplicationPoolAsync(ApplicationPoolCreateSpec body)
        {
            await CreateApplicationPoolAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Creates an application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Application pool object to be created.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateApplicationPoolAsyncWithHttpInfo(ApplicationPoolCreateSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->CreateApplicationPool");

            var localVarPath = "./inventory/v1/application-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplicationPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void DeleteApplicationPool(string id)
        {
            DeleteApplicationPoolWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteApplicationPoolWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->DeleteApplicationPool");

            var localVarPath = "./inventory/v1/application-pools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplicationPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApplicationPoolAsync(string id)
        {
            await DeleteApplicationPoolAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationPoolAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->DeleteApplicationPool");

            var localVarPath = "./inventory/v1/application-pools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplicationPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the machine. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specification applicable to deleting the machine.</param>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void DeleteMachine(MachineDeleteData body, string id)
        {
            DeleteMachineWithHttpInfo(body, id);
        }

        /// <summary>
        /// Deletes the machine. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specification applicable to deleting the machine.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMachineWithHttpInfo(MachineDeleteData body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->DeleteMachine");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->DeleteMachine");

            var localVarPath = "./inventory/v1/machines/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMachine", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the machine. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specification applicable to deleting the machine.</param>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMachineAsync(MachineDeleteData body, string id)
        {
            await DeleteMachineAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Deletes the machine. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specification applicable to deleting the machine.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMachineAsyncWithHttpInfo(MachineDeleteData body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->DeleteMachine");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->DeleteMachine");

            var localVarPath = "./inventory/v1/machines/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMachine", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the specified machines. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The machines and specification for deletion.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> DeleteMachines(MachineDeleteSpec body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = DeleteMachinesWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the specified machines. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The machines and specification for deletion.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> DeleteMachinesWithHttpInfo(MachineDeleteSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->DeleteMachines");

            var localVarPath = "./inventory/v1/machines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Deletes the specified machines. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The machines and specification for deletion.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> DeleteMachinesAsync(MachineDeleteSpec body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await DeleteMachinesAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the specified machines. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The machines and specification for deletion.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> DeleteMachinesAsyncWithHttpInfo(MachineDeleteSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->DeleteMachines");

            var localVarPath = "./inventory/v1/machines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Disconnects user sessions 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be disconnected.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> DisconnectSessions(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = DisconnectSessionsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disconnects user sessions 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be disconnected.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> DisconnectSessionsWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->DisconnectSessions");

            var localVarPath = "./inventory/v1/sessions/action/disconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisconnectSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Disconnects user sessions 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be disconnected.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> DisconnectSessionsAsync(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await DisconnectSessionsAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Disconnects user sessions 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be disconnected.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> DisconnectSessionsAsyncWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->DisconnectSessions");

            var localVarPath = "./inventory/v1/sessions/action/disconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisconnectSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Puts the machines into maintenance mode. When in maintenance mode, users cannot access the machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be put into maintenance mode.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> EnterMaintenance(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = EnterMaintenanceWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Puts the machines into maintenance mode. When in maintenance mode, users cannot access the machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be put into maintenance mode.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> EnterMaintenanceWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->EnterMaintenance");

            var localVarPath = "./inventory/v1/machines/action/enter-maintenance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnterMaintenance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Puts the machines into maintenance mode. When in maintenance mode, users cannot access the machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be put into maintenance mode.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> EnterMaintenanceAsync(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await EnterMaintenanceAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Puts the machines into maintenance mode. When in maintenance mode, users cannot access the machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be put into maintenance mode.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> EnterMaintenanceAsyncWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->EnterMaintenance");

            var localVarPath = "./inventory/v1/machines/action/enter-maintenance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnterMaintenance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Puts the machines out of maintenance mode. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be put out of maintenance mode.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> ExitMaintenance(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = ExitMaintenanceWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Puts the machines out of maintenance mode. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be put out of maintenance mode.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> ExitMaintenanceWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->ExitMaintenance");

            var localVarPath = "./inventory/v1/machines/action/exit-maintenance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExitMaintenance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Puts the machines out of maintenance mode. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be put out of maintenance mode.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> ExitMaintenanceAsync(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await ExitMaintenanceAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Puts the machines out of maintenance mode. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be put out of maintenance mode.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> ExitMaintenanceAsyncWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->ExitMaintenance");

            var localVarPath = "./inventory/v1/machines/action/exit-maintenance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExitMaintenance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Gets application icon. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApplicationIconInfo</returns>
        public ApplicationIconInfo GetApplicationIcon(string id)
        {
            ApiResponse<ApplicationIconInfo> localVarResponse = GetApplicationIconWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets application icon. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ApplicationIconInfo</returns>
        public ApiResponse<ApplicationIconInfo> GetApplicationIconWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->GetApplicationIcon");

            var localVarPath = "./inventory/v1/application-icons/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationIcon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationIconInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApplicationIconInfo)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationIconInfo)));
        }

        /// <summary>
        /// Gets application icon. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApplicationIconInfo</returns>
        public async System.Threading.Tasks.Task<ApplicationIconInfo> GetApplicationIconAsync(string id)
        {
            ApiResponse<ApplicationIconInfo> localVarResponse = await GetApplicationIconAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets application icon. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ApplicationIconInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationIconInfo>> GetApplicationIconAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->GetApplicationIcon");

            var localVarPath = "./inventory/v1/application-icons/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationIcon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationIconInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApplicationIconInfo)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationIconInfo)));
        }

        /// <summary>
        /// Gets application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApplicationPoolInfo</returns>
        public ApplicationPoolInfo GetApplicationPool(string id)
        {
            ApiResponse<ApplicationPoolInfo> localVarResponse = GetApplicationPoolWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ApplicationPoolInfo</returns>
        public ApiResponse<ApplicationPoolInfo> GetApplicationPoolWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->GetApplicationPool");

            var localVarPath = "./inventory/v1/application-pools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationPoolInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApplicationPoolInfo)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationPoolInfo)));
        }

        /// <summary>
        /// Gets application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApplicationPoolInfo</returns>
        public async System.Threading.Tasks.Task<ApplicationPoolInfo> GetApplicationPoolAsync(string id)
        {
            ApiResponse<ApplicationPoolInfo> localVarResponse = await GetApplicationPoolAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ApplicationPoolInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationPoolInfo>> GetApplicationPoolAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->GetApplicationPool");

            var localVarPath = "./inventory/v1/application-pools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationPoolInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApplicationPoolInfo)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationPoolInfo)));
        }

        /// <summary>
        /// Gets the Desktop Pool information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>DesktopPoolInfo</returns>
        public DesktopPoolInfo GetDesktopPool(string id)
        {
            ApiResponse<DesktopPoolInfo> localVarResponse = GetDesktopPoolWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Desktop Pool information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of DesktopPoolInfo</returns>
        public ApiResponse<DesktopPoolInfo> GetDesktopPoolWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->GetDesktopPool");

            var localVarPath = "./inventory/v1/desktop-pools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDesktopPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesktopPoolInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DesktopPoolInfo)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesktopPoolInfo)));
        }

        /// <summary>
        /// Gets the Desktop Pool information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of DesktopPoolInfo</returns>
        public async System.Threading.Tasks.Task<DesktopPoolInfo> GetDesktopPoolAsync(string id)
        {
            ApiResponse<DesktopPoolInfo> localVarResponse = await GetDesktopPoolAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Desktop Pool information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (DesktopPoolInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesktopPoolInfo>> GetDesktopPoolAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->GetDesktopPool");

            var localVarPath = "./inventory/v1/desktop-pools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDesktopPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesktopPoolInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DesktopPoolInfo)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesktopPoolInfo)));
        }

        /// <summary>
        /// Gets the desktop pool information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>DesktopPoolInfoV2</returns>
        public DesktopPoolInfoV2 GetDesktopPoolV2(string id)
        {
            ApiResponse<DesktopPoolInfoV2> localVarResponse = GetDesktopPoolV2WithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the desktop pool information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of DesktopPoolInfoV2</returns>
        public ApiResponse<DesktopPoolInfoV2> GetDesktopPoolV2WithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->GetDesktopPoolV2");

            var localVarPath = "./inventory/v2/desktop-pools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDesktopPoolV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesktopPoolInfoV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DesktopPoolInfoV2)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesktopPoolInfoV2)));
        }

        /// <summary>
        /// Gets the desktop pool information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of DesktopPoolInfoV2</returns>
        public async System.Threading.Tasks.Task<DesktopPoolInfoV2> GetDesktopPoolV2Async(string id)
        {
            ApiResponse<DesktopPoolInfoV2> localVarResponse = await GetDesktopPoolV2AsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the desktop pool information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (DesktopPoolInfoV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesktopPoolInfoV2>> GetDesktopPoolV2AsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->GetDesktopPoolV2");

            var localVarPath = "./inventory/v2/desktop-pools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDesktopPoolV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesktopPoolInfoV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DesktopPoolInfoV2)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesktopPoolInfoV2)));
        }

        /// <summary>
        /// Gets the Farm information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>FarmInfo</returns>
        public FarmInfo GetFarm(string id)
        {
            ApiResponse<FarmInfo> localVarResponse = GetFarmWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Farm information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of FarmInfo</returns>
        public ApiResponse<FarmInfo> GetFarmWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->GetFarm");

            var localVarPath = "./inventory/v1/farms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FarmInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FarmInfo)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FarmInfo)));
        }

        /// <summary>
        /// Gets the Farm information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of FarmInfo</returns>
        public async System.Threading.Tasks.Task<FarmInfo> GetFarmAsync(string id)
        {
            ApiResponse<FarmInfo> localVarResponse = await GetFarmAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Farm information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (FarmInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FarmInfo>> GetFarmAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->GetFarm");

            var localVarPath = "./inventory/v1/farms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FarmInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FarmInfo)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FarmInfo)));
        }

        /// <summary>
        /// Gets the Machine information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>MachineInfo</returns>
        public MachineInfo GetMachineUsingGET(string id)
        {
            ApiResponse<MachineInfo> localVarResponse = GetMachineUsingGETWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Machine information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of MachineInfo</returns>
        public ApiResponse<MachineInfo> GetMachineUsingGETWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->GetMachineUsingGET");

            var localVarPath = "./inventory/v1/machines/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMachineUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MachineInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MachineInfo)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MachineInfo)));
        }

        /// <summary>
        /// Gets the Machine information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of MachineInfo</returns>
        public async System.Threading.Tasks.Task<MachineInfo> GetMachineUsingGETAsync(string id)
        {
            ApiResponse<MachineInfo> localVarResponse = await GetMachineUsingGETAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Machine information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (MachineInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MachineInfo>> GetMachineUsingGETAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->GetMachineUsingGET");

            var localVarPath = "./inventory/v1/machines/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMachineUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MachineInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MachineInfo)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MachineInfo)));
        }

        /// <summary>
        /// Gets the Session information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>SessionInfo</returns>
        public SessionInfo GetSessionInfo(string id)
        {
            ApiResponse<SessionInfo> localVarResponse = GetSessionInfoWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Session information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of SessionInfo</returns>
        public ApiResponse<SessionInfo> GetSessionInfoWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->GetSessionInfo");

            var localVarPath = "./inventory/v1/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SessionInfo)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionInfo)));
        }

        /// <summary>
        /// Gets the Session information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of SessionInfo</returns>
        public async System.Threading.Tasks.Task<SessionInfo> GetSessionInfoAsync(string id)
        {
            ApiResponse<SessionInfo> localVarResponse = await GetSessionInfoAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Session information. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (SessionInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionInfo>> GetSessionInfoAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->GetSessionInfo");

            var localVarPath = "./inventory/v1/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SessionInfo)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionInfo)));
        }

        /// <summary>
        /// Lists the application icons for the given application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationPoolId">Application Pool ID</param>
        /// <returns>List&lt;ApplicationIconInfo&gt;</returns>
        public List<ApplicationIconInfo> ListApplicationIcons(string applicationPoolId)
        {
            ApiResponse<List<ApplicationIconInfo>> localVarResponse = ListApplicationIconsWithHttpInfo(applicationPoolId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the application icons for the given application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationPoolId">Application Pool ID</param>
        /// <returns>ApiResponse of List&lt;ApplicationIconInfo&gt;</returns>
        public ApiResponse<List<ApplicationIconInfo>> ListApplicationIconsWithHttpInfo(string applicationPoolId)
        {
            // verify the required parameter 'applicationPoolId' is set
            if (applicationPoolId == null)
                throw new ApiException(400, "Missing required parameter 'applicationPoolId' when calling InventoryApi->ListApplicationIcons");

            var localVarPath = "./inventory/v1/application-icons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationPoolId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "application_pool_id", applicationPoolId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplicationIcons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApplicationIconInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ApplicationIconInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApplicationIconInfo>)));
        }

        /// <summary>
        /// Lists the application icons for the given application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationPoolId">Application Pool ID</param>
        /// <returns>Task of List&lt;ApplicationIconInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApplicationIconInfo>> ListApplicationIconsAsync(string applicationPoolId)
        {
            ApiResponse<List<ApplicationIconInfo>> localVarResponse = await ListApplicationIconsAsyncWithHttpInfo(applicationPoolId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the application icons for the given application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationPoolId">Application Pool ID</param>
        /// <returns>Task of ApiResponse (List&lt;ApplicationIconInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ApplicationIconInfo>>> ListApplicationIconsAsyncWithHttpInfo(string applicationPoolId)
        {
            // verify the required parameter 'applicationPoolId' is set
            if (applicationPoolId == null)
                throw new ApiException(400, "Missing required parameter 'applicationPoolId' when calling InventoryApi->ListApplicationIcons");

            var localVarPath = "./inventory/v1/application-icons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationPoolId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "application_pool_id", applicationPoolId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplicationIcons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApplicationIconInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ApplicationIconInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApplicationIconInfo>)));
        }

        /// <summary>
        /// Lists the application pools in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;For filters, refer to &#39;ApplicationPoolInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ApplicationPoolInfo&gt;</returns>
        public List<ApplicationPoolInfo> ListApplicationPools(CustomModel.Pagination Pagination = null, string filter = null)
        {

            List<ApplicationPoolInfo> ReturnValue = new List<ApplicationPoolInfo>();
            Pagination = CustomHelpers.PaginationHelpers.ValidatePagination(Pagination);

            while (true)
            {
                ApiResponse<List<ApplicationPoolInfo>> localVarResponse = ListApplicationPoolsWithHttpInfo(Pagination, filter);

                ReturnValue.AddRange(localVarResponse.Data);

                if (!CustomHelpers.PaginationHelpers.HasMoreRecords(localVarResponse.Headers))
                {
                    break;
                }
                else
                {
                    Pagination.page += 1;
                }
            }
            return ReturnValue;

            //ApiResponse<List<ApplicationPoolInfo>> localVarResponse = ListApplicationPoolsWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null);
            //return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the application pools in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;For filters, refer to &#39;ApplicationPoolInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ApplicationPoolInfo&gt;</returns>
        public ApiResponse<List<ApplicationPoolInfo>> ListApplicationPoolsWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null)
        {

            var localVarPath = "./inventory/v1/application-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            if (!string.IsNullOrEmpty(filter))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter));
            }

            if (Pagination != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", Pagination.page));
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", Pagination.size));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplicationPools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApplicationPoolInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ApplicationPoolInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApplicationPoolInfo>)));
        }

        /// <summary>
        /// Lists the application pools in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;For filters, refer to &#39;ApplicationPoolInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ApplicationPoolInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApplicationPoolInfo>> ListApplicationPoolsAsync(CustomModel.Pagination Pagination = null, string filter = null)
        {
            List<ApplicationPoolInfo> ReturnValue = new List<ApplicationPoolInfo>();
            Pagination = CustomHelpers.PaginationHelpers.ValidatePagination(Pagination);

            while (true)
            {
                ApiResponse<List<ApplicationPoolInfo>> localVarResponse = await ListApplicationPoolsAsyncWithHttpInfo(Pagination, filter);

                lock (ReturnValue)
                {
                    ReturnValue.AddRange(localVarResponse.Data);

                    if (!CustomHelpers.PaginationHelpers.HasMoreRecords(localVarResponse.Headers))
                    {
                        break;
                    }
                    else
                    {
                        Pagination.page += 1;
                    }
                }
            }
            return ReturnValue;
            //ApiResponse<List<ApplicationPoolInfo>> localVarResponse = await ListApplicationPoolsAsyncWithHttpInfo(Pagination, filter);
            //return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the application pools in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;For filters, refer to &#39;ApplicationPoolInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ApplicationPoolInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ApplicationPoolInfo>>> ListApplicationPoolsAsyncWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null)
        {

            var localVarPath = "./inventory/v1/application-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            if (!string.IsNullOrEmpty(filter))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter));
            }

            if (Pagination != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", Pagination.page));
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", Pagination.size));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplicationPools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApplicationPoolInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ApplicationPoolInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApplicationPoolInfo>)));
        }

        /// <summary>
        /// Lists the Desktop Pools in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DesktopPoolInfo&gt;</returns>
        public List<DesktopPoolInfo> ListDesktopPools()
        {
            ApiResponse<List<DesktopPoolInfo>> localVarResponse = ListDesktopPoolsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the Desktop Pools in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DesktopPoolInfo&gt;</returns>
        public ApiResponse<List<DesktopPoolInfo>> ListDesktopPoolsWithHttpInfo()
        {

            var localVarPath = "./inventory/v1/desktop-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDesktopPools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DesktopPoolInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DesktopPoolInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DesktopPoolInfo>)));
        }

        /// <summary>
        /// Lists the Desktop Pools in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DesktopPoolInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<DesktopPoolInfo>> ListDesktopPoolsAsync()
        {
            ApiResponse<List<DesktopPoolInfo>> localVarResponse = await ListDesktopPoolsAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the Desktop Pools in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DesktopPoolInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DesktopPoolInfo>>> ListDesktopPoolsAsyncWithHttpInfo()
        {

            var localVarPath = "./inventory/v1/desktop-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDesktopPools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DesktopPoolInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DesktopPoolInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DesktopPoolInfo>)));
        }

        /// <summary>
        /// Lists the desktop pools in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt;.&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DesktopPoolInfoV2&gt;</returns>
        public List<DesktopPoolInfoV2> ListDesktopPoolsV2(CustomModel.Pagination Pagination = null)
        {
                List<DesktopPoolInfoV2> ReturnValue = new List<DesktopPoolInfoV2>();
                Pagination = CustomHelpers.PaginationHelpers.ValidatePagination(Pagination);

                while (true)
                {
                    ApiResponse<List<DesktopPoolInfoV2>> localVarResponse = ListDesktopPoolsV2WithHttpInfo(Pagination);

                
                    ReturnValue.AddRange(localVarResponse.Data);

                    if (!CustomHelpers.PaginationHelpers.HasMoreRecords(localVarResponse.Headers))
                    {
                        break;
                    }
                    else
                    {
                        Pagination.page += 1;
                    }
                
            }
                return ReturnValue;

            //    ApiResponse<List<DesktopPoolInfoV2>> localVarResponse = ListDesktopPoolsV2WithHttpInfo(Pagination);
            //return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the desktop pools in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt;.&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DesktopPoolInfoV2&gt;</returns>
        public ApiResponse<List<DesktopPoolInfoV2>> ListDesktopPoolsV2WithHttpInfo(CustomModel.Pagination Pagination = null)
        {

            var localVarPath = "./inventory/v2/desktop-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            if (Pagination != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", Pagination.page));
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", Pagination.size));
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDesktopPoolsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DesktopPoolInfoV2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DesktopPoolInfoV2>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DesktopPoolInfoV2>)));
        }

        /// <summary>
        /// Lists the desktop pools in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt;.&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DesktopPoolInfoV2&gt;</returns>
        public async System.Threading.Tasks.Task<List<DesktopPoolInfoV2>> ListDesktopPoolsV2Async(CustomModel.Pagination Pagination = null)
        {
                List<DesktopPoolInfoV2> ReturnValue = new List<DesktopPoolInfoV2>();
                Pagination = CustomHelpers.PaginationHelpers.ValidatePagination(Pagination);

                while (true)
                {
                    ApiResponse<List<DesktopPoolInfoV2>> localVarResponse =await ListDesktopPoolsV2AsyncWithHttpInfo(Pagination);

                lock (ReturnValue)
                {
                    ReturnValue.AddRange(localVarResponse.Data);

                    if (!CustomHelpers.PaginationHelpers.HasMoreRecords(localVarResponse.Headers))
                    {
                        break;
                    }
                    else
                    {
                        Pagination.page += 1;
                    }
                }
            }
                return ReturnValue;

                //ApiResponse<List<DesktopPoolInfoV2>> localVarResponse = await ListDesktopPoolsV2AsyncWithHttpInfo();
           // return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the desktop pools in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt;.&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DesktopPoolInfoV2&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DesktopPoolInfoV2>>> ListDesktopPoolsV2AsyncWithHttpInfo(CustomModel.Pagination Pagination = null)
        {

            var localVarPath = "./inventory/v2/desktop-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            if (Pagination != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", Pagination.page));
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", Pagination.size));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDesktopPoolsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DesktopPoolInfoV2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DesktopPoolInfoV2>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DesktopPoolInfoV2>)));
        }

        /// <summary>
        /// Lists the Farms in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FarmInfo&gt;</returns>
        public List<FarmInfo> ListFarms()
        {
            ApiResponse<List<FarmInfo>> localVarResponse = ListFarmsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the Farms in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FarmInfo&gt;</returns>
        public ApiResponse<List<FarmInfo>> ListFarmsWithHttpInfo()
        {

            var localVarPath = "./inventory/v1/farms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFarms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FarmInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<FarmInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FarmInfo>)));
        }

        /// <summary>
        /// Lists the Farms in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FarmInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<FarmInfo>> ListFarmsAsync()
        {
            ApiResponse<List<FarmInfo>> localVarResponse = await ListFarmsAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the Farms in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FarmInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FarmInfo>>> ListFarmsAsyncWithHttpInfo()
        {

            var localVarPath = "./inventory/v1/farms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFarms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FarmInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<FarmInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FarmInfo>)));
        }

        /// <summary>
        /// Lists the installed applications on the given desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>List&lt;InstalledApplicationInfo&gt;</returns>
        public List<InstalledApplicationInfo> ListInstalledApplications(string id)
        {
            ApiResponse<List<InstalledApplicationInfo>> localVarResponse = ListInstalledApplicationsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the installed applications on the given desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;InstalledApplicationInfo&gt;</returns>
        public ApiResponse<List<InstalledApplicationInfo>> ListInstalledApplicationsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->ListInstalledApplications");

            var localVarPath = "./inventory/v1/desktop-pools/{id}/installed-applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInstalledApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InstalledApplicationInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<InstalledApplicationInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InstalledApplicationInfo>)));
        }

        /// <summary>
        /// Lists the installed applications on the given desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;InstalledApplicationInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<InstalledApplicationInfo>> ListInstalledApplicationsAsync(string id)
        {
            ApiResponse<List<InstalledApplicationInfo>> localVarResponse = await ListInstalledApplicationsAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the installed applications on the given desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;InstalledApplicationInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InstalledApplicationInfo>>> ListInstalledApplicationsAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->ListInstalledApplications");

            var localVarPath = "./inventory/v1/desktop-pools/{id}/installed-applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInstalledApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InstalledApplicationInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<InstalledApplicationInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InstalledApplicationInfo>)));
        }

        /// <summary>
        /// Lists the installed applications on the given farm. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>List&lt;InstalledApplicationInfo&gt;</returns>
        public List<InstalledApplicationInfo> ListInstalledApplications1(string id)
        {
            ApiResponse<List<InstalledApplicationInfo>> localVarResponse = ListInstalledApplications1WithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the installed applications on the given farm. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;InstalledApplicationInfo&gt;</returns>
        public ApiResponse<List<InstalledApplicationInfo>> ListInstalledApplications1WithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->ListInstalledApplications1");

            var localVarPath = "./inventory/v1/farms/{id}/installed-applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInstalledApplications1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InstalledApplicationInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<InstalledApplicationInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InstalledApplicationInfo>)));
        }

        /// <summary>
        /// Lists the installed applications on the given farm. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;InstalledApplicationInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<InstalledApplicationInfo>> ListInstalledApplications1Async(string id)
        {
            ApiResponse<List<InstalledApplicationInfo>> localVarResponse = await ListInstalledApplications1AsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the installed applications on the given farm. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;InstalledApplicationInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InstalledApplicationInfo>>> ListInstalledApplications1AsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->ListInstalledApplications1");

            var localVarPath = "./inventory/v1/farms/{id}/installed-applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInstalledApplications1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InstalledApplicationInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<InstalledApplicationInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InstalledApplicationInfo>)));
        }

        /// <summary>
        /// Lists the Machines in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;MachineInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MachineInfo&gt;</returns>
        public List<MachineInfo> ListMachinesUsingGET(CustomModel.Pagination Pagination = null, string filter = null)
        {
            List<MachineInfo> ReturnValue = new List<MachineInfo>();
            Pagination = CustomHelpers.PaginationHelpers.ValidatePagination(Pagination);

            while (true)
            {
                ApiResponse<List<MachineInfo>> localVarResponse = ListMachinesUsingGETWithHttpInfo(Pagination, filter);

                ReturnValue.AddRange(localVarResponse.Data);

                if (!CustomHelpers.PaginationHelpers.HasMoreRecords(localVarResponse.Headers))
                {
                    break;
                }
                else
                {
                    Pagination.page += 1;
                }
            }
            return ReturnValue;

            //ApiResponse<List<MachineInfo>> localVarResponse = ListMachinesUsingGETWithHttpInfo();
            //return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the Machines in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;MachineInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MachineInfo&gt;</returns>
        public ApiResponse<List<MachineInfo>> ListMachinesUsingGETWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null)
        {

            var localVarPath = "./inventory/v1/machines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            if (!string.IsNullOrEmpty(filter))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter));
            }

            if (Pagination != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", Pagination.page));
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", Pagination.size));
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMachinesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MachineInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<MachineInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MachineInfo>)));
        }

        /// <summary>
        /// Lists the Machines in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;MachineInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MachineInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<MachineInfo>> ListMachinesUsingGETAsync(CustomModel.Pagination Pagination = null, string filter = null)
        {
            List<MachineInfo> ReturnValue = new List<MachineInfo>();
            Pagination = CustomHelpers.PaginationHelpers.ValidatePagination(Pagination);

            while (true)
            {
                ApiResponse<List<MachineInfo>> localVarResponse = await ListMachinesUsingGETAsyncWithHttpInfo(Pagination,filter);

                lock (ReturnValue)
                {
                    ReturnValue.AddRange(localVarResponse.Data);

                    if (!CustomHelpers.PaginationHelpers.HasMoreRecords(localVarResponse.Headers))
                    {
                        break;
                    }
                    else
                    {
                        Pagination.page += 1;
                    }
                }
            }
            return ReturnValue;

            //ApiResponse<List<MachineInfo>> localVarResponse = await ListMachinesUsingGETAsyncWithHttpInfo();
            //return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the Machines in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; need to be sent.&lt;br/&gt;For Filters, refer to &#39;MachineInfo&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MachineInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MachineInfo>>> ListMachinesUsingGETAsyncWithHttpInfo(CustomModel.Pagination Pagination = null, string filter = null)
        {

            var localVarPath = "./inventory/v1/machines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            if (!string.IsNullOrEmpty(filter))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter));
            }

            if (Pagination != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", Pagination.page));
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", Pagination.size));
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMachinesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MachineInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<MachineInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MachineInfo>)));
        }

        /// <summary>
        /// Lists the Session information in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt;.&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SessionInfo&gt;</returns>
        public List<SessionInfo> ListSessionInfo(CustomModel.Pagination Pagination = null)
        {
            List<SessionInfo> ReturnValue = new List<SessionInfo>();
            Pagination = CustomHelpers.PaginationHelpers.ValidatePagination(Pagination);

            while (true)
            {
                ApiResponse<List<SessionInfo>> localVarResponse =  ListSessionInfoWithHttpInfo(Pagination);

                ReturnValue.AddRange(localVarResponse.Data);

                if (!CustomHelpers.PaginationHelpers.HasMoreRecords(localVarResponse.Headers))
                {
                    break;
                }
                else
                {
                    Pagination.page += 1;
                }
            }
            return ReturnValue;
        }

        /// <summary>
        /// Lists the Session information in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt;.&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SessionInfo&gt;</returns>
        public ApiResponse<List<SessionInfo>> ListSessionInfoWithHttpInfo(CustomModel.Pagination Pagination = null)
        {

            var localVarPath = "./inventory/v1/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            if (Pagination != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", Pagination.page));
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", Pagination.size));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSessionInfo", localVarResponse);
                if (exception != null) throw exception;
            }


            return new ApiResponse<List<SessionInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<SessionInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SessionInfo>)));
        }

        /// <summary>
        /// Lists the Session information in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt;.&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SessionInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<SessionInfo>> ListSessionInfoAsync(CustomModel.Pagination Pagination = null)
        {

            List<SessionInfo> ReturnValue = new List<SessionInfo>();
            Pagination = CustomHelpers.PaginationHelpers.ValidatePagination(Pagination);

            while (true)
            {
                ApiResponse<List<SessionInfo>> localVarResponse = await ListSessionInfoAsyncWithHttpInfo(Pagination);

                lock (ReturnValue)
                {
                    ReturnValue.AddRange(localVarResponse.Data);

                    if (!CustomHelpers.PaginationHelpers.HasMoreRecords(localVarResponse.Headers))
                    {
                        break;
                    }
                    else
                    {
                        Pagination.page += 1;
                    }
                }
            }
            return ReturnValue;
        }

        /// <summary>
        /// Lists the Session information in the environment. This API supports &lt;b&gt;Pagination&lt;/b&gt;.&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SessionInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SessionInfo>>> ListSessionInfoAsyncWithHttpInfo(CustomModel.Pagination Pagination = null)
        {

            var localVarPath = "./inventory/v1/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSessionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SessionInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<SessionInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SessionInfo>)));
        }

        /// <summary>
        /// Logs off user sessions, if they are not locked. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be logged off.</param>
        /// <param name="forced">Indicates to Log off session forcibly.  If passed as \&quot;true\&quot;, then sessions are logoff forcibly, even if they are locked.  If passed as \&quot;false\&quot; or not passed at all, then sessions will be normally logged off, if they are not locked. (optional, default to false)</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> LogOffSessions(List<string> body, bool? forced = null)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = LogOffSessionsWithHttpInfo(body, forced);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs off user sessions, if they are not locked. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be logged off.</param>
        /// <param name="forced">Indicates to Log off session forcibly.  If passed as \&quot;true\&quot;, then sessions are logoff forcibly, even if they are locked.  If passed as \&quot;false\&quot; or not passed at all, then sessions will be normally logged off, if they are not locked. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> LogOffSessionsWithHttpInfo(List<string> body, bool? forced = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->LogOffSessions");

            var localVarPath = "./inventory/v1/sessions/action/logoff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (forced != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forced", forced)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogOffSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Logs off user sessions, if they are not locked. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be logged off.</param>
        /// <param name="forced">Indicates to Log off session forcibly.  If passed as \&quot;true\&quot;, then sessions are logoff forcibly, even if they are locked.  If passed as \&quot;false\&quot; or not passed at all, then sessions will be normally logged off, if they are not locked. (optional, default to false)</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> LogOffSessionsAsync(List<string> body, bool? forced = null)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await LogOffSessionsAsyncWithHttpInfo(body, forced);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Logs off user sessions, if they are not locked. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be logged off.</param>
        /// <param name="forced">Indicates to Log off session forcibly.  If passed as \&quot;true\&quot;, then sessions are logoff forcibly, even if they are locked.  If passed as \&quot;false\&quot; or not passed at all, then sessions will be normally logged off, if they are not locked. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> LogOffSessionsAsyncWithHttpInfo(List<string> body, bool? forced = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->LogOffSessions");

            var localVarPath = "./inventory/v1/sessions/action/logoff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (forced != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forced", forced)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogOffSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Rebuilds the specified machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be rebuilt.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> RebuildMachines(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = RebuildMachinesWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rebuilds the specified machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be rebuilt.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> RebuildMachinesWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->RebuildMachines");

            var localVarPath = "./inventory/v1/machines/action/rebuild";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RebuildMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Rebuilds the specified machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be rebuilt.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> RebuildMachinesAsync(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await RebuildMachinesAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Rebuilds the specified machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be rebuilt.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> RebuildMachinesAsyncWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->RebuildMachines");

            var localVarPath = "./inventory/v1/machines/action/rebuild";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RebuildMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Recovers the specified machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be recovered.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> RecoverMachines(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = RecoverMachinesWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recovers the specified machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be recovered.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> RecoverMachinesWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->RecoverMachines");

            var localVarPath = "./inventory/v1/machines/action/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecoverMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Recovers the specified machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be recovered.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> RecoverMachinesAsync(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await RecoverMachinesAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Recovers the specified machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be recovered.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> RecoverMachinesAsyncWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->RecoverMachines");

            var localVarPath = "./inventory/v1/machines/action/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecoverMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Removes machines from the given manual desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be removed from the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> RemoveMachines(List<string> body, string id)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = RemoveMachinesWithHttpInfo(body, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes machines from the given manual desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be removed from the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> RemoveMachinesWithHttpInfo(List<string> body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->RemoveMachines");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->RemoveMachines");

            var localVarPath = "./inventory/v1/desktop-pools/{id}/action/remove-machines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Removes machines from the given manual desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be removed from the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> RemoveMachinesAsync(List<string> body, string id)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await RemoveMachinesAsyncWithHttpInfo(body, id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Removes machines from the given manual desktop pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be removed from the desktop pool.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> RemoveMachinesAsyncWithHttpInfo(List<string> body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->RemoveMachines");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->RemoveMachines");

            var localVarPath = "./inventory/v1/desktop-pools/{id}/action/remove-machines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Resets the specified machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be reset.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> ResetMachines(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = ResetMachinesWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resets the specified machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be reset.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> ResetMachinesWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->ResetMachines");

            var localVarPath = "./inventory/v1/machines/action/reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Resets the specified machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be reset.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> ResetMachinesAsync(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await ResetMachinesAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Resets the specified machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be reset.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> ResetMachinesAsyncWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->ResetMachines");

            var localVarPath = "./inventory/v1/machines/action/reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Resets machine of user sessions. The machine must be managed by Virtual Center and the session cannot be an application or an RDS desktop session. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be reset.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> ResetSessions(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = ResetSessionsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resets machine of user sessions. The machine must be managed by Virtual Center and the session cannot be an application or an RDS desktop session. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be reset.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> ResetSessionsWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->ResetSessions");

            var localVarPath = "./inventory/v1/sessions/action/reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Resets machine of user sessions. The machine must be managed by Virtual Center and the session cannot be an application or an RDS desktop session. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be reset.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> ResetSessionsAsync(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await ResetSessionsAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Resets machine of user sessions. The machine must be managed by Virtual Center and the session cannot be an application or an RDS desktop session. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be reset.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> ResetSessionsAsyncWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->ResetSessions");

            var localVarPath = "./inventory/v1/sessions/action/reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Restarts the specified machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be restarted.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> RestartMachines(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = RestartMachinesWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restarts the specified machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be restarted.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> RestartMachinesWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->RestartMachines");

            var localVarPath = "./inventory/v1/machines/action/restart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestartMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Restarts the specified machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be restarted.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> RestartMachinesAsync(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await RestartMachinesAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Restarts the specified machines. Each response entity in the result corresponds to a machine id in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Machine Ids representing the machines to be restarted.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> RestartMachinesAsyncWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->RestartMachines");

            var localVarPath = "./inventory/v1/machines/action/restart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestartMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Restarts machine of user sessions. The machine must be managed by Virtual Center and the session cannot be an application or an RDS desktop session. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be restarted.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> RestartSessions(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = RestartSessionsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restarts machine of user sessions. The machine must be managed by Virtual Center and the session cannot be an application or an RDS desktop session. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be restarted.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> RestartSessionsWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->RestartSessions");

            var localVarPath = "./inventory/v1/sessions/action/restart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestartSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Restarts machine of user sessions. The machine must be managed by Virtual Center and the session cannot be an application or an RDS desktop session. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be restarted.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> RestartSessionsAsync(List<string> body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await RestartSessionsAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Restarts machine of user sessions. The machine must be managed by Virtual Center and the session cannot be an application or an RDS desktop session. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of session ids to be restarted.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> RestartSessionsAsyncWithHttpInfo(List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->RestartSessions");

            var localVarPath = "./inventory/v1/sessions/action/restart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestartSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Sends the message to user sessions 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Message information object to be sent to sessions.</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> SendMessageToSessions(SessionSendMessageSpec body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = SendMessageToSessionsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sends the message to user sessions 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Message information object to be sent to sessions.</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> SendMessageToSessionsWithHttpInfo(SessionSendMessageSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->SendMessageToSessions");

            var localVarPath = "./inventory/v1/sessions/action/send-message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessageToSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Sends the message to user sessions 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Message information object to be sent to sessions.</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> SendMessageToSessionsAsync(SessionSendMessageSpec body)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await SendMessageToSessionsAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Sends the message to user sessions 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Message information object to be sent to sessions.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> SendMessageToSessionsAsyncWithHttpInfo(SessionSendMessageSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->SendMessageToSessions");

            var localVarPath = "./inventory/v1/sessions/action/send-message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessageToSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Un-assigns the specified users from the machine. Each response entity in the result corresponds to a user SID in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of User SIDs representing the users to be un-assigned from the machine.</param>
        /// <param name="id">id</param>
        /// <returns>List&lt;BulkItemResponseInfo&gt;</returns>
        public List<BulkItemResponseInfo> UnassignUsers(List<string> body, string id)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = UnassignUsersWithHttpInfo(body, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Un-assigns the specified users from the machine. Each response entity in the result corresponds to a user SID in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of User SIDs representing the users to be un-assigned from the machine.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;BulkItemResponseInfo&gt;</returns>
        public ApiResponse<List<BulkItemResponseInfo>> UnassignUsersWithHttpInfo(List<string> body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->UnassignUsers");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->UnassignUsers");

            var localVarPath = "./inventory/v1/machines/{id}/action/unassign-users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnassignUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Un-assigns the specified users from the machine. Each response entity in the result corresponds to a user SID in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of User SIDs representing the users to be un-assigned from the machine.</param>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;BulkItemResponseInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkItemResponseInfo>> UnassignUsersAsync(List<string> body, string id)
        {
            ApiResponse<List<BulkItemResponseInfo>> localVarResponse = await UnassignUsersAsyncWithHttpInfo(body, id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Un-assigns the specified users from the machine. Each response entity in the result corresponds to a user SID in the input.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of User SIDs representing the users to be un-assigned from the machine.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;BulkItemResponseInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BulkItemResponseInfo>>> UnassignUsersAsyncWithHttpInfo(List<string> body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->UnassignUsers");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->UnassignUsers");

            var localVarPath = "./inventory/v1/machines/{id}/action/unassign-users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnassignUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BulkItemResponseInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BulkItemResponseInfo>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BulkItemResponseInfo>)));
        }

        /// <summary>
        /// Updates application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Application pool object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void UpdateApplicationPool(ApplicationPoolUpdateSpec body, string id)
        {
            UpdateApplicationPoolWithHttpInfo(body, id);
        }

        /// <summary>
        /// Updates application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Application pool object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateApplicationPoolWithHttpInfo(ApplicationPoolUpdateSpec body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->UpdateApplicationPool");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->UpdateApplicationPool");

            var localVarPath = "./inventory/v1/application-pools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplicationPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Application pool object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateApplicationPoolAsync(ApplicationPoolUpdateSpec body, string id)
        {
            await UpdateApplicationPoolAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Updates application pool. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Application pool object to be updated.</param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApplicationPoolAsyncWithHttpInfo(ApplicationPoolUpdateSpec body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->UpdateApplicationPool");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InventoryApi->UpdateApplicationPool");

            var localVarPath = "./inventory/v1/application-pools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplicationPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
