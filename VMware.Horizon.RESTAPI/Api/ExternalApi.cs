/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using VMware.Horizon.RESTAPI.Client;
using VMware.Horizon.RESTAPI.Model;

namespace VMware.Horizon.RESTAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExternalApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Changes the password of AD User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">AD user password object to be changed.</param>
        /// <returns>ADUserInfo</returns>
        ADUserInfo ChangeUserPassword (ADUserChangePasswordSpec body);

        /// <summary>
        /// Changes the password of AD User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">AD user password object to be changed.</param>
        /// <returns>ApiResponse of ADUserInfo</returns>
        ApiResponse<ADUserInfo> ChangeUserPasswordWithHttpInfo (ADUserChangePasswordSpec body);
        /// <summary>
        /// Get information related to AD User or Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ADUserOrGroupInfo</returns>
        ADUserOrGroupInfo GetADUserOrGroupInfo (string id);

        /// <summary>
        /// Get information related to AD User or Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ADUserOrGroupInfo</returns>
        ApiResponse<ADUserOrGroupInfo> GetADUserOrGroupInfoWithHttpInfo (string id);
        /// <summary>
        /// Lists information related to AD Domains of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ADDomainInfo&gt;</returns>
        List<ADDomainInfo> ListADDomains ();

        /// <summary>
        /// Lists information related to AD Domains of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ADDomainInfo&gt;</returns>
        ApiResponse<List<ADDomainInfo>> ListADDomainsWithHttpInfo ();
        /// <summary>
        /// Lists AD users or groups information.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;For Filters, refer to &#39;ADUserOrGroupSummary&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupOnly">Presence of this query param indicates to filter only groups or only users.   If passed as \&quot;true\&quot;, then only groups are returned.  If passed as \&quot;false\&quot;, then only users are returned.  If not passed passed at all, then both types are returned. (optional)</param>
        /// <returns>List&lt;ADUserOrGroupSummary&gt;</returns>
        List<ADUserOrGroupSummary> ListADUserOrGroupSummary (string groupOnly = null);

        /// <summary>
        /// Lists AD users or groups information.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;For Filters, refer to &#39;ADUserOrGroupSummary&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupOnly">Presence of this query param indicates to filter only groups or only users.   If passed as \&quot;true\&quot;, then only groups are returned.  If passed as \&quot;false\&quot;, then only users are returned.  If not passed passed at all, then both types are returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;ADUserOrGroupSummary&gt;</returns>
        ApiResponse<List<ADUserOrGroupSummary>> ListADUserOrGroupSummaryWithHttpInfo (string groupOnly = null);
        /// <summary>
        /// Lists all the VM snapshots from the vCenter for a given VM.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseVmId">VM ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>List&lt;BaseSnapshotInfo&gt;</returns>
        List<BaseSnapshotInfo> ListBaseSnapshots (string baseVmId, string vcenterId);

        /// <summary>
        /// Lists all the VM snapshots from the vCenter for a given VM.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseVmId">VM ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>ApiResponse of List&lt;BaseSnapshotInfo&gt;</returns>
        ApiResponse<List<BaseSnapshotInfo>> ListBaseSnapshotsWithHttpInfo (string baseVmId, string vcenterId);
        /// <summary>
        /// Lists all the VMs from a vCenter or a datacenter in that vCenter which may be suitable as snapshots for instant/linked clone desktop or farm creation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="datacenterId">Datacenter ID (optional)</param>
        /// <returns>List&lt;BaseVMInfo&gt;</returns>
        List<BaseVMInfo> ListBaseVMs (string vcenterId, string datacenterId = null);

        /// <summary>
        /// Lists all the VMs from a vCenter or a datacenter in that vCenter which may be suitable as snapshots for instant/linked clone desktop or farm creation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="datacenterId">Datacenter ID (optional)</param>
        /// <returns>ApiResponse of List&lt;BaseVMInfo&gt;</returns>
        ApiResponse<List<BaseVMInfo>> ListBaseVMsWithHttpInfo (string vcenterId, string datacenterId = null);
        /// <summary>
        /// Lists all the customization specifications from the vCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>List&lt;CustomizationSpecInfo&gt;</returns>
        List<CustomizationSpecInfo> ListCustomizationSpecs (string vcenterId);

        /// <summary>
        /// Lists all the customization specifications from the vCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>ApiResponse of List&lt;CustomizationSpecInfo&gt;</returns>
        ApiResponse<List<CustomizationSpecInfo>> ListCustomizationSpecsWithHttpInfo (string vcenterId);
        /// <summary>
        /// Lists all the datacenters of a vCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>List&lt;DatacenterInfo&gt;</returns>
        List<DatacenterInfo> ListDatacenters (string vcenterId);

        /// <summary>
        /// Lists all the datacenters of a vCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>ApiResponse of List&lt;DatacenterInfo&gt;</returns>
        ApiResponse<List<DatacenterInfo>> ListDatacentersWithHttpInfo (string vcenterId);
        /// <summary>
        /// Lists all the folder paths within a Datastore from vCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datastoreId">Datastore ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>List&lt;DatastorePathInfo&gt;</returns>
        List<DatastorePathInfo> ListDatastorePaths (string datastoreId, string vcenterId);

        /// <summary>
        /// Lists all the folder paths within a Datastore from vCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datastoreId">Datastore ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>ApiResponse of List&lt;DatastorePathInfo&gt;</returns>
        ApiResponse<List<DatastorePathInfo>> ListDatastorePathsWithHttpInfo (string datastoreId, string vcenterId);
        /// <summary>
        /// Lists all the hosts or clusters of the datacenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datacenterId">Datacenter ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>List&lt;HostOrClusterInfo&gt;</returns>
        List<HostOrClusterInfo> ListHostsOrClusters (string datacenterId, string vcenterId);

        /// <summary>
        /// Lists all the hosts or clusters of the datacenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datacenterId">Datacenter ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>ApiResponse of List&lt;HostOrClusterInfo&gt;</returns>
        ApiResponse<List<HostOrClusterInfo>> ListHostsOrClustersWithHttpInfo (string datacenterId, string vcenterId);
        /// <summary>
        /// Returns a list of network interface cards (NICs) suitable for configuration on a desktop pool/farm.
        /// </summary>
        /// <remarks>
        /// If the base VM and snapshot are specified, then the NICs  present on the given snapshot are listed.&lt;br/&gt; If the template is specified then the NICs present on the given template are listed.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="baseSnapshotId">Base Snapshot ID (optional)</param>
        /// <param name="baseVmId">Base VM ID (optional)</param>
        /// <param name="vmTemplateId">VM Template ID (optional)</param>
        /// <returns>List&lt;NetworkInterfaceCardInfo&gt;</returns>
        List<NetworkInterfaceCardInfo> ListNetworkInterfaceCards (string vcenterId, string baseSnapshotId = null, string baseVmId = null, string vmTemplateId = null);

        /// <summary>
        /// Returns a list of network interface cards (NICs) suitable for configuration on a desktop pool/farm.
        /// </summary>
        /// <remarks>
        /// If the base VM and snapshot are specified, then the NICs  present on the given snapshot are listed.&lt;br/&gt; If the template is specified then the NICs present on the given template are listed.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="baseSnapshotId">Base Snapshot ID (optional)</param>
        /// <param name="baseVmId">Base VM ID (optional)</param>
        /// <param name="vmTemplateId">VM Template ID (optional)</param>
        /// <returns>ApiResponse of List&lt;NetworkInterfaceCardInfo&gt;</returns>
        ApiResponse<List<NetworkInterfaceCardInfo>> ListNetworkInterfaceCardsWithHttpInfo (string vcenterId, string baseSnapshotId = null, string baseVmId = null, string vmTemplateId = null);
        /// <summary>
        /// Retrieves all network labels on the given host or cluster
        /// </summary>
        /// <remarks>
        /// API retrieves by filtering on the network type (if specified) that may be suitable for configuration with a desktop pool/farm&#39;s network interface card.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="networkType">Network Type * NETWORK: Standard network. * OPAQUE_NETWORK: Opaque network. * DISTRUBUTED_VIRTUAL_PORT_GROUP: DVS Port group. (optional)</param>
        /// <returns>List&lt;NetworkLabelInfo&gt;</returns>
        List<NetworkLabelInfo> ListNetworkLabels (string hostOrClusterId, string vcenterId, string networkType = null);

        /// <summary>
        /// Retrieves all network labels on the given host or cluster
        /// </summary>
        /// <remarks>
        /// API retrieves by filtering on the network type (if specified) that may be suitable for configuration with a desktop pool/farm&#39;s network interface card.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="networkType">Network Type * NETWORK: Standard network. * OPAQUE_NETWORK: Opaque network. * DISTRUBUTED_VIRTUAL_PORT_GROUP: DVS Port group. (optional)</param>
        /// <returns>ApiResponse of List&lt;NetworkLabelInfo&gt;</returns>
        ApiResponse<List<NetworkLabelInfo>> ListNetworkLabelsWithHttpInfo (string hostOrClusterId, string vcenterId, string networkType = null);
        /// <summary>
        /// Lists all the resource pools from the vCenter for the given host or cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>List&lt;ResourcePoolInfo&gt;</returns>
        List<ResourcePoolInfo> ListResourcePools (string hostOrClusterId, string vcenterId);

        /// <summary>
        /// Lists all the resource pools from the vCenter for the given host or cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>ApiResponse of List&lt;ResourcePoolInfo&gt;</returns>
        ApiResponse<List<ResourcePoolInfo>> ListResourcePoolsWithHttpInfo (string hostOrClusterId, string vcenterId);
        /// <summary>
        /// Lists all the VM folders from the vCenter for the given datacenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datacenterId">Datacenter ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>List&lt;VMFolderInfo&gt;</returns>
        List<VMFolderInfo> ListVMFolders (string datacenterId, string vcenterId);

        /// <summary>
        /// Lists all the VM folders from the vCenter for the given datacenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datacenterId">Datacenter ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>ApiResponse of List&lt;VMFolderInfo&gt;</returns>
        ApiResponse<List<VMFolderInfo>> ListVMFoldersWithHttpInfo (string datacenterId, string vcenterId);
        /// <summary>
        /// Lists all the VM templates from a vCenter or a datacenter for the given vCenter which may be suitable for full clone desktop pool creation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="datacenterId">Datacenter ID (optional)</param>
        /// <returns>List&lt;VMTemplateInfo&gt;</returns>
        List<VMTemplateInfo> ListVMTemplates (string vcenterId, string datacenterId = null);

        /// <summary>
        /// Lists all the VM templates from a vCenter or a datacenter for the given vCenter which may be suitable for full clone desktop pool creation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="datacenterId">Datacenter ID (optional)</param>
        /// <returns>ApiResponse of List&lt;VMTemplateInfo&gt;</returns>
        ApiResponse<List<VMTemplateInfo>> ListVMTemplatesWithHttpInfo (string vcenterId, string datacenterId = null);
        /// <summary>
        /// Lists all the datastoress from the vCenter for the given host or cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>List&lt;DatastoreInfo&gt;</returns>
        List<DatastoreInfo> Listdatastores (string hostOrClusterId, string vcenterId);

        /// <summary>
        /// Lists all the datastoress from the vCenter for the given host or cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>ApiResponse of List&lt;DatastoreInfo&gt;</returns>
        ApiResponse<List<DatastoreInfo>> ListdatastoresWithHttpInfo (string hostOrClusterId, string vcenterId);
        /// <summary>
        /// Validates the encrypted credentials of AD User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">AD user encrypted credentials object to be validated.</param>
        /// <returns>ADUserInfo</returns>
        ADUserInfo ValidateADUserEncryptedCredentials (ADUserEncryptedCredentialSpec body);

        /// <summary>
        /// Validates the encrypted credentials of AD User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">AD user encrypted credentials object to be validated.</param>
        /// <returns>ApiResponse of ADUserInfo</returns>
        ApiResponse<ADUserInfo> ValidateADUserEncryptedCredentialsWithHttpInfo (ADUserEncryptedCredentialSpec body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Changes the password of AD User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">AD user password object to be changed.</param>
        /// <returns>Task of ADUserInfo</returns>
        System.Threading.Tasks.Task<ADUserInfo> ChangeUserPasswordAsync (ADUserChangePasswordSpec body);

        /// <summary>
        /// Changes the password of AD User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">AD user password object to be changed.</param>
        /// <returns>Task of ApiResponse (ADUserInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ADUserInfo>> ChangeUserPasswordAsyncWithHttpInfo (ADUserChangePasswordSpec body);
        /// <summary>
        /// Get information related to AD User or Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ADUserOrGroupInfo</returns>
        System.Threading.Tasks.Task<ADUserOrGroupInfo> GetADUserOrGroupInfoAsync (string id);

        /// <summary>
        /// Get information related to AD User or Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ADUserOrGroupInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ADUserOrGroupInfo>> GetADUserOrGroupInfoAsyncWithHttpInfo (string id);
        /// <summary>
        /// Lists information related to AD Domains of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ADDomainInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ADDomainInfo>> ListADDomainsAsync ();

        /// <summary>
        /// Lists information related to AD Domains of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ADDomainInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ADDomainInfo>>> ListADDomainsAsyncWithHttpInfo ();
        /// <summary>
        /// Lists AD users or groups information.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;For Filters, refer to &#39;ADUserOrGroupSummary&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupOnly">Presence of this query param indicates to filter only groups or only users.   If passed as \&quot;true\&quot;, then only groups are returned.  If passed as \&quot;false\&quot;, then only users are returned.  If not passed passed at all, then both types are returned. (optional)</param>
        /// <returns>Task of List&lt;ADUserOrGroupSummary&gt;</returns>
        System.Threading.Tasks.Task<List<ADUserOrGroupSummary>> ListADUserOrGroupSummaryAsync (string groupOnly = null);

        /// <summary>
        /// Lists AD users or groups information.
        /// </summary>
        /// <remarks>
        /// This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;For Filters, refer to &#39;ADUserOrGroupSummary&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupOnly">Presence of this query param indicates to filter only groups or only users.   If passed as \&quot;true\&quot;, then only groups are returned.  If passed as \&quot;false\&quot;, then only users are returned.  If not passed passed at all, then both types are returned. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ADUserOrGroupSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ADUserOrGroupSummary>>> ListADUserOrGroupSummaryAsyncWithHttpInfo (string groupOnly = null);
        /// <summary>
        /// Lists all the VM snapshots from the vCenter for a given VM.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseVmId">VM ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of List&lt;BaseSnapshotInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BaseSnapshotInfo>> ListBaseSnapshotsAsync (string baseVmId, string vcenterId);

        /// <summary>
        /// Lists all the VM snapshots from the vCenter for a given VM.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseVmId">VM ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of ApiResponse (List&lt;BaseSnapshotInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BaseSnapshotInfo>>> ListBaseSnapshotsAsyncWithHttpInfo (string baseVmId, string vcenterId);
        /// <summary>
        /// Lists all the VMs from a vCenter or a datacenter in that vCenter which may be suitable as snapshots for instant/linked clone desktop or farm creation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="datacenterId">Datacenter ID (optional)</param>
        /// <returns>Task of List&lt;BaseVMInfo&gt;</returns>
        System.Threading.Tasks.Task<List<BaseVMInfo>> ListBaseVMsAsync (string vcenterId, string datacenterId = null);

        /// <summary>
        /// Lists all the VMs from a vCenter or a datacenter in that vCenter which may be suitable as snapshots for instant/linked clone desktop or farm creation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="datacenterId">Datacenter ID (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BaseVMInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BaseVMInfo>>> ListBaseVMsAsyncWithHttpInfo (string vcenterId, string datacenterId = null);
        /// <summary>
        /// Lists all the customization specifications from the vCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of List&lt;CustomizationSpecInfo&gt;</returns>
        System.Threading.Tasks.Task<List<CustomizationSpecInfo>> ListCustomizationSpecsAsync (string vcenterId);

        /// <summary>
        /// Lists all the customization specifications from the vCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of ApiResponse (List&lt;CustomizationSpecInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomizationSpecInfo>>> ListCustomizationSpecsAsyncWithHttpInfo (string vcenterId);
        /// <summary>
        /// Lists all the datacenters of a vCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of List&lt;DatacenterInfo&gt;</returns>
        System.Threading.Tasks.Task<List<DatacenterInfo>> ListDatacentersAsync (string vcenterId);

        /// <summary>
        /// Lists all the datacenters of a vCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of ApiResponse (List&lt;DatacenterInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatacenterInfo>>> ListDatacentersAsyncWithHttpInfo (string vcenterId);
        /// <summary>
        /// Lists all the folder paths within a Datastore from vCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datastoreId">Datastore ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of List&lt;DatastorePathInfo&gt;</returns>
        System.Threading.Tasks.Task<List<DatastorePathInfo>> ListDatastorePathsAsync (string datastoreId, string vcenterId);

        /// <summary>
        /// Lists all the folder paths within a Datastore from vCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datastoreId">Datastore ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of ApiResponse (List&lt;DatastorePathInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatastorePathInfo>>> ListDatastorePathsAsyncWithHttpInfo (string datastoreId, string vcenterId);
        /// <summary>
        /// Lists all the hosts or clusters of the datacenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datacenterId">Datacenter ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of List&lt;HostOrClusterInfo&gt;</returns>
        System.Threading.Tasks.Task<List<HostOrClusterInfo>> ListHostsOrClustersAsync (string datacenterId, string vcenterId);

        /// <summary>
        /// Lists all the hosts or clusters of the datacenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datacenterId">Datacenter ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of ApiResponse (List&lt;HostOrClusterInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HostOrClusterInfo>>> ListHostsOrClustersAsyncWithHttpInfo (string datacenterId, string vcenterId);
        /// <summary>
        /// Returns a list of network interface cards (NICs) suitable for configuration on a desktop pool/farm.
        /// </summary>
        /// <remarks>
        /// If the base VM and snapshot are specified, then the NICs  present on the given snapshot are listed.&lt;br/&gt; If the template is specified then the NICs present on the given template are listed.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="baseSnapshotId">Base Snapshot ID (optional)</param>
        /// <param name="baseVmId">Base VM ID (optional)</param>
        /// <param name="vmTemplateId">VM Template ID (optional)</param>
        /// <returns>Task of List&lt;NetworkInterfaceCardInfo&gt;</returns>
        System.Threading.Tasks.Task<List<NetworkInterfaceCardInfo>> ListNetworkInterfaceCardsAsync (string vcenterId, string baseSnapshotId = null, string baseVmId = null, string vmTemplateId = null);

        /// <summary>
        /// Returns a list of network interface cards (NICs) suitable for configuration on a desktop pool/farm.
        /// </summary>
        /// <remarks>
        /// If the base VM and snapshot are specified, then the NICs  present on the given snapshot are listed.&lt;br/&gt; If the template is specified then the NICs present on the given template are listed.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="baseSnapshotId">Base Snapshot ID (optional)</param>
        /// <param name="baseVmId">Base VM ID (optional)</param>
        /// <param name="vmTemplateId">VM Template ID (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NetworkInterfaceCardInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NetworkInterfaceCardInfo>>> ListNetworkInterfaceCardsAsyncWithHttpInfo (string vcenterId, string baseSnapshotId = null, string baseVmId = null, string vmTemplateId = null);
        /// <summary>
        /// Retrieves all network labels on the given host or cluster
        /// </summary>
        /// <remarks>
        /// API retrieves by filtering on the network type (if specified) that may be suitable for configuration with a desktop pool/farm&#39;s network interface card.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="networkType">Network Type * NETWORK: Standard network. * OPAQUE_NETWORK: Opaque network. * DISTRUBUTED_VIRTUAL_PORT_GROUP: DVS Port group. (optional)</param>
        /// <returns>Task of List&lt;NetworkLabelInfo&gt;</returns>
        System.Threading.Tasks.Task<List<NetworkLabelInfo>> ListNetworkLabelsAsync (string hostOrClusterId, string vcenterId, string networkType = null);

        /// <summary>
        /// Retrieves all network labels on the given host or cluster
        /// </summary>
        /// <remarks>
        /// API retrieves by filtering on the network type (if specified) that may be suitable for configuration with a desktop pool/farm&#39;s network interface card.
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="networkType">Network Type * NETWORK: Standard network. * OPAQUE_NETWORK: Opaque network. * DISTRUBUTED_VIRTUAL_PORT_GROUP: DVS Port group. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NetworkLabelInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NetworkLabelInfo>>> ListNetworkLabelsAsyncWithHttpInfo (string hostOrClusterId, string vcenterId, string networkType = null);
        /// <summary>
        /// Lists all the resource pools from the vCenter for the given host or cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of List&lt;ResourcePoolInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ResourcePoolInfo>> ListResourcePoolsAsync (string hostOrClusterId, string vcenterId);

        /// <summary>
        /// Lists all the resource pools from the vCenter for the given host or cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of ApiResponse (List&lt;ResourcePoolInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResourcePoolInfo>>> ListResourcePoolsAsyncWithHttpInfo (string hostOrClusterId, string vcenterId);
        /// <summary>
        /// Lists all the VM folders from the vCenter for the given datacenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datacenterId">Datacenter ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of List&lt;VMFolderInfo&gt;</returns>
        System.Threading.Tasks.Task<List<VMFolderInfo>> ListVMFoldersAsync (string datacenterId, string vcenterId);

        /// <summary>
        /// Lists all the VM folders from the vCenter for the given datacenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datacenterId">Datacenter ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of ApiResponse (List&lt;VMFolderInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VMFolderInfo>>> ListVMFoldersAsyncWithHttpInfo (string datacenterId, string vcenterId);
        /// <summary>
        /// Lists all the VM templates from a vCenter or a datacenter for the given vCenter which may be suitable for full clone desktop pool creation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="datacenterId">Datacenter ID (optional)</param>
        /// <returns>Task of List&lt;VMTemplateInfo&gt;</returns>
        System.Threading.Tasks.Task<List<VMTemplateInfo>> ListVMTemplatesAsync (string vcenterId, string datacenterId = null);

        /// <summary>
        /// Lists all the VM templates from a vCenter or a datacenter for the given vCenter which may be suitable for full clone desktop pool creation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="datacenterId">Datacenter ID (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;VMTemplateInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VMTemplateInfo>>> ListVMTemplatesAsyncWithHttpInfo (string vcenterId, string datacenterId = null);
        /// <summary>
        /// Lists all the datastoress from the vCenter for the given host or cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of List&lt;DatastoreInfo&gt;</returns>
        System.Threading.Tasks.Task<List<DatastoreInfo>> ListdatastoresAsync (string hostOrClusterId, string vcenterId);

        /// <summary>
        /// Lists all the datastoress from the vCenter for the given host or cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of ApiResponse (List&lt;DatastoreInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatastoreInfo>>> ListdatastoresAsyncWithHttpInfo (string hostOrClusterId, string vcenterId);
        /// <summary>
        /// Validates the encrypted credentials of AD User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">AD user encrypted credentials object to be validated.</param>
        /// <returns>Task of ADUserInfo</returns>
        System.Threading.Tasks.Task<ADUserInfo> ValidateADUserEncryptedCredentialsAsync (ADUserEncryptedCredentialSpec body);

        /// <summary>
        /// Validates the encrypted credentials of AD User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">AD user encrypted credentials object to be validated.</param>
        /// <returns>Task of ApiResponse (ADUserInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ADUserInfo>> ValidateADUserEncryptedCredentialsAsyncWithHttpInfo (ADUserEncryptedCredentialSpec body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExternalApi : IExternalApi
    {
        private VMware.Horizon.RESTAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExternalApi(String basePath)
        {
            this.Configuration = new VMware.Horizon.RESTAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = VMware.Horizon.RESTAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExternalApi(VMware.Horizon.RESTAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = VMware.Horizon.RESTAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VMware.Horizon.RESTAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VMware.Horizon.RESTAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VMware.Horizon.RESTAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Changes the password of AD User 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">AD user password object to be changed.</param>
        /// <returns>ADUserInfo</returns>
        public ADUserInfo ChangeUserPassword (ADUserChangePasswordSpec body)
        {
             ApiResponse<ADUserInfo> localVarResponse = ChangeUserPasswordWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Changes the password of AD User 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">AD user password object to be changed.</param>
        /// <returns>ApiResponse of ADUserInfo</returns>
        public ApiResponse< ADUserInfo > ChangeUserPasswordWithHttpInfo (ADUserChangePasswordSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExternalApi->ChangeUserPassword");

            var localVarPath = "./external/v1/ad-users-or-groups/action/change-user-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ADUserInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ADUserInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ADUserInfo)));
        }

        /// <summary>
        /// Changes the password of AD User 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">AD user password object to be changed.</param>
        /// <returns>Task of ADUserInfo</returns>
        public async System.Threading.Tasks.Task<ADUserInfo> ChangeUserPasswordAsync (ADUserChangePasswordSpec body)
        {
             ApiResponse<ADUserInfo> localVarResponse = await ChangeUserPasswordAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Changes the password of AD User 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">AD user password object to be changed.</param>
        /// <returns>Task of ApiResponse (ADUserInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ADUserInfo>> ChangeUserPasswordAsyncWithHttpInfo (ADUserChangePasswordSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExternalApi->ChangeUserPassword");

            var localVarPath = "./external/v1/ad-users-or-groups/action/change-user-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ADUserInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ADUserInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ADUserInfo)));
        }

        /// <summary>
        /// Get information related to AD User or Group 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ADUserOrGroupInfo</returns>
        public ADUserOrGroupInfo GetADUserOrGroupInfo (string id)
        {
             ApiResponse<ADUserOrGroupInfo> localVarResponse = GetADUserOrGroupInfoWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information related to AD User or Group 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ADUserOrGroupInfo</returns>
        public ApiResponse< ADUserOrGroupInfo > GetADUserOrGroupInfoWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalApi->GetADUserOrGroupInfo");

            var localVarPath = "./external/v1/ad-users-or-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetADUserOrGroupInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ADUserOrGroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ADUserOrGroupInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ADUserOrGroupInfo)));
        }

        /// <summary>
        /// Get information related to AD User or Group 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ADUserOrGroupInfo</returns>
        public async System.Threading.Tasks.Task<ADUserOrGroupInfo> GetADUserOrGroupInfoAsync (string id)
        {
             ApiResponse<ADUserOrGroupInfo> localVarResponse = await GetADUserOrGroupInfoAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information related to AD User or Group 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ADUserOrGroupInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ADUserOrGroupInfo>> GetADUserOrGroupInfoAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalApi->GetADUserOrGroupInfo");

            var localVarPath = "./external/v1/ad-users-or-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetADUserOrGroupInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ADUserOrGroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ADUserOrGroupInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ADUserOrGroupInfo)));
        }

        /// <summary>
        /// Lists information related to AD Domains of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ADDomainInfo&gt;</returns>
        public List<ADDomainInfo> ListADDomains ()
        {
             ApiResponse<List<ADDomainInfo>> localVarResponse = ListADDomainsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists information related to AD Domains of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ADDomainInfo&gt;</returns>
        public ApiResponse< List<ADDomainInfo> > ListADDomainsWithHttpInfo ()
        {

            var localVarPath = "./external/v1/ad-domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListADDomains", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ADDomainInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ADDomainInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ADDomainInfo>)));
        }

        /// <summary>
        /// Lists information related to AD Domains of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ADDomainInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ADDomainInfo>> ListADDomainsAsync ()
        {
             ApiResponse<List<ADDomainInfo>> localVarResponse = await ListADDomainsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists information related to AD Domains of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ADDomainInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ADDomainInfo>>> ListADDomainsAsyncWithHttpInfo ()
        {

            var localVarPath = "./external/v1/ad-domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListADDomains", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ADDomainInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ADDomainInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ADDomainInfo>)));
        }

        /// <summary>
        /// Lists AD users or groups information. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;For Filters, refer to &#39;ADUserOrGroupSummary&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupOnly">Presence of this query param indicates to filter only groups or only users.   If passed as \&quot;true\&quot;, then only groups are returned.  If passed as \&quot;false\&quot;, then only users are returned.  If not passed passed at all, then both types are returned. (optional)</param>
        /// <returns>List&lt;ADUserOrGroupSummary&gt;</returns>
        public List<ADUserOrGroupSummary> ListADUserOrGroupSummary (string groupOnly = null)
        {
             ApiResponse<List<ADUserOrGroupSummary>> localVarResponse = ListADUserOrGroupSummaryWithHttpInfo(groupOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists AD users or groups information. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;For Filters, refer to &#39;ADUserOrGroupSummary&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupOnly">Presence of this query param indicates to filter only groups or only users.   If passed as \&quot;true\&quot;, then only groups are returned.  If passed as \&quot;false\&quot;, then only users are returned.  If not passed passed at all, then both types are returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;ADUserOrGroupSummary&gt;</returns>
        public ApiResponse< List<ADUserOrGroupSummary> > ListADUserOrGroupSummaryWithHttpInfo (string groupOnly = null)
        {

            var localVarPath = "./external/v1/ad-users-or-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group_only", groupOnly)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListADUserOrGroupSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ADUserOrGroupSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ADUserOrGroupSummary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ADUserOrGroupSummary>)));
        }

        /// <summary>
        /// Lists AD users or groups information. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;For Filters, refer to &#39;ADUserOrGroupSummary&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupOnly">Presence of this query param indicates to filter only groups or only users.   If passed as \&quot;true\&quot;, then only groups are returned.  If passed as \&quot;false\&quot;, then only users are returned.  If not passed passed at all, then both types are returned. (optional)</param>
        /// <returns>Task of List&lt;ADUserOrGroupSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<ADUserOrGroupSummary>> ListADUserOrGroupSummaryAsync (string groupOnly = null)
        {
             ApiResponse<List<ADUserOrGroupSummary>> localVarResponse = await ListADUserOrGroupSummaryAsyncWithHttpInfo(groupOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists AD users or groups information. This API supports &lt;b&gt;Pagination&lt;/b&gt; and &lt;b&gt;Filters.&lt;/b&gt;&lt;br/&gt;For Pagination, optional query params of &#39;page&#39; and &#39;size&#39; needs to be send.&lt;br/&gt;For Filters, refer to &#39;ADUserOrGroupSummary&#39; model description to find supported filters on specific field.&lt;br/&gt;For full information on using Filters, refer to &#39;Horizon Server REST Pagination and Filter Guide&#39; of &#39;VMware Horizon Server API&#39; in code.vmware.com
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupOnly">Presence of this query param indicates to filter only groups or only users.   If passed as \&quot;true\&quot;, then only groups are returned.  If passed as \&quot;false\&quot;, then only users are returned.  If not passed passed at all, then both types are returned. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ADUserOrGroupSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ADUserOrGroupSummary>>> ListADUserOrGroupSummaryAsyncWithHttpInfo (string groupOnly = null)
        {

            var localVarPath = "./external/v1/ad-users-or-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group_only", groupOnly)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListADUserOrGroupSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ADUserOrGroupSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ADUserOrGroupSummary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ADUserOrGroupSummary>)));
        }

        /// <summary>
        /// Lists all the VM snapshots from the vCenter for a given VM. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseVmId">VM ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>List&lt;BaseSnapshotInfo&gt;</returns>
        public List<BaseSnapshotInfo> ListBaseSnapshots (string baseVmId, string vcenterId)
        {
             ApiResponse<List<BaseSnapshotInfo>> localVarResponse = ListBaseSnapshotsWithHttpInfo(baseVmId, vcenterId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all the VM snapshots from the vCenter for a given VM. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseVmId">VM ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>ApiResponse of List&lt;BaseSnapshotInfo&gt;</returns>
        public ApiResponse< List<BaseSnapshotInfo> > ListBaseSnapshotsWithHttpInfo (string baseVmId, string vcenterId)
        {
            // verify the required parameter 'baseVmId' is set
            if (baseVmId == null)
                throw new ApiException(400, "Missing required parameter 'baseVmId' when calling ExternalApi->ListBaseSnapshots");
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListBaseSnapshots");

            var localVarPath = "./external/v1/base-snapshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (baseVmId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "base_vm_id", baseVmId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBaseSnapshots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BaseSnapshotInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BaseSnapshotInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BaseSnapshotInfo>)));
        }

        /// <summary>
        /// Lists all the VM snapshots from the vCenter for a given VM. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseVmId">VM ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of List&lt;BaseSnapshotInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BaseSnapshotInfo>> ListBaseSnapshotsAsync (string baseVmId, string vcenterId)
        {
             ApiResponse<List<BaseSnapshotInfo>> localVarResponse = await ListBaseSnapshotsAsyncWithHttpInfo(baseVmId, vcenterId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all the VM snapshots from the vCenter for a given VM. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseVmId">VM ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of ApiResponse (List&lt;BaseSnapshotInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BaseSnapshotInfo>>> ListBaseSnapshotsAsyncWithHttpInfo (string baseVmId, string vcenterId)
        {
            // verify the required parameter 'baseVmId' is set
            if (baseVmId == null)
                throw new ApiException(400, "Missing required parameter 'baseVmId' when calling ExternalApi->ListBaseSnapshots");
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListBaseSnapshots");

            var localVarPath = "./external/v1/base-snapshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (baseVmId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "base_vm_id", baseVmId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBaseSnapshots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BaseSnapshotInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BaseSnapshotInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BaseSnapshotInfo>)));
        }

        /// <summary>
        /// Lists all the VMs from a vCenter or a datacenter in that vCenter which may be suitable as snapshots for instant/linked clone desktop or farm creation. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="datacenterId">Datacenter ID (optional)</param>
        /// <returns>List&lt;BaseVMInfo&gt;</returns>
        public List<BaseVMInfo> ListBaseVMs (string vcenterId, string datacenterId = null)
        {
             ApiResponse<List<BaseVMInfo>> localVarResponse = ListBaseVMsWithHttpInfo(vcenterId, datacenterId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all the VMs from a vCenter or a datacenter in that vCenter which may be suitable as snapshots for instant/linked clone desktop or farm creation. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="datacenterId">Datacenter ID (optional)</param>
        /// <returns>ApiResponse of List&lt;BaseVMInfo&gt;</returns>
        public ApiResponse< List<BaseVMInfo> > ListBaseVMsWithHttpInfo (string vcenterId, string datacenterId = null)
        {
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListBaseVMs");

            var localVarPath = "./external/v1/base-vms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datacenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datacenter_id", datacenterId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBaseVMs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BaseVMInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BaseVMInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BaseVMInfo>)));
        }

        /// <summary>
        /// Lists all the VMs from a vCenter or a datacenter in that vCenter which may be suitable as snapshots for instant/linked clone desktop or farm creation. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="datacenterId">Datacenter ID (optional)</param>
        /// <returns>Task of List&lt;BaseVMInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<BaseVMInfo>> ListBaseVMsAsync (string vcenterId, string datacenterId = null)
        {
             ApiResponse<List<BaseVMInfo>> localVarResponse = await ListBaseVMsAsyncWithHttpInfo(vcenterId, datacenterId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all the VMs from a vCenter or a datacenter in that vCenter which may be suitable as snapshots for instant/linked clone desktop or farm creation. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="datacenterId">Datacenter ID (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BaseVMInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BaseVMInfo>>> ListBaseVMsAsyncWithHttpInfo (string vcenterId, string datacenterId = null)
        {
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListBaseVMs");

            var localVarPath = "./external/v1/base-vms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datacenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datacenter_id", datacenterId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBaseVMs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BaseVMInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<BaseVMInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BaseVMInfo>)));
        }

        /// <summary>
        /// Lists all the customization specifications from the vCenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>List&lt;CustomizationSpecInfo&gt;</returns>
        public List<CustomizationSpecInfo> ListCustomizationSpecs (string vcenterId)
        {
             ApiResponse<List<CustomizationSpecInfo>> localVarResponse = ListCustomizationSpecsWithHttpInfo(vcenterId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all the customization specifications from the vCenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>ApiResponse of List&lt;CustomizationSpecInfo&gt;</returns>
        public ApiResponse< List<CustomizationSpecInfo> > ListCustomizationSpecsWithHttpInfo (string vcenterId)
        {
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListCustomizationSpecs");

            var localVarPath = "./external/v1/customization-specifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCustomizationSpecs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CustomizationSpecInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<CustomizationSpecInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CustomizationSpecInfo>)));
        }

        /// <summary>
        /// Lists all the customization specifications from the vCenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of List&lt;CustomizationSpecInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomizationSpecInfo>> ListCustomizationSpecsAsync (string vcenterId)
        {
             ApiResponse<List<CustomizationSpecInfo>> localVarResponse = await ListCustomizationSpecsAsyncWithHttpInfo(vcenterId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all the customization specifications from the vCenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of ApiResponse (List&lt;CustomizationSpecInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CustomizationSpecInfo>>> ListCustomizationSpecsAsyncWithHttpInfo (string vcenterId)
        {
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListCustomizationSpecs");

            var localVarPath = "./external/v1/customization-specifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCustomizationSpecs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CustomizationSpecInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<CustomizationSpecInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CustomizationSpecInfo>)));
        }

        /// <summary>
        /// Lists all the datacenters of a vCenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>List&lt;DatacenterInfo&gt;</returns>
        public List<DatacenterInfo> ListDatacenters (string vcenterId)
        {
             ApiResponse<List<DatacenterInfo>> localVarResponse = ListDatacentersWithHttpInfo(vcenterId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all the datacenters of a vCenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>ApiResponse of List&lt;DatacenterInfo&gt;</returns>
        public ApiResponse< List<DatacenterInfo> > ListDatacentersWithHttpInfo (string vcenterId)
        {
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListDatacenters");

            var localVarPath = "./external/v1/datacenters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDatacenters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatacenterInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DatacenterInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatacenterInfo>)));
        }

        /// <summary>
        /// Lists all the datacenters of a vCenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of List&lt;DatacenterInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatacenterInfo>> ListDatacentersAsync (string vcenterId)
        {
             ApiResponse<List<DatacenterInfo>> localVarResponse = await ListDatacentersAsyncWithHttpInfo(vcenterId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all the datacenters of a vCenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of ApiResponse (List&lt;DatacenterInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatacenterInfo>>> ListDatacentersAsyncWithHttpInfo (string vcenterId)
        {
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListDatacenters");

            var localVarPath = "./external/v1/datacenters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDatacenters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatacenterInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DatacenterInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatacenterInfo>)));
        }

        /// <summary>
        /// Lists all the folder paths within a Datastore from vCenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datastoreId">Datastore ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>List&lt;DatastorePathInfo&gt;</returns>
        public List<DatastorePathInfo> ListDatastorePaths (string datastoreId, string vcenterId)
        {
             ApiResponse<List<DatastorePathInfo>> localVarResponse = ListDatastorePathsWithHttpInfo(datastoreId, vcenterId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all the folder paths within a Datastore from vCenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datastoreId">Datastore ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>ApiResponse of List&lt;DatastorePathInfo&gt;</returns>
        public ApiResponse< List<DatastorePathInfo> > ListDatastorePathsWithHttpInfo (string datastoreId, string vcenterId)
        {
            // verify the required parameter 'datastoreId' is set
            if (datastoreId == null)
                throw new ApiException(400, "Missing required parameter 'datastoreId' when calling ExternalApi->ListDatastorePaths");
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListDatastorePaths");

            var localVarPath = "./external/v1/datastore-paths";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datastoreId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datastore_id", datastoreId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDatastorePaths", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatastorePathInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DatastorePathInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatastorePathInfo>)));
        }

        /// <summary>
        /// Lists all the folder paths within a Datastore from vCenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datastoreId">Datastore ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of List&lt;DatastorePathInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatastorePathInfo>> ListDatastorePathsAsync (string datastoreId, string vcenterId)
        {
             ApiResponse<List<DatastorePathInfo>> localVarResponse = await ListDatastorePathsAsyncWithHttpInfo(datastoreId, vcenterId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all the folder paths within a Datastore from vCenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datastoreId">Datastore ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of ApiResponse (List&lt;DatastorePathInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatastorePathInfo>>> ListDatastorePathsAsyncWithHttpInfo (string datastoreId, string vcenterId)
        {
            // verify the required parameter 'datastoreId' is set
            if (datastoreId == null)
                throw new ApiException(400, "Missing required parameter 'datastoreId' when calling ExternalApi->ListDatastorePaths");
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListDatastorePaths");

            var localVarPath = "./external/v1/datastore-paths";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datastoreId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datastore_id", datastoreId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDatastorePaths", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatastorePathInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DatastorePathInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatastorePathInfo>)));
        }

        /// <summary>
        /// Lists all the hosts or clusters of the datacenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datacenterId">Datacenter ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>List&lt;HostOrClusterInfo&gt;</returns>
        public List<HostOrClusterInfo> ListHostsOrClusters (string datacenterId, string vcenterId)
        {
             ApiResponse<List<HostOrClusterInfo>> localVarResponse = ListHostsOrClustersWithHttpInfo(datacenterId, vcenterId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all the hosts or clusters of the datacenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datacenterId">Datacenter ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>ApiResponse of List&lt;HostOrClusterInfo&gt;</returns>
        public ApiResponse< List<HostOrClusterInfo> > ListHostsOrClustersWithHttpInfo (string datacenterId, string vcenterId)
        {
            // verify the required parameter 'datacenterId' is set
            if (datacenterId == null)
                throw new ApiException(400, "Missing required parameter 'datacenterId' when calling ExternalApi->ListHostsOrClusters");
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListHostsOrClusters");

            var localVarPath = "./external/v1/hosts-or-clusters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datacenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datacenter_id", datacenterId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListHostsOrClusters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HostOrClusterInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<HostOrClusterInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HostOrClusterInfo>)));
        }

        /// <summary>
        /// Lists all the hosts or clusters of the datacenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datacenterId">Datacenter ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of List&lt;HostOrClusterInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<HostOrClusterInfo>> ListHostsOrClustersAsync (string datacenterId, string vcenterId)
        {
             ApiResponse<List<HostOrClusterInfo>> localVarResponse = await ListHostsOrClustersAsyncWithHttpInfo(datacenterId, vcenterId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all the hosts or clusters of the datacenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datacenterId">Datacenter ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of ApiResponse (List&lt;HostOrClusterInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<HostOrClusterInfo>>> ListHostsOrClustersAsyncWithHttpInfo (string datacenterId, string vcenterId)
        {
            // verify the required parameter 'datacenterId' is set
            if (datacenterId == null)
                throw new ApiException(400, "Missing required parameter 'datacenterId' when calling ExternalApi->ListHostsOrClusters");
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListHostsOrClusters");

            var localVarPath = "./external/v1/hosts-or-clusters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datacenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datacenter_id", datacenterId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListHostsOrClusters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HostOrClusterInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<HostOrClusterInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HostOrClusterInfo>)));
        }

        /// <summary>
        /// Returns a list of network interface cards (NICs) suitable for configuration on a desktop pool/farm. If the base VM and snapshot are specified, then the NICs  present on the given snapshot are listed.&lt;br/&gt; If the template is specified then the NICs present on the given template are listed.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="baseSnapshotId">Base Snapshot ID (optional)</param>
        /// <param name="baseVmId">Base VM ID (optional)</param>
        /// <param name="vmTemplateId">VM Template ID (optional)</param>
        /// <returns>List&lt;NetworkInterfaceCardInfo&gt;</returns>
        public List<NetworkInterfaceCardInfo> ListNetworkInterfaceCards (string vcenterId, string baseSnapshotId = null, string baseVmId = null, string vmTemplateId = null)
        {
             ApiResponse<List<NetworkInterfaceCardInfo>> localVarResponse = ListNetworkInterfaceCardsWithHttpInfo(vcenterId, baseSnapshotId, baseVmId, vmTemplateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of network interface cards (NICs) suitable for configuration on a desktop pool/farm. If the base VM and snapshot are specified, then the NICs  present on the given snapshot are listed.&lt;br/&gt; If the template is specified then the NICs present on the given template are listed.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="baseSnapshotId">Base Snapshot ID (optional)</param>
        /// <param name="baseVmId">Base VM ID (optional)</param>
        /// <param name="vmTemplateId">VM Template ID (optional)</param>
        /// <returns>ApiResponse of List&lt;NetworkInterfaceCardInfo&gt;</returns>
        public ApiResponse< List<NetworkInterfaceCardInfo> > ListNetworkInterfaceCardsWithHttpInfo (string vcenterId, string baseSnapshotId = null, string baseVmId = null, string vmTemplateId = null)
        {
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListNetworkInterfaceCards");

            var localVarPath = "./external/v1/network-interface-cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (baseSnapshotId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "base_snapshot_id", baseSnapshotId)); // query parameter
            if (baseVmId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "base_vm_id", baseVmId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter
            if (vmTemplateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vm_template_id", vmTemplateId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNetworkInterfaceCards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NetworkInterfaceCardInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NetworkInterfaceCardInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NetworkInterfaceCardInfo>)));
        }

        /// <summary>
        /// Returns a list of network interface cards (NICs) suitable for configuration on a desktop pool/farm. If the base VM and snapshot are specified, then the NICs  present on the given snapshot are listed.&lt;br/&gt; If the template is specified then the NICs present on the given template are listed.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="baseSnapshotId">Base Snapshot ID (optional)</param>
        /// <param name="baseVmId">Base VM ID (optional)</param>
        /// <param name="vmTemplateId">VM Template ID (optional)</param>
        /// <returns>Task of List&lt;NetworkInterfaceCardInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<NetworkInterfaceCardInfo>> ListNetworkInterfaceCardsAsync (string vcenterId, string baseSnapshotId = null, string baseVmId = null, string vmTemplateId = null)
        {
             ApiResponse<List<NetworkInterfaceCardInfo>> localVarResponse = await ListNetworkInterfaceCardsAsyncWithHttpInfo(vcenterId, baseSnapshotId, baseVmId, vmTemplateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of network interface cards (NICs) suitable for configuration on a desktop pool/farm. If the base VM and snapshot are specified, then the NICs  present on the given snapshot are listed.&lt;br/&gt; If the template is specified then the NICs present on the given template are listed.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="baseSnapshotId">Base Snapshot ID (optional)</param>
        /// <param name="baseVmId">Base VM ID (optional)</param>
        /// <param name="vmTemplateId">VM Template ID (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NetworkInterfaceCardInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NetworkInterfaceCardInfo>>> ListNetworkInterfaceCardsAsyncWithHttpInfo (string vcenterId, string baseSnapshotId = null, string baseVmId = null, string vmTemplateId = null)
        {
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListNetworkInterfaceCards");

            var localVarPath = "./external/v1/network-interface-cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (baseSnapshotId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "base_snapshot_id", baseSnapshotId)); // query parameter
            if (baseVmId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "base_vm_id", baseVmId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter
            if (vmTemplateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vm_template_id", vmTemplateId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNetworkInterfaceCards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NetworkInterfaceCardInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NetworkInterfaceCardInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NetworkInterfaceCardInfo>)));
        }

        /// <summary>
        /// Retrieves all network labels on the given host or cluster API retrieves by filtering on the network type (if specified) that may be suitable for configuration with a desktop pool/farm&#39;s network interface card.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="networkType">Network Type * NETWORK: Standard network. * OPAQUE_NETWORK: Opaque network. * DISTRUBUTED_VIRTUAL_PORT_GROUP: DVS Port group. (optional)</param>
        /// <returns>List&lt;NetworkLabelInfo&gt;</returns>
        public List<NetworkLabelInfo> ListNetworkLabels (string hostOrClusterId, string vcenterId, string networkType = null)
        {
             ApiResponse<List<NetworkLabelInfo>> localVarResponse = ListNetworkLabelsWithHttpInfo(hostOrClusterId, vcenterId, networkType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all network labels on the given host or cluster API retrieves by filtering on the network type (if specified) that may be suitable for configuration with a desktop pool/farm&#39;s network interface card.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="networkType">Network Type * NETWORK: Standard network. * OPAQUE_NETWORK: Opaque network. * DISTRUBUTED_VIRTUAL_PORT_GROUP: DVS Port group. (optional)</param>
        /// <returns>ApiResponse of List&lt;NetworkLabelInfo&gt;</returns>
        public ApiResponse< List<NetworkLabelInfo> > ListNetworkLabelsWithHttpInfo (string hostOrClusterId, string vcenterId, string networkType = null)
        {
            // verify the required parameter 'hostOrClusterId' is set
            if (hostOrClusterId == null)
                throw new ApiException(400, "Missing required parameter 'hostOrClusterId' when calling ExternalApi->ListNetworkLabels");
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListNetworkLabels");

            var localVarPath = "./external/v1/network-labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hostOrClusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "host_or_cluster_id", hostOrClusterId)); // query parameter
            if (networkType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "network_type", networkType)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNetworkLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NetworkLabelInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NetworkLabelInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NetworkLabelInfo>)));
        }

        /// <summary>
        /// Retrieves all network labels on the given host or cluster API retrieves by filtering on the network type (if specified) that may be suitable for configuration with a desktop pool/farm&#39;s network interface card.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="networkType">Network Type * NETWORK: Standard network. * OPAQUE_NETWORK: Opaque network. * DISTRUBUTED_VIRTUAL_PORT_GROUP: DVS Port group. (optional)</param>
        /// <returns>Task of List&lt;NetworkLabelInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<NetworkLabelInfo>> ListNetworkLabelsAsync (string hostOrClusterId, string vcenterId, string networkType = null)
        {
             ApiResponse<List<NetworkLabelInfo>> localVarResponse = await ListNetworkLabelsAsyncWithHttpInfo(hostOrClusterId, vcenterId, networkType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves all network labels on the given host or cluster API retrieves by filtering on the network type (if specified) that may be suitable for configuration with a desktop pool/farm&#39;s network interface card.
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="networkType">Network Type * NETWORK: Standard network. * OPAQUE_NETWORK: Opaque network. * DISTRUBUTED_VIRTUAL_PORT_GROUP: DVS Port group. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NetworkLabelInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NetworkLabelInfo>>> ListNetworkLabelsAsyncWithHttpInfo (string hostOrClusterId, string vcenterId, string networkType = null)
        {
            // verify the required parameter 'hostOrClusterId' is set
            if (hostOrClusterId == null)
                throw new ApiException(400, "Missing required parameter 'hostOrClusterId' when calling ExternalApi->ListNetworkLabels");
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListNetworkLabels");

            var localVarPath = "./external/v1/network-labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hostOrClusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "host_or_cluster_id", hostOrClusterId)); // query parameter
            if (networkType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "network_type", networkType)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNetworkLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NetworkLabelInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NetworkLabelInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NetworkLabelInfo>)));
        }

        /// <summary>
        /// Lists all the resource pools from the vCenter for the given host or cluster. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>List&lt;ResourcePoolInfo&gt;</returns>
        public List<ResourcePoolInfo> ListResourcePools (string hostOrClusterId, string vcenterId)
        {
             ApiResponse<List<ResourcePoolInfo>> localVarResponse = ListResourcePoolsWithHttpInfo(hostOrClusterId, vcenterId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all the resource pools from the vCenter for the given host or cluster. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>ApiResponse of List&lt;ResourcePoolInfo&gt;</returns>
        public ApiResponse< List<ResourcePoolInfo> > ListResourcePoolsWithHttpInfo (string hostOrClusterId, string vcenterId)
        {
            // verify the required parameter 'hostOrClusterId' is set
            if (hostOrClusterId == null)
                throw new ApiException(400, "Missing required parameter 'hostOrClusterId' when calling ExternalApi->ListResourcePools");
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListResourcePools");

            var localVarPath = "./external/v1/resource-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hostOrClusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "host_or_cluster_id", hostOrClusterId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListResourcePools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResourcePoolInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ResourcePoolInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResourcePoolInfo>)));
        }

        /// <summary>
        /// Lists all the resource pools from the vCenter for the given host or cluster. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of List&lt;ResourcePoolInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResourcePoolInfo>> ListResourcePoolsAsync (string hostOrClusterId, string vcenterId)
        {
             ApiResponse<List<ResourcePoolInfo>> localVarResponse = await ListResourcePoolsAsyncWithHttpInfo(hostOrClusterId, vcenterId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all the resource pools from the vCenter for the given host or cluster. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of ApiResponse (List&lt;ResourcePoolInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ResourcePoolInfo>>> ListResourcePoolsAsyncWithHttpInfo (string hostOrClusterId, string vcenterId)
        {
            // verify the required parameter 'hostOrClusterId' is set
            if (hostOrClusterId == null)
                throw new ApiException(400, "Missing required parameter 'hostOrClusterId' when calling ExternalApi->ListResourcePools");
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListResourcePools");

            var localVarPath = "./external/v1/resource-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hostOrClusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "host_or_cluster_id", hostOrClusterId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListResourcePools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResourcePoolInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ResourcePoolInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResourcePoolInfo>)));
        }

        /// <summary>
        /// Lists all the VM folders from the vCenter for the given datacenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datacenterId">Datacenter ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>List&lt;VMFolderInfo&gt;</returns>
        public List<VMFolderInfo> ListVMFolders (string datacenterId, string vcenterId)
        {
             ApiResponse<List<VMFolderInfo>> localVarResponse = ListVMFoldersWithHttpInfo(datacenterId, vcenterId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all the VM folders from the vCenter for the given datacenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datacenterId">Datacenter ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>ApiResponse of List&lt;VMFolderInfo&gt;</returns>
        public ApiResponse< List<VMFolderInfo> > ListVMFoldersWithHttpInfo (string datacenterId, string vcenterId)
        {
            // verify the required parameter 'datacenterId' is set
            if (datacenterId == null)
                throw new ApiException(400, "Missing required parameter 'datacenterId' when calling ExternalApi->ListVMFolders");
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListVMFolders");

            var localVarPath = "./external/v1/vm-folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datacenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datacenter_id", datacenterId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListVMFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VMFolderInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<VMFolderInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VMFolderInfo>)));
        }

        /// <summary>
        /// Lists all the VM folders from the vCenter for the given datacenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datacenterId">Datacenter ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of List&lt;VMFolderInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<VMFolderInfo>> ListVMFoldersAsync (string datacenterId, string vcenterId)
        {
             ApiResponse<List<VMFolderInfo>> localVarResponse = await ListVMFoldersAsyncWithHttpInfo(datacenterId, vcenterId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all the VM folders from the vCenter for the given datacenter. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datacenterId">Datacenter ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of ApiResponse (List&lt;VMFolderInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VMFolderInfo>>> ListVMFoldersAsyncWithHttpInfo (string datacenterId, string vcenterId)
        {
            // verify the required parameter 'datacenterId' is set
            if (datacenterId == null)
                throw new ApiException(400, "Missing required parameter 'datacenterId' when calling ExternalApi->ListVMFolders");
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListVMFolders");

            var localVarPath = "./external/v1/vm-folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datacenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datacenter_id", datacenterId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListVMFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VMFolderInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<VMFolderInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VMFolderInfo>)));
        }

        /// <summary>
        /// Lists all the VM templates from a vCenter or a datacenter for the given vCenter which may be suitable for full clone desktop pool creation. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="datacenterId">Datacenter ID (optional)</param>
        /// <returns>List&lt;VMTemplateInfo&gt;</returns>
        public List<VMTemplateInfo> ListVMTemplates (string vcenterId, string datacenterId = null)
        {
             ApiResponse<List<VMTemplateInfo>> localVarResponse = ListVMTemplatesWithHttpInfo(vcenterId, datacenterId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all the VM templates from a vCenter or a datacenter for the given vCenter which may be suitable for full clone desktop pool creation. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="datacenterId">Datacenter ID (optional)</param>
        /// <returns>ApiResponse of List&lt;VMTemplateInfo&gt;</returns>
        public ApiResponse< List<VMTemplateInfo> > ListVMTemplatesWithHttpInfo (string vcenterId, string datacenterId = null)
        {
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListVMTemplates");

            var localVarPath = "./external/v1/vm-templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datacenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datacenter_id", datacenterId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListVMTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VMTemplateInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<VMTemplateInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VMTemplateInfo>)));
        }

        /// <summary>
        /// Lists all the VM templates from a vCenter or a datacenter for the given vCenter which may be suitable for full clone desktop pool creation. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="datacenterId">Datacenter ID (optional)</param>
        /// <returns>Task of List&lt;VMTemplateInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<VMTemplateInfo>> ListVMTemplatesAsync (string vcenterId, string datacenterId = null)
        {
             ApiResponse<List<VMTemplateInfo>> localVarResponse = await ListVMTemplatesAsyncWithHttpInfo(vcenterId, datacenterId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all the VM templates from a vCenter or a datacenter for the given vCenter which may be suitable for full clone desktop pool creation. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <param name="datacenterId">Datacenter ID (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;VMTemplateInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VMTemplateInfo>>> ListVMTemplatesAsyncWithHttpInfo (string vcenterId, string datacenterId = null)
        {
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->ListVMTemplates");

            var localVarPath = "./external/v1/vm-templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datacenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datacenter_id", datacenterId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListVMTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VMTemplateInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<VMTemplateInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VMTemplateInfo>)));
        }

        /// <summary>
        /// Lists all the datastoress from the vCenter for the given host or cluster. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>List&lt;DatastoreInfo&gt;</returns>
        public List<DatastoreInfo> Listdatastores (string hostOrClusterId, string vcenterId)
        {
             ApiResponse<List<DatastoreInfo>> localVarResponse = ListdatastoresWithHttpInfo(hostOrClusterId, vcenterId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all the datastoress from the vCenter for the given host or cluster. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>ApiResponse of List&lt;DatastoreInfo&gt;</returns>
        public ApiResponse< List<DatastoreInfo> > ListdatastoresWithHttpInfo (string hostOrClusterId, string vcenterId)
        {
            // verify the required parameter 'hostOrClusterId' is set
            if (hostOrClusterId == null)
                throw new ApiException(400, "Missing required parameter 'hostOrClusterId' when calling ExternalApi->Listdatastores");
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->Listdatastores");

            var localVarPath = "./external/v1/datastores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hostOrClusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "host_or_cluster_id", hostOrClusterId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Listdatastores", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatastoreInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DatastoreInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatastoreInfo>)));
        }

        /// <summary>
        /// Lists all the datastoress from the vCenter for the given host or cluster. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of List&lt;DatastoreInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatastoreInfo>> ListdatastoresAsync (string hostOrClusterId, string vcenterId)
        {
             ApiResponse<List<DatastoreInfo>> localVarResponse = await ListdatastoresAsyncWithHttpInfo(hostOrClusterId, vcenterId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all the datastoress from the vCenter for the given host or cluster. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostOrClusterId">Host or Cluster ID</param>
        /// <param name="vcenterId">Virtual Center ID</param>
        /// <returns>Task of ApiResponse (List&lt;DatastoreInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DatastoreInfo>>> ListdatastoresAsyncWithHttpInfo (string hostOrClusterId, string vcenterId)
        {
            // verify the required parameter 'hostOrClusterId' is set
            if (hostOrClusterId == null)
                throw new ApiException(400, "Missing required parameter 'hostOrClusterId' when calling ExternalApi->Listdatastores");
            // verify the required parameter 'vcenterId' is set
            if (vcenterId == null)
                throw new ApiException(400, "Missing required parameter 'vcenterId' when calling ExternalApi->Listdatastores");

            var localVarPath = "./external/v1/datastores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hostOrClusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "host_or_cluster_id", hostOrClusterId)); // query parameter
            if (vcenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vcenter_id", vcenterId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Listdatastores", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DatastoreInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<DatastoreInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DatastoreInfo>)));
        }

        /// <summary>
        /// Validates the encrypted credentials of AD User 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">AD user encrypted credentials object to be validated.</param>
        /// <returns>ADUserInfo</returns>
        public ADUserInfo ValidateADUserEncryptedCredentials (ADUserEncryptedCredentialSpec body)
        {
             ApiResponse<ADUserInfo> localVarResponse = ValidateADUserEncryptedCredentialsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validates the encrypted credentials of AD User 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">AD user encrypted credentials object to be validated.</param>
        /// <returns>ApiResponse of ADUserInfo</returns>
        public ApiResponse< ADUserInfo > ValidateADUserEncryptedCredentialsWithHttpInfo (ADUserEncryptedCredentialSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExternalApi->ValidateADUserEncryptedCredentials");

            var localVarPath = "./external/v1/ad-users-or-groups/action/validate-user-encrypted-credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateADUserEncryptedCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ADUserInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ADUserInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ADUserInfo)));
        }

        /// <summary>
        /// Validates the encrypted credentials of AD User 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">AD user encrypted credentials object to be validated.</param>
        /// <returns>Task of ADUserInfo</returns>
        public async System.Threading.Tasks.Task<ADUserInfo> ValidateADUserEncryptedCredentialsAsync (ADUserEncryptedCredentialSpec body)
        {
             ApiResponse<ADUserInfo> localVarResponse = await ValidateADUserEncryptedCredentialsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validates the encrypted credentials of AD User 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">AD user encrypted credentials object to be validated.</param>
        /// <returns>Task of ApiResponse (ADUserInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ADUserInfo>> ValidateADUserEncryptedCredentialsAsyncWithHttpInfo (ADUserEncryptedCredentialSpec body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExternalApi->ValidateADUserEncryptedCredentials");

            var localVarPath = "./external/v1/ad-users-or-groups/action/validate-user-encrypted-credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateADUserEncryptedCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ADUserInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ADUserInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ADUserInfo)));
        }

    }
}
