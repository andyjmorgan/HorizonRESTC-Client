/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information about different file types supported by Application that can be passed from agent to client via Connection Server.
    /// </summary>
    [DataContract]
    public partial class ApplicationOtherFileTypeData :  IEquatable<ApplicationOtherFileTypeData>, IValidatableObject
    {
        /// <summary>
        /// Other file type currently supported. * URL: URL scheme types supported by application.
        /// </summary>
        /// <value>Other file type currently supported. * URL: URL scheme types supported by application.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum URL for value: URL
            /// </summary>
            [EnumMember(Value = "URL")]
            URL = 1
        }

        /// <summary>
        /// Other file type currently supported. * URL: URL scheme types supported by application.
        /// </summary>
        /// <value>Other file type currently supported. * URL: URL scheme types supported by application.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationOtherFileTypeData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApplicationOtherFileTypeData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationOtherFileTypeData" /> class.
        /// </summary>
        /// <param name="description">Friendly name for the file type. If unset, no friendly name will be displayed..</param>
        /// <param name="name">The name for other file type data. (required).</param>
        /// <param name="type">Other file type currently supported. * URL: URL scheme types supported by application. (required).</param>
        public ApplicationOtherFileTypeData(string description = default(string), string name = default(string), TypeEnum type = default(TypeEnum))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ApplicationOtherFileTypeData and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ApplicationOtherFileTypeData and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Description = description;
        }
        
        /// <summary>
        /// Friendly name for the file type. If unset, no friendly name will be displayed.
        /// </summary>
        /// <value>Friendly name for the file type. If unset, no friendly name will be displayed.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The name for other file type data.
        /// </summary>
        /// <value>The name for other file type data.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationOtherFileTypeData {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationOtherFileTypeData);
        }

        /// <summary>
        /// Returns true if ApplicationOtherFileTypeData instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationOtherFileTypeData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationOtherFileTypeData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
