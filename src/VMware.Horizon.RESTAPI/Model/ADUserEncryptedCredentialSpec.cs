/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Specification for validating AD user&#39;s encrypted credentials.
    /// </summary>
    [DataContract]
    public partial class ADUserEncryptedCredentialSpec :  IEquatable<ADUserEncryptedCredentialSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ADUserEncryptedCredentialSpec" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ADUserEncryptedCredentialSpec() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ADUserEncryptedCredentialSpec" /> class.
        /// </summary>
        /// <param name="domain">The domain of user. Note that domain is optional if UPN is supplied..</param>
        /// <param name="encryptedPassword">Encrypted password for the user. (required).</param>
        /// <param name="keyId">The keyId of the cluster&#39;s SSO KeyPair used to encrypt the protectedPasswordKey. (required).</param>
        /// <param name="protectedPasswordKey">Decryption key for the password. This key is itself encrypted with cluster&#39;s SSO keypair. (required).</param>
        /// <param name="username">The username or UPN. (required).</param>
        public ADUserEncryptedCredentialSpec(string domain = default(string), string encryptedPassword = default(string), string keyId = default(string), string protectedPasswordKey = default(string), string username = default(string))
        {
            // to ensure "encryptedPassword" is required (not null)
            if (encryptedPassword == null)
            {
                throw new InvalidDataException("encryptedPassword is a required property for ADUserEncryptedCredentialSpec and cannot be null");
            }
            else
            {
                this.EncryptedPassword = encryptedPassword;
            }
            // to ensure "keyId" is required (not null)
            if (keyId == null)
            {
                throw new InvalidDataException("keyId is a required property for ADUserEncryptedCredentialSpec and cannot be null");
            }
            else
            {
                this.KeyId = keyId;
            }
            // to ensure "protectedPasswordKey" is required (not null)
            if (protectedPasswordKey == null)
            {
                throw new InvalidDataException("protectedPasswordKey is a required property for ADUserEncryptedCredentialSpec and cannot be null");
            }
            else
            {
                this.ProtectedPasswordKey = protectedPasswordKey;
            }
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for ADUserEncryptedCredentialSpec and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            this.Domain = domain;
        }
        
        /// <summary>
        /// The domain of user. Note that domain is optional if UPN is supplied.
        /// </summary>
        /// <value>The domain of user. Note that domain is optional if UPN is supplied.</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// Encrypted password for the user.
        /// </summary>
        /// <value>Encrypted password for the user.</value>
        [DataMember(Name="encrypted_password", EmitDefaultValue=false)]
        public string EncryptedPassword { get; set; }

        /// <summary>
        /// The keyId of the cluster&#39;s SSO KeyPair used to encrypt the protectedPasswordKey.
        /// </summary>
        /// <value>The keyId of the cluster&#39;s SSO KeyPair used to encrypt the protectedPasswordKey.</value>
        [DataMember(Name="key_id", EmitDefaultValue=false)]
        public string KeyId { get; set; }

        /// <summary>
        /// Decryption key for the password. This key is itself encrypted with cluster&#39;s SSO keypair.
        /// </summary>
        /// <value>Decryption key for the password. This key is itself encrypted with cluster&#39;s SSO keypair.</value>
        [DataMember(Name="protected_password_key", EmitDefaultValue=false)]
        public string ProtectedPasswordKey { get; set; }

        /// <summary>
        /// The username or UPN.
        /// </summary>
        /// <value>The username or UPN.</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ADUserEncryptedCredentialSpec {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  EncryptedPassword: ").Append(EncryptedPassword).Append("\n");
            sb.Append("  KeyId: ").Append(KeyId).Append("\n");
            sb.Append("  ProtectedPasswordKey: ").Append(ProtectedPasswordKey).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ADUserEncryptedCredentialSpec);
        }

        /// <summary>
        /// Returns true if ADUserEncryptedCredentialSpec instances are equal
        /// </summary>
        /// <param name="input">Instance of ADUserEncryptedCredentialSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ADUserEncryptedCredentialSpec input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.EncryptedPassword == input.EncryptedPassword ||
                    (this.EncryptedPassword != null &&
                    this.EncryptedPassword.Equals(input.EncryptedPassword))
                ) && 
                (
                    this.KeyId == input.KeyId ||
                    (this.KeyId != null &&
                    this.KeyId.Equals(input.KeyId))
                ) && 
                (
                    this.ProtectedPasswordKey == input.ProtectedPasswordKey ||
                    (this.ProtectedPasswordKey != null &&
                    this.ProtectedPasswordKey.Equals(input.ProtectedPasswordKey))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.EncryptedPassword != null)
                    hashCode = hashCode * 59 + this.EncryptedPassword.GetHashCode();
                if (this.KeyId != null)
                    hashCode = hashCode * 59 + this.KeyId.GetHashCode();
                if (this.ProtectedPasswordKey != null)
                    hashCode = hashCode * 59 + this.ProtectedPasswordKey.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
