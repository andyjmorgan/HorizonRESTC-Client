/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information about the Storage Accelerator Data
    /// </summary>
    [DataContract]
    public partial class StorageAcceleratorData :  IEquatable<StorageAcceleratorData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageAcceleratorData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StorageAcceleratorData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageAcceleratorData" /> class.
        /// </summary>
        /// <param name="defaultCacheSizeMb">Default size of the cache in megabytes. This property has a default value of 1024. This property has a minimum value of 100. This property has a maximum value of 2048. .</param>
        /// <param name="enabled">Is View Storage Accelerator enabled? This property has a default value of false. (required).</param>
        /// <param name="hostOverrides">Cache size overrides for hosts which support View Storage Accelerator..</param>
        public StorageAcceleratorData(int? defaultCacheSizeMb = default(int?), bool? enabled = default(bool?), List<HostOverrideData> hostOverrides = default(List<HostOverrideData>))
        {
            // to ensure "enabled" is required (not null)
            if (enabled == null)
            {
                throw new InvalidDataException("enabled is a required property for StorageAcceleratorData and cannot be null");
            }
            else
            {
                this.Enabled = enabled;
            }
            this.DefaultCacheSizeMb = defaultCacheSizeMb;
            this.HostOverrides = hostOverrides;
        }
        
        /// <summary>
        /// Default size of the cache in megabytes. This property has a default value of 1024. This property has a minimum value of 100. This property has a maximum value of 2048. 
        /// </summary>
        /// <value>Default size of the cache in megabytes. This property has a default value of 1024. This property has a minimum value of 100. This property has a maximum value of 2048. </value>
        [DataMember(Name="default_cache_size_mb", EmitDefaultValue=false)]
        public int? DefaultCacheSizeMb { get; set; }

        /// <summary>
        /// Is View Storage Accelerator enabled? This property has a default value of false.
        /// </summary>
        /// <value>Is View Storage Accelerator enabled? This property has a default value of false.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Cache size overrides for hosts which support View Storage Accelerator.
        /// </summary>
        /// <value>Cache size overrides for hosts which support View Storage Accelerator.</value>
        [DataMember(Name="host_overrides", EmitDefaultValue=false)]
        public List<HostOverrideData> HostOverrides { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageAcceleratorData {\n");
            sb.Append("  DefaultCacheSizeMb: ").Append(DefaultCacheSizeMb).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  HostOverrides: ").Append(HostOverrides).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageAcceleratorData);
        }

        /// <summary>
        /// Returns true if StorageAcceleratorData instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageAcceleratorData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageAcceleratorData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultCacheSizeMb == input.DefaultCacheSizeMb ||
                    (this.DefaultCacheSizeMb != null &&
                    this.DefaultCacheSizeMb.Equals(input.DefaultCacheSizeMb))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.HostOverrides == input.HostOverrides ||
                    this.HostOverrides != null &&
                    this.HostOverrides.SequenceEqual(input.HostOverrides)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultCacheSizeMb != null)
                    hashCode = hashCode * 59 + this.DefaultCacheSizeMb.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.HostOverrides != null)
                    hashCode = hashCode * 59 + this.HostOverrides.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
