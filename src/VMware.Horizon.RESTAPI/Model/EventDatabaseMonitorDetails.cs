/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// EventDatabaseMonitorDetails
    /// </summary>
    [DataContract]
    public partial class EventDatabaseMonitorDetails :  IEquatable<EventDatabaseMonitorDetails>, IValidatableObject
    {
        /// <summary>
        /// The type of the database. * ORACLE: An Oracle database. * SQL_SERVER: A SQL server database.
        /// </summary>
        /// <value>The type of the database. * ORACLE: An Oracle database. * SQL_SERVER: A SQL server database.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum ORACLE for value: ORACLE
            /// </summary>
            [EnumMember(Value = "ORACLE")]
            ORACLE = 1,
            
            /// <summary>
            /// Enum SQLSERVER for value: SQL_SERVER
            /// </summary>
            [EnumMember(Value = "SQL_SERVER")]
            SQLSERVER = 2
        }

        /// <summary>
        /// The type of the database. * ORACLE: An Oracle database. * SQL_SERVER: A SQL server database.
        /// </summary>
        /// <value>The type of the database. * ORACLE: An Oracle database. * SQL_SERVER: A SQL server database.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventDatabaseMonitorDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventDatabaseMonitorDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventDatabaseMonitorDetails" /> class.
        /// </summary>
        /// <param name="databaseName">The name of the database. (required).</param>
        /// <param name="port">The port of the database server. (required).</param>
        /// <param name="prefix">The prefix for event tables in the database. (required).</param>
        /// <param name="serverName">The name or ip address of the database server. (required).</param>
        /// <param name="type">The type of the database. * ORACLE: An Oracle database. * SQL_SERVER: A SQL server database. (required).</param>
        /// <param name="userName">The username used to connect to the database. (required).</param>
        public EventDatabaseMonitorDetails(string databaseName = default(string), int? port = default(int?), string prefix = default(string), string serverName = default(string), TypeEnum type = default(TypeEnum), string userName = default(string))
        {
            // to ensure "databaseName" is required (not null)
            if (databaseName == null)
            {
                throw new InvalidDataException("databaseName is a required property for EventDatabaseMonitorDetails and cannot be null");
            }
            else
            {
                this.DatabaseName = databaseName;
            }
            // to ensure "port" is required (not null)
            if (port == null)
            {
                throw new InvalidDataException("port is a required property for EventDatabaseMonitorDetails and cannot be null");
            }
            else
            {
                this.Port = port;
            }
            // to ensure "prefix" is required (not null)
            if (prefix == null)
            {
                throw new InvalidDataException("prefix is a required property for EventDatabaseMonitorDetails and cannot be null");
            }
            else
            {
                this.Prefix = prefix;
            }
            // to ensure "serverName" is required (not null)
            if (serverName == null)
            {
                throw new InvalidDataException("serverName is a required property for EventDatabaseMonitorDetails and cannot be null");
            }
            else
            {
                this.ServerName = serverName;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for EventDatabaseMonitorDetails and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "userName" is required (not null)
            if (userName == null)
            {
                throw new InvalidDataException("userName is a required property for EventDatabaseMonitorDetails and cannot be null");
            }
            else
            {
                this.UserName = userName;
            }
        }
        
        /// <summary>
        /// The name of the database.
        /// </summary>
        /// <value>The name of the database.</value>
        [DataMember(Name="database_name", EmitDefaultValue=false)]
        public string DatabaseName { get; set; }

        /// <summary>
        /// The port of the database server.
        /// </summary>
        /// <value>The port of the database server.</value>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }

        /// <summary>
        /// The prefix for event tables in the database.
        /// </summary>
        /// <value>The prefix for event tables in the database.</value>
        [DataMember(Name="prefix", EmitDefaultValue=false)]
        public string Prefix { get; set; }

        /// <summary>
        /// The name or ip address of the database server.
        /// </summary>
        /// <value>The name or ip address of the database server.</value>
        [DataMember(Name="server_name", EmitDefaultValue=false)]
        public string ServerName { get; set; }


        /// <summary>
        /// The username used to connect to the database.
        /// </summary>
        /// <value>The username used to connect to the database.</value>
        [DataMember(Name="user_name", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventDatabaseMonitorDetails {\n");
            sb.Append("  DatabaseName: ").Append(DatabaseName).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  ServerName: ").Append(ServerName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventDatabaseMonitorDetails);
        }

        /// <summary>
        /// Returns true if EventDatabaseMonitorDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of EventDatabaseMonitorDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventDatabaseMonitorDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DatabaseName == input.DatabaseName ||
                    (this.DatabaseName != null &&
                    this.DatabaseName.Equals(input.DatabaseName))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                ) && 
                (
                    this.ServerName == input.ServerName ||
                    (this.ServerName != null &&
                    this.ServerName.Equals(input.ServerName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DatabaseName != null)
                    hashCode = hashCode * 59 + this.DatabaseName.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.Prefix != null)
                    hashCode = hashCode * 59 + this.Prefix.GetHashCode();
                if (this.ServerName != null)
                    hashCode = hashCode * 59 + this.ServerName.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
