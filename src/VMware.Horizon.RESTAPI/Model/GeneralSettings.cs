/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to General Settings.
    /// </summary>
    [DataContract]
    public partial class GeneralSettings :  IEquatable<GeneralSettings>, IValidatableObject
    {
        /// <summary>
        /// Specifies the policy for the maximum time after which single sign on will be disabled for application sessions. * DISABLED_AFTER: Single sign on will be disabled after the specified number of minutes has elapsed since the user connected to Horizon Connection Server. * DISABLED: Single sign on is disabled. * ENABLED: Single sign on is enabled.
        /// </summary>
        /// <value>Specifies the policy for the maximum time after which single sign on will be disabled for application sessions. * DISABLED_AFTER: Single sign on will be disabled after the specified number of minutes has elapsed since the user connected to Horizon Connection Server. * DISABLED: Single sign on is disabled. * ENABLED: Single sign on is enabled.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationSsoTimeoutPolicyEnum
        {
            
            /// <summary>
            /// Enum DISABLEDAFTER for value: DISABLED_AFTER
            /// </summary>
            [EnumMember(Value = "DISABLED_AFTER")]
            DISABLEDAFTER = 1,
            
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 2,
            
            /// <summary>
            /// Enum ENABLED for value: ENABLED
            /// </summary>
            [EnumMember(Value = "ENABLED")]
            ENABLED = 3
        }

        /// <summary>
        /// Specifies the policy for the maximum time after which single sign on will be disabled for application sessions. * DISABLED_AFTER: Single sign on will be disabled after the specified number of minutes has elapsed since the user connected to Horizon Connection Server. * DISABLED: Single sign on is disabled. * ENABLED: Single sign on is enabled.
        /// </summary>
        /// <value>Specifies the policy for the maximum time after which single sign on will be disabled for application sessions. * DISABLED_AFTER: Single sign on will be disabled after the specified number of minutes has elapsed since the user connected to Horizon Connection Server. * DISABLED: Single sign on is disabled. * ENABLED: Single sign on is enabled.</value>
        [DataMember(Name="application_sso_timeout_policy", EmitDefaultValue=false)]
        public ApplicationSsoTimeoutPolicyEnum ApplicationSsoTimeoutPolicy { get; set; }
        /// <summary>
        /// Specifies the policy for the maximum time that a that a user can be idle before the Connection Server takes measure to protect the session. * TIMEOUT_AFTER: The timeout is set for a configurable time. * NEVER: The timeout has been disabled.
        /// </summary>
        /// <value>Specifies the policy for the maximum time that a that a user can be idle before the Connection Server takes measure to protect the session. * TIMEOUT_AFTER: The timeout is set for a configurable time. * NEVER: The timeout has been disabled.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ClientIdleSessionTimeoutPolicyEnum
        {
            
            /// <summary>
            /// Enum TIMEOUTAFTER for value: TIMEOUT_AFTER
            /// </summary>
            [EnumMember(Value = "TIMEOUT_AFTER")]
            TIMEOUTAFTER = 1,
            
            /// <summary>
            /// Enum NEVER for value: NEVER
            /// </summary>
            [EnumMember(Value = "NEVER")]
            NEVER = 2
        }

        /// <summary>
        /// Specifies the policy for the maximum time that a that a user can be idle before the Connection Server takes measure to protect the session. * TIMEOUT_AFTER: The timeout is set for a configurable time. * NEVER: The timeout has been disabled.
        /// </summary>
        /// <value>Specifies the policy for the maximum time that a that a user can be idle before the Connection Server takes measure to protect the session. * TIMEOUT_AFTER: The timeout is set for a configurable time. * NEVER: The timeout has been disabled.</value>
        [DataMember(Name="client_idle_session_timeout_policy", EmitDefaultValue=false)]
        public ClientIdleSessionTimeoutPolicyEnum ClientIdleSessionTimeoutPolicy { get; set; }
        /// <summary>
        /// Client max session lifetime policy. This property has a default value of TIMEOUT_AFTER. A value of TIMEOUT_AFTER indicates that the Horizon client session times out after a configurable session length. A value of NEVER indicates that the Horizon client session will not time out and will only end due to inactivity. * TIMEOUT_AFTER: The timeout is set for a configurable time. * NEVER: The timeout has been disabled.
        /// </summary>
        /// <value>Client max session lifetime policy. This property has a default value of TIMEOUT_AFTER. A value of TIMEOUT_AFTER indicates that the Horizon client session times out after a configurable session length. A value of NEVER indicates that the Horizon client session will not time out and will only end due to inactivity. * TIMEOUT_AFTER: The timeout is set for a configurable time. * NEVER: The timeout has been disabled.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ClientMaxSessionTimeoutPolicyEnum
        {
            
            /// <summary>
            /// Enum TIMEOUTAFTER for value: TIMEOUT_AFTER
            /// </summary>
            [EnumMember(Value = "TIMEOUT_AFTER")]
            TIMEOUTAFTER = 1,
            
            /// <summary>
            /// Enum NEVER for value: NEVER
            /// </summary>
            [EnumMember(Value = "NEVER")]
            NEVER = 2
        }

        /// <summary>
        /// Client max session lifetime policy. This property has a default value of TIMEOUT_AFTER. A value of TIMEOUT_AFTER indicates that the Horizon client session times out after a configurable session length. A value of NEVER indicates that the Horizon client session will not time out and will only end due to inactivity. * TIMEOUT_AFTER: The timeout is set for a configurable time. * NEVER: The timeout has been disabled.
        /// </summary>
        /// <value>Client max session lifetime policy. This property has a default value of TIMEOUT_AFTER. A value of TIMEOUT_AFTER indicates that the Horizon client session times out after a configurable session length. A value of NEVER indicates that the Horizon client session will not time out and will only end due to inactivity. * TIMEOUT_AFTER: The timeout is set for a configurable time. * NEVER: The timeout has been disabled.</value>
        [DataMember(Name="client_max_session_timeout_policy", EmitDefaultValue=false)]
        public ClientMaxSessionTimeoutPolicyEnum ClientMaxSessionTimeoutPolicy { get; set; }
        /// <summary>
        /// Specifies the policy for the maximum time after which single sign on will be disabled after a user connects to the Connection Server. * DISABLED_AFTER: Single sign on will be disabled after the specified number of minutes has elapsed since the user connected to Horizon Connection Server. * DISABLED: Single sign on is disabled. * ENABLED: Single sign on is enabled.
        /// </summary>
        /// <value>Specifies the policy for the maximum time after which single sign on will be disabled after a user connects to the Connection Server. * DISABLED_AFTER: Single sign on will be disabled after the specified number of minutes has elapsed since the user connected to Horizon Connection Server. * DISABLED: Single sign on is disabled. * ENABLED: Single sign on is enabled.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MachineSsoTimeoutPolicyEnum
        {
            
            /// <summary>
            /// Enum DISABLEDAFTER for value: DISABLED_AFTER
            /// </summary>
            [EnumMember(Value = "DISABLED_AFTER")]
            DISABLEDAFTER = 1,
            
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 2,
            
            /// <summary>
            /// Enum ENABLED for value: ENABLED
            /// </summary>
            [EnumMember(Value = "ENABLED")]
            ENABLED = 3
        }

        /// <summary>
        /// Specifies the policy for the maximum time after which single sign on will be disabled after a user connects to the Connection Server. * DISABLED_AFTER: Single sign on will be disabled after the specified number of minutes has elapsed since the user connected to Horizon Connection Server. * DISABLED: Single sign on is disabled. * ENABLED: Single sign on is enabled.
        /// </summary>
        /// <value>Specifies the policy for the maximum time after which single sign on will be disabled after a user connects to the Connection Server. * DISABLED_AFTER: Single sign on will be disabled after the specified number of minutes has elapsed since the user connected to Horizon Connection Server. * DISABLED: Single sign on is disabled. * ENABLED: Single sign on is enabled.</value>
        [DataMember(Name="machine_sso_timeout_policy", EmitDefaultValue=false)]
        public MachineSsoTimeoutPolicyEnum MachineSsoTimeoutPolicy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GeneralSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralSettings" /> class.
        /// </summary>
        /// <param name="applicationSsoTimeoutMinutes">The time allowed to elapse after a user has authenticated before the application SSO credentials are locked unless the user&#39;s Horizon client supports idle sessions and the user remains active..</param>
        /// <param name="applicationSsoTimeoutPolicy">Specifies the policy for the maximum time after which single sign on will be disabled for application sessions. * DISABLED_AFTER: Single sign on will be disabled after the specified number of minutes has elapsed since the user connected to Horizon Connection Server. * DISABLED: Single sign on is disabled. * ENABLED: Single sign on is enabled. (required).</param>
        /// <param name="blockRestrictedClients">Indicates whether restricted Horizon clients should be blocked by the Connection Server..</param>
        /// <param name="clientIdleSessionTimeoutMinutes">Determines how long a user can be idle before the Connection Server takes measure to protect the session..</param>
        /// <param name="clientIdleSessionTimeoutPolicy">Specifies the policy for the maximum time that a that a user can be idle before the Connection Server takes measure to protect the session. * TIMEOUT_AFTER: The timeout is set for a configurable time. * NEVER: The timeout has been disabled. (required).</param>
        /// <param name="clientMaxSessionTimeoutMinutes">Determines how long a user can keep a session open after logging in to the Connection Server. When a session times out, the session is terminated and the Horizon client is disconnected from the resource. This property has a default value of 600 and a minimum value of 5. This property is required if clientMaxSessionTimeoutPolicy is set to TIMEOUT_AFTER..</param>
        /// <param name="clientMaxSessionTimeoutPolicy">Client max session lifetime policy. This property has a default value of TIMEOUT_AFTER. A value of TIMEOUT_AFTER indicates that the Horizon client session times out after a configurable session length. A value of NEVER indicates that the Horizon client session will not time out and will only end due to inactivity. * TIMEOUT_AFTER: The timeout is set for a configurable time. * NEVER: The timeout has been disabled. (required).</param>
        /// <param name="clientSessionTimeoutMinutes">Determines the maximum length of time that a session will be kept active if there is no traffic between the Horizon client and the Connection Server. (required).</param>
        /// <param name="consoleSessionTimeoutMinutes">Determines how long an idle admin console session continues before the session times out..</param>
        /// <param name="displayPreLoginMessage">Indicates whether to show a disclaimer or other message when the Horizon Client user logs in. This change will take effect on next login for each user..</param>
        /// <param name="displayWarningBeforeForcedLogoff">Indicates whether to display a warning message when users are forced to log off because a scheduled or immediate update such as a machine-refresh operation is about to start..</param>
        /// <param name="enableAutomaticStatusUpdates">Enable updation of the global status of the application periodically. The Dashboard Information is also updated at regular intervals when Dashboard page is active..</param>
        /// <param name="enableCredentialCleanupForHtmlaccess">Indicates whether to clean up session credentials when one tab connecting to remote machine/application is closed..</param>
        /// <param name="enableMultiFactorReAuthentication">Enables 2 factor re-authentication after idle session timeout..</param>
        /// <param name="enableSendingDomainList">Indicates whether the domain list will be sent to the Horizon client. Since domain list will be sent before user is authenticated with server, it could disclose domain information to external users..</param>
        /// <param name="enableServerInSingleUserMode">Permits RDSServer operating systems to be used for non-RDS Machines..</param>
        /// <param name="forcedLogoffMessage">The warning to be displayed before logging off the user..</param>
        /// <param name="forcedLogoffTimeoutMinutes">The time to wait after the warning is displayed and before logging off the user..</param>
        /// <param name="hideDomainListInClient">Whether to hide the list of domains in the Horizon client user interface. If value set to true, the user will need to provide a UPN (e.g. user@domain) or a logon name in the format domain\\\\user when logging in..</param>
        /// <param name="hideServerInformationInClient">Indicates whether to hide the server URL in the Horizon client user interface..</param>
        /// <param name="machineSsoTimeoutMinutes">Single sign on will be disabled after the specified time has elapsed since the user connected to Connection Server..</param>
        /// <param name="machineSsoTimeoutPolicy">Specifies the policy for the maximum time after which single sign on will be disabled after a user connects to the Connection Server. * DISABLED_AFTER: Single sign on will be disabled after the specified number of minutes has elapsed since the user connected to Horizon Connection Server. * DISABLED: Single sign on is disabled. * ENABLED: Single sign on is enabled. (required).</param>
        /// <param name="preLoginMessage">Displays a disclaimer or another message to Horizon Client users when they log in. No message will be displayed if this is not set..</param>
        /// <param name="restrictedClientData">List of restricted Horizon Clients..</param>
        /// <param name="restrictedClientMessage">The message to be displayed to Horizon clients which are blocked by the Connection Server..</param>
        /// <param name="storeCalOnClient">Determines whether or not to store the RDS Per Device Client Access License on Horizon client devices. This value can be true only if Store Client Access License on Connection Server is true. (required).</param>
        /// <param name="storeCalOnConnectionServer">Determines whether or not to store the RDS Per Device Client Access License on Connection Server. (required).</param>
        public GeneralSettings(int? applicationSsoTimeoutMinutes = default(int?), ApplicationSsoTimeoutPolicyEnum applicationSsoTimeoutPolicy = default(ApplicationSsoTimeoutPolicyEnum), bool? blockRestrictedClients = default(bool?), int? clientIdleSessionTimeoutMinutes = default(int?), ClientIdleSessionTimeoutPolicyEnum clientIdleSessionTimeoutPolicy = default(ClientIdleSessionTimeoutPolicyEnum), int? clientMaxSessionTimeoutMinutes = default(int?), ClientMaxSessionTimeoutPolicyEnum clientMaxSessionTimeoutPolicy = default(ClientMaxSessionTimeoutPolicyEnum), int? clientSessionTimeoutMinutes = default(int?), int? consoleSessionTimeoutMinutes = default(int?), bool? displayPreLoginMessage = default(bool?), bool? displayWarningBeforeForcedLogoff = default(bool?), bool? enableAutomaticStatusUpdates = default(bool?), bool? enableCredentialCleanupForHtmlaccess = default(bool?), bool? enableMultiFactorReAuthentication = default(bool?), bool? enableSendingDomainList = default(bool?), bool? enableServerInSingleUserMode = default(bool?), string forcedLogoffMessage = default(string), int? forcedLogoffTimeoutMinutes = default(int?), bool? hideDomainListInClient = default(bool?), bool? hideServerInformationInClient = default(bool?), int? machineSsoTimeoutMinutes = default(int?), MachineSsoTimeoutPolicyEnum machineSsoTimeoutPolicy = default(MachineSsoTimeoutPolicyEnum), string preLoginMessage = default(string), List<RestrictedClientData> restrictedClientData = default(List<RestrictedClientData>), string restrictedClientMessage = default(string), bool? storeCalOnClient = default(bool?), bool? storeCalOnConnectionServer = default(bool?))
        {
            // to ensure "applicationSsoTimeoutPolicy" is required (not null)
            if (applicationSsoTimeoutPolicy == null)
            {
                throw new InvalidDataException("applicationSsoTimeoutPolicy is a required property for GeneralSettings and cannot be null");
            }
            else
            {
                this.ApplicationSsoTimeoutPolicy = applicationSsoTimeoutPolicy;
            }
            // to ensure "clientIdleSessionTimeoutPolicy" is required (not null)
            if (clientIdleSessionTimeoutPolicy == null)
            {
                throw new InvalidDataException("clientIdleSessionTimeoutPolicy is a required property for GeneralSettings and cannot be null");
            }
            else
            {
                this.ClientIdleSessionTimeoutPolicy = clientIdleSessionTimeoutPolicy;
            }
            // to ensure "clientMaxSessionTimeoutPolicy" is required (not null)
            if (clientMaxSessionTimeoutPolicy == null)
            {
                throw new InvalidDataException("clientMaxSessionTimeoutPolicy is a required property for GeneralSettings and cannot be null");
            }
            else
            {
                this.ClientMaxSessionTimeoutPolicy = clientMaxSessionTimeoutPolicy;
            }
            // to ensure "clientSessionTimeoutMinutes" is required (not null)
            if (clientSessionTimeoutMinutes == null)
            {
                throw new InvalidDataException("clientSessionTimeoutMinutes is a required property for GeneralSettings and cannot be null");
            }
            else
            {
                this.ClientSessionTimeoutMinutes = clientSessionTimeoutMinutes;
            }
            // to ensure "machineSsoTimeoutPolicy" is required (not null)
            if (machineSsoTimeoutPolicy == null)
            {
                throw new InvalidDataException("machineSsoTimeoutPolicy is a required property for GeneralSettings and cannot be null");
            }
            else
            {
                this.MachineSsoTimeoutPolicy = machineSsoTimeoutPolicy;
            }
            // to ensure "storeCalOnClient" is required (not null)
            if (storeCalOnClient == null)
            {
                throw new InvalidDataException("storeCalOnClient is a required property for GeneralSettings and cannot be null");
            }
            else
            {
                this.StoreCalOnClient = storeCalOnClient;
            }
            // to ensure "storeCalOnConnectionServer" is required (not null)
            if (storeCalOnConnectionServer == null)
            {
                throw new InvalidDataException("storeCalOnConnectionServer is a required property for GeneralSettings and cannot be null");
            }
            else
            {
                this.StoreCalOnConnectionServer = storeCalOnConnectionServer;
            }
            this.ApplicationSsoTimeoutMinutes = applicationSsoTimeoutMinutes;
            this.BlockRestrictedClients = blockRestrictedClients;
            this.ClientIdleSessionTimeoutMinutes = clientIdleSessionTimeoutMinutes;
            this.ClientMaxSessionTimeoutMinutes = clientMaxSessionTimeoutMinutes;
            this.ConsoleSessionTimeoutMinutes = consoleSessionTimeoutMinutes;
            this.DisplayPreLoginMessage = displayPreLoginMessage;
            this.DisplayWarningBeforeForcedLogoff = displayWarningBeforeForcedLogoff;
            this.EnableAutomaticStatusUpdates = enableAutomaticStatusUpdates;
            this.EnableCredentialCleanupForHtmlaccess = enableCredentialCleanupForHtmlaccess;
            this.EnableMultiFactorReAuthentication = enableMultiFactorReAuthentication;
            this.EnableSendingDomainList = enableSendingDomainList;
            this.EnableServerInSingleUserMode = enableServerInSingleUserMode;
            this.ForcedLogoffMessage = forcedLogoffMessage;
            this.ForcedLogoffTimeoutMinutes = forcedLogoffTimeoutMinutes;
            this.HideDomainListInClient = hideDomainListInClient;
            this.HideServerInformationInClient = hideServerInformationInClient;
            this.MachineSsoTimeoutMinutes = machineSsoTimeoutMinutes;
            this.PreLoginMessage = preLoginMessage;
            this.RestrictedClientData = restrictedClientData;
            this.RestrictedClientMessage = restrictedClientMessage;
        }
        
        /// <summary>
        /// The time allowed to elapse after a user has authenticated before the application SSO credentials are locked unless the user&#39;s Horizon client supports idle sessions and the user remains active.
        /// </summary>
        /// <value>The time allowed to elapse after a user has authenticated before the application SSO credentials are locked unless the user&#39;s Horizon client supports idle sessions and the user remains active.</value>
        [DataMember(Name="application_sso_timeout_minutes", EmitDefaultValue=false)]
        public int? ApplicationSsoTimeoutMinutes { get; set; }


        /// <summary>
        /// Indicates whether restricted Horizon clients should be blocked by the Connection Server.
        /// </summary>
        /// <value>Indicates whether restricted Horizon clients should be blocked by the Connection Server.</value>
        [DataMember(Name="block_restricted_clients", EmitDefaultValue=false)]
        public bool? BlockRestrictedClients { get; set; }

        /// <summary>
        /// Determines how long a user can be idle before the Connection Server takes measure to protect the session.
        /// </summary>
        /// <value>Determines how long a user can be idle before the Connection Server takes measure to protect the session.</value>
        [DataMember(Name="client_idle_session_timeout_minutes", EmitDefaultValue=false)]
        public int? ClientIdleSessionTimeoutMinutes { get; set; }


        /// <summary>
        /// Determines how long a user can keep a session open after logging in to the Connection Server. When a session times out, the session is terminated and the Horizon client is disconnected from the resource. This property has a default value of 600 and a minimum value of 5. This property is required if clientMaxSessionTimeoutPolicy is set to TIMEOUT_AFTER.
        /// </summary>
        /// <value>Determines how long a user can keep a session open after logging in to the Connection Server. When a session times out, the session is terminated and the Horizon client is disconnected from the resource. This property has a default value of 600 and a minimum value of 5. This property is required if clientMaxSessionTimeoutPolicy is set to TIMEOUT_AFTER.</value>
        [DataMember(Name="client_max_session_timeout_minutes", EmitDefaultValue=false)]
        public int? ClientMaxSessionTimeoutMinutes { get; set; }


        /// <summary>
        /// Determines the maximum length of time that a session will be kept active if there is no traffic between the Horizon client and the Connection Server.
        /// </summary>
        /// <value>Determines the maximum length of time that a session will be kept active if there is no traffic between the Horizon client and the Connection Server.</value>
        [DataMember(Name="client_session_timeout_minutes", EmitDefaultValue=false)]
        public int? ClientSessionTimeoutMinutes { get; set; }

        /// <summary>
        /// Determines how long an idle admin console session continues before the session times out.
        /// </summary>
        /// <value>Determines how long an idle admin console session continues before the session times out.</value>
        [DataMember(Name="console_session_timeout_minutes", EmitDefaultValue=false)]
        public int? ConsoleSessionTimeoutMinutes { get; set; }

        /// <summary>
        /// Indicates whether to show a disclaimer or other message when the Horizon Client user logs in. This change will take effect on next login for each user.
        /// </summary>
        /// <value>Indicates whether to show a disclaimer or other message when the Horizon Client user logs in. This change will take effect on next login for each user.</value>
        [DataMember(Name="display_pre_login_message", EmitDefaultValue=false)]
        public bool? DisplayPreLoginMessage { get; set; }

        /// <summary>
        /// Indicates whether to display a warning message when users are forced to log off because a scheduled or immediate update such as a machine-refresh operation is about to start.
        /// </summary>
        /// <value>Indicates whether to display a warning message when users are forced to log off because a scheduled or immediate update such as a machine-refresh operation is about to start.</value>
        [DataMember(Name="display_warning_before_forced_logoff", EmitDefaultValue=false)]
        public bool? DisplayWarningBeforeForcedLogoff { get; set; }

        /// <summary>
        /// Enable updation of the global status of the application periodically. The Dashboard Information is also updated at regular intervals when Dashboard page is active.
        /// </summary>
        /// <value>Enable updation of the global status of the application periodically. The Dashboard Information is also updated at regular intervals when Dashboard page is active.</value>
        [DataMember(Name="enable_automatic_status_updates", EmitDefaultValue=false)]
        public bool? EnableAutomaticStatusUpdates { get; set; }

        /// <summary>
        /// Indicates whether to clean up session credentials when one tab connecting to remote machine/application is closed.
        /// </summary>
        /// <value>Indicates whether to clean up session credentials when one tab connecting to remote machine/application is closed.</value>
        [DataMember(Name="enable_credential_cleanup_for_htmlaccess", EmitDefaultValue=false)]
        public bool? EnableCredentialCleanupForHtmlaccess { get; set; }

        /// <summary>
        /// Enables 2 factor re-authentication after idle session timeout.
        /// </summary>
        /// <value>Enables 2 factor re-authentication after idle session timeout.</value>
        [DataMember(Name="enable_multi_factor_re_authentication", EmitDefaultValue=false)]
        public bool? EnableMultiFactorReAuthentication { get; set; }

        /// <summary>
        /// Indicates whether the domain list will be sent to the Horizon client. Since domain list will be sent before user is authenticated with server, it could disclose domain information to external users.
        /// </summary>
        /// <value>Indicates whether the domain list will be sent to the Horizon client. Since domain list will be sent before user is authenticated with server, it could disclose domain information to external users.</value>
        [DataMember(Name="enable_sending_domain_list", EmitDefaultValue=false)]
        public bool? EnableSendingDomainList { get; set; }

        /// <summary>
        /// Permits RDSServer operating systems to be used for non-RDS Machines.
        /// </summary>
        /// <value>Permits RDSServer operating systems to be used for non-RDS Machines.</value>
        [DataMember(Name="enable_server_in_single_user_mode", EmitDefaultValue=false)]
        public bool? EnableServerInSingleUserMode { get; set; }

        /// <summary>
        /// The warning to be displayed before logging off the user.
        /// </summary>
        /// <value>The warning to be displayed before logging off the user.</value>
        [DataMember(Name="forced_logoff_message", EmitDefaultValue=false)]
        public string ForcedLogoffMessage { get; set; }

        /// <summary>
        /// The time to wait after the warning is displayed and before logging off the user.
        /// </summary>
        /// <value>The time to wait after the warning is displayed and before logging off the user.</value>
        [DataMember(Name="forced_logoff_timeout_minutes", EmitDefaultValue=false)]
        public int? ForcedLogoffTimeoutMinutes { get; set; }

        /// <summary>
        /// Whether to hide the list of domains in the Horizon client user interface. If value set to true, the user will need to provide a UPN (e.g. user@domain) or a logon name in the format domain\\\\user when logging in.
        /// </summary>
        /// <value>Whether to hide the list of domains in the Horizon client user interface. If value set to true, the user will need to provide a UPN (e.g. user@domain) or a logon name in the format domain\\\\user when logging in.</value>
        [DataMember(Name="hide_domain_list_in_client", EmitDefaultValue=false)]
        public bool? HideDomainListInClient { get; set; }

        /// <summary>
        /// Indicates whether to hide the server URL in the Horizon client user interface.
        /// </summary>
        /// <value>Indicates whether to hide the server URL in the Horizon client user interface.</value>
        [DataMember(Name="hide_server_information_in_client", EmitDefaultValue=false)]
        public bool? HideServerInformationInClient { get; set; }

        /// <summary>
        /// Single sign on will be disabled after the specified time has elapsed since the user connected to Connection Server.
        /// </summary>
        /// <value>Single sign on will be disabled after the specified time has elapsed since the user connected to Connection Server.</value>
        [DataMember(Name="machine_sso_timeout_minutes", EmitDefaultValue=false)]
        public int? MachineSsoTimeoutMinutes { get; set; }


        /// <summary>
        /// Displays a disclaimer or another message to Horizon Client users when they log in. No message will be displayed if this is not set.
        /// </summary>
        /// <value>Displays a disclaimer or another message to Horizon Client users when they log in. No message will be displayed if this is not set.</value>
        [DataMember(Name="pre_login_message", EmitDefaultValue=false)]
        public string PreLoginMessage { get; set; }

        /// <summary>
        /// List of restricted Horizon Clients.
        /// </summary>
        /// <value>List of restricted Horizon Clients.</value>
        [DataMember(Name="restricted_client_data", EmitDefaultValue=false)]
        public List<RestrictedClientData> RestrictedClientData { get; set; }

        /// <summary>
        /// The message to be displayed to Horizon clients which are blocked by the Connection Server.
        /// </summary>
        /// <value>The message to be displayed to Horizon clients which are blocked by the Connection Server.</value>
        [DataMember(Name="restricted_client_message", EmitDefaultValue=false)]
        public string RestrictedClientMessage { get; set; }

        /// <summary>
        /// Determines whether or not to store the RDS Per Device Client Access License on Horizon client devices. This value can be true only if Store Client Access License on Connection Server is true.
        /// </summary>
        /// <value>Determines whether or not to store the RDS Per Device Client Access License on Horizon client devices. This value can be true only if Store Client Access License on Connection Server is true.</value>
        [DataMember(Name="store_cal_on_client", EmitDefaultValue=false)]
        public bool? StoreCalOnClient { get; set; }

        /// <summary>
        /// Determines whether or not to store the RDS Per Device Client Access License on Connection Server.
        /// </summary>
        /// <value>Determines whether or not to store the RDS Per Device Client Access License on Connection Server.</value>
        [DataMember(Name="store_cal_on_connection_server", EmitDefaultValue=false)]
        public bool? StoreCalOnConnectionServer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeneralSettings {\n");
            sb.Append("  ApplicationSsoTimeoutMinutes: ").Append(ApplicationSsoTimeoutMinutes).Append("\n");
            sb.Append("  ApplicationSsoTimeoutPolicy: ").Append(ApplicationSsoTimeoutPolicy).Append("\n");
            sb.Append("  BlockRestrictedClients: ").Append(BlockRestrictedClients).Append("\n");
            sb.Append("  ClientIdleSessionTimeoutMinutes: ").Append(ClientIdleSessionTimeoutMinutes).Append("\n");
            sb.Append("  ClientIdleSessionTimeoutPolicy: ").Append(ClientIdleSessionTimeoutPolicy).Append("\n");
            sb.Append("  ClientMaxSessionTimeoutMinutes: ").Append(ClientMaxSessionTimeoutMinutes).Append("\n");
            sb.Append("  ClientMaxSessionTimeoutPolicy: ").Append(ClientMaxSessionTimeoutPolicy).Append("\n");
            sb.Append("  ClientSessionTimeoutMinutes: ").Append(ClientSessionTimeoutMinutes).Append("\n");
            sb.Append("  ConsoleSessionTimeoutMinutes: ").Append(ConsoleSessionTimeoutMinutes).Append("\n");
            sb.Append("  DisplayPreLoginMessage: ").Append(DisplayPreLoginMessage).Append("\n");
            sb.Append("  DisplayWarningBeforeForcedLogoff: ").Append(DisplayWarningBeforeForcedLogoff).Append("\n");
            sb.Append("  EnableAutomaticStatusUpdates: ").Append(EnableAutomaticStatusUpdates).Append("\n");
            sb.Append("  EnableCredentialCleanupForHtmlaccess: ").Append(EnableCredentialCleanupForHtmlaccess).Append("\n");
            sb.Append("  EnableMultiFactorReAuthentication: ").Append(EnableMultiFactorReAuthentication).Append("\n");
            sb.Append("  EnableSendingDomainList: ").Append(EnableSendingDomainList).Append("\n");
            sb.Append("  EnableServerInSingleUserMode: ").Append(EnableServerInSingleUserMode).Append("\n");
            sb.Append("  ForcedLogoffMessage: ").Append(ForcedLogoffMessage).Append("\n");
            sb.Append("  ForcedLogoffTimeoutMinutes: ").Append(ForcedLogoffTimeoutMinutes).Append("\n");
            sb.Append("  HideDomainListInClient: ").Append(HideDomainListInClient).Append("\n");
            sb.Append("  HideServerInformationInClient: ").Append(HideServerInformationInClient).Append("\n");
            sb.Append("  MachineSsoTimeoutMinutes: ").Append(MachineSsoTimeoutMinutes).Append("\n");
            sb.Append("  MachineSsoTimeoutPolicy: ").Append(MachineSsoTimeoutPolicy).Append("\n");
            sb.Append("  PreLoginMessage: ").Append(PreLoginMessage).Append("\n");
            sb.Append("  RestrictedClientData: ").Append(RestrictedClientData).Append("\n");
            sb.Append("  RestrictedClientMessage: ").Append(RestrictedClientMessage).Append("\n");
            sb.Append("  StoreCalOnClient: ").Append(StoreCalOnClient).Append("\n");
            sb.Append("  StoreCalOnConnectionServer: ").Append(StoreCalOnConnectionServer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeneralSettings);
        }

        /// <summary>
        /// Returns true if GeneralSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of GeneralSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeneralSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationSsoTimeoutMinutes == input.ApplicationSsoTimeoutMinutes ||
                    (this.ApplicationSsoTimeoutMinutes != null &&
                    this.ApplicationSsoTimeoutMinutes.Equals(input.ApplicationSsoTimeoutMinutes))
                ) && 
                (
                    this.ApplicationSsoTimeoutPolicy == input.ApplicationSsoTimeoutPolicy ||
                    (this.ApplicationSsoTimeoutPolicy != null &&
                    this.ApplicationSsoTimeoutPolicy.Equals(input.ApplicationSsoTimeoutPolicy))
                ) && 
                (
                    this.BlockRestrictedClients == input.BlockRestrictedClients ||
                    (this.BlockRestrictedClients != null &&
                    this.BlockRestrictedClients.Equals(input.BlockRestrictedClients))
                ) && 
                (
                    this.ClientIdleSessionTimeoutMinutes == input.ClientIdleSessionTimeoutMinutes ||
                    (this.ClientIdleSessionTimeoutMinutes != null &&
                    this.ClientIdleSessionTimeoutMinutes.Equals(input.ClientIdleSessionTimeoutMinutes))
                ) && 
                (
                    this.ClientIdleSessionTimeoutPolicy == input.ClientIdleSessionTimeoutPolicy ||
                    (this.ClientIdleSessionTimeoutPolicy != null &&
                    this.ClientIdleSessionTimeoutPolicy.Equals(input.ClientIdleSessionTimeoutPolicy))
                ) && 
                (
                    this.ClientMaxSessionTimeoutMinutes == input.ClientMaxSessionTimeoutMinutes ||
                    (this.ClientMaxSessionTimeoutMinutes != null &&
                    this.ClientMaxSessionTimeoutMinutes.Equals(input.ClientMaxSessionTimeoutMinutes))
                ) && 
                (
                    this.ClientMaxSessionTimeoutPolicy == input.ClientMaxSessionTimeoutPolicy ||
                    (this.ClientMaxSessionTimeoutPolicy != null &&
                    this.ClientMaxSessionTimeoutPolicy.Equals(input.ClientMaxSessionTimeoutPolicy))
                ) && 
                (
                    this.ClientSessionTimeoutMinutes == input.ClientSessionTimeoutMinutes ||
                    (this.ClientSessionTimeoutMinutes != null &&
                    this.ClientSessionTimeoutMinutes.Equals(input.ClientSessionTimeoutMinutes))
                ) && 
                (
                    this.ConsoleSessionTimeoutMinutes == input.ConsoleSessionTimeoutMinutes ||
                    (this.ConsoleSessionTimeoutMinutes != null &&
                    this.ConsoleSessionTimeoutMinutes.Equals(input.ConsoleSessionTimeoutMinutes))
                ) && 
                (
                    this.DisplayPreLoginMessage == input.DisplayPreLoginMessage ||
                    (this.DisplayPreLoginMessage != null &&
                    this.DisplayPreLoginMessage.Equals(input.DisplayPreLoginMessage))
                ) && 
                (
                    this.DisplayWarningBeforeForcedLogoff == input.DisplayWarningBeforeForcedLogoff ||
                    (this.DisplayWarningBeforeForcedLogoff != null &&
                    this.DisplayWarningBeforeForcedLogoff.Equals(input.DisplayWarningBeforeForcedLogoff))
                ) && 
                (
                    this.EnableAutomaticStatusUpdates == input.EnableAutomaticStatusUpdates ||
                    (this.EnableAutomaticStatusUpdates != null &&
                    this.EnableAutomaticStatusUpdates.Equals(input.EnableAutomaticStatusUpdates))
                ) && 
                (
                    this.EnableCredentialCleanupForHtmlaccess == input.EnableCredentialCleanupForHtmlaccess ||
                    (this.EnableCredentialCleanupForHtmlaccess != null &&
                    this.EnableCredentialCleanupForHtmlaccess.Equals(input.EnableCredentialCleanupForHtmlaccess))
                ) && 
                (
                    this.EnableMultiFactorReAuthentication == input.EnableMultiFactorReAuthentication ||
                    (this.EnableMultiFactorReAuthentication != null &&
                    this.EnableMultiFactorReAuthentication.Equals(input.EnableMultiFactorReAuthentication))
                ) && 
                (
                    this.EnableSendingDomainList == input.EnableSendingDomainList ||
                    (this.EnableSendingDomainList != null &&
                    this.EnableSendingDomainList.Equals(input.EnableSendingDomainList))
                ) && 
                (
                    this.EnableServerInSingleUserMode == input.EnableServerInSingleUserMode ||
                    (this.EnableServerInSingleUserMode != null &&
                    this.EnableServerInSingleUserMode.Equals(input.EnableServerInSingleUserMode))
                ) && 
                (
                    this.ForcedLogoffMessage == input.ForcedLogoffMessage ||
                    (this.ForcedLogoffMessage != null &&
                    this.ForcedLogoffMessage.Equals(input.ForcedLogoffMessage))
                ) && 
                (
                    this.ForcedLogoffTimeoutMinutes == input.ForcedLogoffTimeoutMinutes ||
                    (this.ForcedLogoffTimeoutMinutes != null &&
                    this.ForcedLogoffTimeoutMinutes.Equals(input.ForcedLogoffTimeoutMinutes))
                ) && 
                (
                    this.HideDomainListInClient == input.HideDomainListInClient ||
                    (this.HideDomainListInClient != null &&
                    this.HideDomainListInClient.Equals(input.HideDomainListInClient))
                ) && 
                (
                    this.HideServerInformationInClient == input.HideServerInformationInClient ||
                    (this.HideServerInformationInClient != null &&
                    this.HideServerInformationInClient.Equals(input.HideServerInformationInClient))
                ) && 
                (
                    this.MachineSsoTimeoutMinutes == input.MachineSsoTimeoutMinutes ||
                    (this.MachineSsoTimeoutMinutes != null &&
                    this.MachineSsoTimeoutMinutes.Equals(input.MachineSsoTimeoutMinutes))
                ) && 
                (
                    this.MachineSsoTimeoutPolicy == input.MachineSsoTimeoutPolicy ||
                    (this.MachineSsoTimeoutPolicy != null &&
                    this.MachineSsoTimeoutPolicy.Equals(input.MachineSsoTimeoutPolicy))
                ) && 
                (
                    this.PreLoginMessage == input.PreLoginMessage ||
                    (this.PreLoginMessage != null &&
                    this.PreLoginMessage.Equals(input.PreLoginMessage))
                ) && 
                (
                    this.RestrictedClientData == input.RestrictedClientData ||
                    this.RestrictedClientData != null &&
                    this.RestrictedClientData.SequenceEqual(input.RestrictedClientData)
                ) && 
                (
                    this.RestrictedClientMessage == input.RestrictedClientMessage ||
                    (this.RestrictedClientMessage != null &&
                    this.RestrictedClientMessage.Equals(input.RestrictedClientMessage))
                ) && 
                (
                    this.StoreCalOnClient == input.StoreCalOnClient ||
                    (this.StoreCalOnClient != null &&
                    this.StoreCalOnClient.Equals(input.StoreCalOnClient))
                ) && 
                (
                    this.StoreCalOnConnectionServer == input.StoreCalOnConnectionServer ||
                    (this.StoreCalOnConnectionServer != null &&
                    this.StoreCalOnConnectionServer.Equals(input.StoreCalOnConnectionServer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationSsoTimeoutMinutes != null)
                    hashCode = hashCode * 59 + this.ApplicationSsoTimeoutMinutes.GetHashCode();
                if (this.ApplicationSsoTimeoutPolicy != null)
                    hashCode = hashCode * 59 + this.ApplicationSsoTimeoutPolicy.GetHashCode();
                if (this.BlockRestrictedClients != null)
                    hashCode = hashCode * 59 + this.BlockRestrictedClients.GetHashCode();
                if (this.ClientIdleSessionTimeoutMinutes != null)
                    hashCode = hashCode * 59 + this.ClientIdleSessionTimeoutMinutes.GetHashCode();
                if (this.ClientIdleSessionTimeoutPolicy != null)
                    hashCode = hashCode * 59 + this.ClientIdleSessionTimeoutPolicy.GetHashCode();
                if (this.ClientMaxSessionTimeoutMinutes != null)
                    hashCode = hashCode * 59 + this.ClientMaxSessionTimeoutMinutes.GetHashCode();
                if (this.ClientMaxSessionTimeoutPolicy != null)
                    hashCode = hashCode * 59 + this.ClientMaxSessionTimeoutPolicy.GetHashCode();
                if (this.ClientSessionTimeoutMinutes != null)
                    hashCode = hashCode * 59 + this.ClientSessionTimeoutMinutes.GetHashCode();
                if (this.ConsoleSessionTimeoutMinutes != null)
                    hashCode = hashCode * 59 + this.ConsoleSessionTimeoutMinutes.GetHashCode();
                if (this.DisplayPreLoginMessage != null)
                    hashCode = hashCode * 59 + this.DisplayPreLoginMessage.GetHashCode();
                if (this.DisplayWarningBeforeForcedLogoff != null)
                    hashCode = hashCode * 59 + this.DisplayWarningBeforeForcedLogoff.GetHashCode();
                if (this.EnableAutomaticStatusUpdates != null)
                    hashCode = hashCode * 59 + this.EnableAutomaticStatusUpdates.GetHashCode();
                if (this.EnableCredentialCleanupForHtmlaccess != null)
                    hashCode = hashCode * 59 + this.EnableCredentialCleanupForHtmlaccess.GetHashCode();
                if (this.EnableMultiFactorReAuthentication != null)
                    hashCode = hashCode * 59 + this.EnableMultiFactorReAuthentication.GetHashCode();
                if (this.EnableSendingDomainList != null)
                    hashCode = hashCode * 59 + this.EnableSendingDomainList.GetHashCode();
                if (this.EnableServerInSingleUserMode != null)
                    hashCode = hashCode * 59 + this.EnableServerInSingleUserMode.GetHashCode();
                if (this.ForcedLogoffMessage != null)
                    hashCode = hashCode * 59 + this.ForcedLogoffMessage.GetHashCode();
                if (this.ForcedLogoffTimeoutMinutes != null)
                    hashCode = hashCode * 59 + this.ForcedLogoffTimeoutMinutes.GetHashCode();
                if (this.HideDomainListInClient != null)
                    hashCode = hashCode * 59 + this.HideDomainListInClient.GetHashCode();
                if (this.HideServerInformationInClient != null)
                    hashCode = hashCode * 59 + this.HideServerInformationInClient.GetHashCode();
                if (this.MachineSsoTimeoutMinutes != null)
                    hashCode = hashCode * 59 + this.MachineSsoTimeoutMinutes.GetHashCode();
                if (this.MachineSsoTimeoutPolicy != null)
                    hashCode = hashCode * 59 + this.MachineSsoTimeoutPolicy.GetHashCode();
                if (this.PreLoginMessage != null)
                    hashCode = hashCode * 59 + this.PreLoginMessage.GetHashCode();
                if (this.RestrictedClientData != null)
                    hashCode = hashCode * 59 + this.RestrictedClientData.GetHashCode();
                if (this.RestrictedClientMessage != null)
                    hashCode = hashCode * 59 + this.RestrictedClientMessage.GetHashCode();
                if (this.StoreCalOnClient != null)
                    hashCode = hashCode * 59 + this.StoreCalOnClient.GetHashCode();
                if (this.StoreCalOnConnectionServer != null)
                    hashCode = hashCode * 59 + this.StoreCalOnConnectionServer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
