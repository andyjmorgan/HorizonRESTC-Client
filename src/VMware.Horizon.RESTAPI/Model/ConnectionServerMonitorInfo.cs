/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Monitoring information related to Connection Server.
    /// </summary>
    [DataContract]
    public partial class ConnectionServerMonitorInfo :  IEquatable<ConnectionServerMonitorInfo>, IValidatableObject
    {
        /// <summary>
        /// Status of the Connection Server. * OK: The Connection Server is working properly. * ERROR: Error occurred when connecting to Connection Server. * NOT_RESPONDING: The Connection Server is not responding. * UNKNOWN: Status of Connection Server is unknown.
        /// </summary>
        /// <value>Status of the Connection Server. * OK: The Connection Server is working properly. * ERROR: Error occurred when connecting to Connection Server. * NOT_RESPONDING: The Connection Server is not responding. * UNKNOWN: Status of Connection Server is unknown.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum OK for value: OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OK = 1,
            
            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 2,
            
            /// <summary>
            /// Enum NOTRESPONDING for value: NOT_RESPONDING
            /// </summary>
            [EnumMember(Value = "NOT_RESPONDING")]
            NOTRESPONDING = 3,
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 4
        }

        /// <summary>
        /// Status of the Connection Server. * OK: The Connection Server is working properly. * ERROR: Error occurred when connecting to Connection Server. * NOT_RESPONDING: The Connection Server is not responding. * UNKNOWN: Status of Connection Server is unknown.
        /// </summary>
        /// <value>Status of the Connection Server. * OK: The Connection Server is working properly. * ERROR: Error occurred when connecting to Connection Server. * NOT_RESPONDING: The Connection Server is not responding. * UNKNOWN: Status of Connection Server is unknown.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionServerMonitorInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConnectionServerMonitorInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionServerMonitorInfo" /> class.
        /// </summary>
        /// <param name="certificate">Connection Server certificate information. (required).</param>
        /// <param name="connectionCount">Number of connections to this Connection Server..</param>
        /// <param name="csReplications">Connection Server replication status with respect to the Peer Connection Servers in the same cluster..</param>
        /// <param name="defaultCertificate">Indicates whether server has the default certificate..</param>
        /// <param name="details">Details about the Connection Server. (required).</param>
        /// <param name="id">Unique ID of the Connection Server. (required).</param>
        /// <param name="name">Connection Server host name or IP address. (required).</param>
        /// <param name="services">Connection Server related Windows services information..</param>
        /// <param name="sessionProtocolData">PCoIP, RDP or BLAST protocol sessions details when clients connect directly to the connection server..</param>
        /// <param name="sessionThreshold">The maximum number of connections allowed for the connection server through the Horizon client. If all of the secure gateways (HTTP(S)/PCOIP/BLAST) are enabled, this field denotes the maximum number of connections allowed for the connection server.If none of the secure gateways(HTTP(S)/PCOIP/BLAST) are enabled, sessionThreshold value will not be set..</param>
        /// <param name="status">Status of the Connection Server. * OK: The Connection Server is working properly. * ERROR: Error occurred when connecting to Connection Server. * NOT_RESPONDING: The Connection Server is not responding. * UNKNOWN: Status of Connection Server is unknown. (required).</param>
        /// <param name="tunnelConnectionCount">Number of connections tunneled through this Connection Server..</param>
        public ConnectionServerMonitorInfo(CertificateMonitorInfo certificate = default(CertificateMonitorInfo), int? connectionCount = default(int?), List<ConnectionServerMonitorCSReplication> csReplications = default(List<ConnectionServerMonitorCSReplication>), bool? defaultCertificate = default(bool?), ConnectionServerMonitorDetails details = default(ConnectionServerMonitorDetails), string id = default(string), string name = default(string), List<ConnectionServerMonitorServiceStatus> services = default(List<ConnectionServerMonitorServiceStatus>), List<ConnectionServerSessionProtocolData> sessionProtocolData = default(List<ConnectionServerSessionProtocolData>), int? sessionThreshold = default(int?), StatusEnum status = default(StatusEnum), int? tunnelConnectionCount = default(int?))
        {
            // to ensure "certificate" is required (not null)
            if (certificate == null)
            {
                throw new InvalidDataException("certificate is a required property for ConnectionServerMonitorInfo and cannot be null");
            }
            else
            {
                this.Certificate = certificate;
            }
            // to ensure "details" is required (not null)
            if (details == null)
            {
                throw new InvalidDataException("details is a required property for ConnectionServerMonitorInfo and cannot be null");
            }
            else
            {
                this.Details = details;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ConnectionServerMonitorInfo and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ConnectionServerMonitorInfo and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for ConnectionServerMonitorInfo and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.ConnectionCount = connectionCount;
            this.CsReplications = csReplications;
            this.DefaultCertificate = defaultCertificate;
            this.Services = services;
            this.SessionProtocolData = sessionProtocolData;
            this.SessionThreshold = sessionThreshold;
            this.TunnelConnectionCount = tunnelConnectionCount;
        }
        
        /// <summary>
        /// Connection Server certificate information.
        /// </summary>
        /// <value>Connection Server certificate information.</value>
        [DataMember(Name="certificate", EmitDefaultValue=false)]
        public CertificateMonitorInfo Certificate { get; set; }

        /// <summary>
        /// Number of connections to this Connection Server.
        /// </summary>
        /// <value>Number of connections to this Connection Server.</value>
        [DataMember(Name="connection_count", EmitDefaultValue=false)]
        public int? ConnectionCount { get; set; }

        /// <summary>
        /// Connection Server replication status with respect to the Peer Connection Servers in the same cluster.
        /// </summary>
        /// <value>Connection Server replication status with respect to the Peer Connection Servers in the same cluster.</value>
        [DataMember(Name="cs_replications", EmitDefaultValue=false)]
        public List<ConnectionServerMonitorCSReplication> CsReplications { get; set; }

        /// <summary>
        /// Indicates whether server has the default certificate.
        /// </summary>
        /// <value>Indicates whether server has the default certificate.</value>
        [DataMember(Name="default_certificate", EmitDefaultValue=false)]
        public bool? DefaultCertificate { get; set; }

        /// <summary>
        /// Details about the Connection Server.
        /// </summary>
        /// <value>Details about the Connection Server.</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public ConnectionServerMonitorDetails Details { get; set; }

        /// <summary>
        /// Unique ID of the Connection Server.
        /// </summary>
        /// <value>Unique ID of the Connection Server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Connection Server host name or IP address.
        /// </summary>
        /// <value>Connection Server host name or IP address.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Connection Server related Windows services information.
        /// </summary>
        /// <value>Connection Server related Windows services information.</value>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<ConnectionServerMonitorServiceStatus> Services { get; set; }

        /// <summary>
        /// PCoIP, RDP or BLAST protocol sessions details when clients connect directly to the connection server.
        /// </summary>
        /// <value>PCoIP, RDP or BLAST protocol sessions details when clients connect directly to the connection server.</value>
        [DataMember(Name="session_protocol_data", EmitDefaultValue=false)]
        public List<ConnectionServerSessionProtocolData> SessionProtocolData { get; set; }

        /// <summary>
        /// The maximum number of connections allowed for the connection server through the Horizon client. If all of the secure gateways (HTTP(S)/PCOIP/BLAST) are enabled, this field denotes the maximum number of connections allowed for the connection server.If none of the secure gateways(HTTP(S)/PCOIP/BLAST) are enabled, sessionThreshold value will not be set.
        /// </summary>
        /// <value>The maximum number of connections allowed for the connection server through the Horizon client. If all of the secure gateways (HTTP(S)/PCOIP/BLAST) are enabled, this field denotes the maximum number of connections allowed for the connection server.If none of the secure gateways(HTTP(S)/PCOIP/BLAST) are enabled, sessionThreshold value will not be set.</value>
        [DataMember(Name="session_threshold", EmitDefaultValue=false)]
        public int? SessionThreshold { get; set; }


        /// <summary>
        /// Number of connections tunneled through this Connection Server.
        /// </summary>
        /// <value>Number of connections tunneled through this Connection Server.</value>
        [DataMember(Name="tunnel_connection_count", EmitDefaultValue=false)]
        public int? TunnelConnectionCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConnectionServerMonitorInfo {\n");
            sb.Append("  Certificate: ").Append(Certificate).Append("\n");
            sb.Append("  ConnectionCount: ").Append(ConnectionCount).Append("\n");
            sb.Append("  CsReplications: ").Append(CsReplications).Append("\n");
            sb.Append("  DefaultCertificate: ").Append(DefaultCertificate).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  SessionProtocolData: ").Append(SessionProtocolData).Append("\n");
            sb.Append("  SessionThreshold: ").Append(SessionThreshold).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TunnelConnectionCount: ").Append(TunnelConnectionCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectionServerMonitorInfo);
        }

        /// <summary>
        /// Returns true if ConnectionServerMonitorInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectionServerMonitorInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectionServerMonitorInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Certificate == input.Certificate ||
                    (this.Certificate != null &&
                    this.Certificate.Equals(input.Certificate))
                ) && 
                (
                    this.ConnectionCount == input.ConnectionCount ||
                    (this.ConnectionCount != null &&
                    this.ConnectionCount.Equals(input.ConnectionCount))
                ) && 
                (
                    this.CsReplications == input.CsReplications ||
                    this.CsReplications != null &&
                    this.CsReplications.SequenceEqual(input.CsReplications)
                ) && 
                (
                    this.DefaultCertificate == input.DefaultCertificate ||
                    (this.DefaultCertificate != null &&
                    this.DefaultCertificate.Equals(input.DefaultCertificate))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Services == input.Services ||
                    this.Services != null &&
                    this.Services.SequenceEqual(input.Services)
                ) && 
                (
                    this.SessionProtocolData == input.SessionProtocolData ||
                    this.SessionProtocolData != null &&
                    this.SessionProtocolData.SequenceEqual(input.SessionProtocolData)
                ) && 
                (
                    this.SessionThreshold == input.SessionThreshold ||
                    (this.SessionThreshold != null &&
                    this.SessionThreshold.Equals(input.SessionThreshold))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TunnelConnectionCount == input.TunnelConnectionCount ||
                    (this.TunnelConnectionCount != null &&
                    this.TunnelConnectionCount.Equals(input.TunnelConnectionCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Certificate != null)
                    hashCode = hashCode * 59 + this.Certificate.GetHashCode();
                if (this.ConnectionCount != null)
                    hashCode = hashCode * 59 + this.ConnectionCount.GetHashCode();
                if (this.CsReplications != null)
                    hashCode = hashCode * 59 + this.CsReplications.GetHashCode();
                if (this.DefaultCertificate != null)
                    hashCode = hashCode * 59 + this.DefaultCertificate.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                if (this.SessionProtocolData != null)
                    hashCode = hashCode * 59 + this.SessionProtocolData.GetHashCode();
                if (this.SessionThreshold != null)
                    hashCode = hashCode * 59 + this.SessionThreshold.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TunnelConnectionCount != null)
                    hashCode = hashCode * 59 + this.TunnelConnectionCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
