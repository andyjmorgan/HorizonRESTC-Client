/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Details of RDS Server.
    /// </summary>
    [DataContract]
    public partial class RDSServerMonitorDetails :  IEquatable<RDSServerMonitorDetails>, IValidatableObject
    {
        /// <summary>
        /// Operating System version. * UNKNOWN: Unknown * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_SERVER_OTHER: Linux Server (other)
        /// </summary>
        /// <value>Operating System version. * UNKNOWN: Unknown * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_SERVER_OTHER: Linux Server (other)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatingSystemEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,
            
            /// <summary>
            /// Enum WINDOWSSERVER2003 for value: WINDOWS_SERVER_2003
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2003")]
            WINDOWSSERVER2003 = 2,
            
            /// <summary>
            /// Enum WINDOWSSERVER2008 for value: WINDOWS_SERVER_2008
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2008")]
            WINDOWSSERVER2008 = 3,
            
            /// <summary>
            /// Enum WINDOWSSERVER2008R2 for value: WINDOWS_SERVER_2008_R2
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2008_R2")]
            WINDOWSSERVER2008R2 = 4,
            
            /// <summary>
            /// Enum WINDOWSSERVER2012 for value: WINDOWS_SERVER_2012
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2012")]
            WINDOWSSERVER2012 = 5,
            
            /// <summary>
            /// Enum WINDOWSSERVER2012R2 for value: WINDOWS_SERVER_2012_R2
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2012_R2")]
            WINDOWSSERVER2012R2 = 6,
            
            /// <summary>
            /// Enum WINDOWSSERVER2016ORABOVE for value: WINDOWS_SERVER_2016_OR_ABOVE
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2016_OR_ABOVE")]
            WINDOWSSERVER2016ORABOVE = 7,
            
            /// <summary>
            /// Enum LINUXSERVEROTHER for value: LINUX_SERVER_OTHER
            /// </summary>
            [EnumMember(Value = "LINUX_SERVER_OTHER")]
            LINUXSERVEROTHER = 8
        }

        /// <summary>
        /// Operating System version. * UNKNOWN: Unknown * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_SERVER_OTHER: Linux Server (other)
        /// </summary>
        /// <value>Operating System version. * UNKNOWN: Unknown * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_SERVER_OTHER: Linux Server (other)</value>
        [DataMember(Name="operating_system", EmitDefaultValue=false)]
        public OperatingSystemEnum OperatingSystem { get; set; }
        /// <summary>
        /// State of RDS Server. * WAIT_FOR_AGENT: Connection Server is waiting to establish communication with View Agent on a RDS Server. * AGENT_UNREACHABLE: Connection Server cannot establish communication with View Agent on a RDS Server. * AGENT_CONFIG_ERROR: The RDS Server has configuration error. Ex: Remote Desktop Service role is not enabled. * AVAILABLE: The RDS Server is powered on and ready for an active connection. * DISABLED: The RDS Server is disabled. * DISABLE_IN_PROGRESS: Disabled RDS server still has some brokered sessions. It can still accept re-connections. * PROVISIONING: The RDS Server is being provisioned. * PROVISIONING_ERROR: An error occurred during provisioning. * CUSTOMIZING: The RDS Server is being customized. * DELETING: The RDS Server is marked for deletion. It will be deleted soon. * MAINTENANCE: The RDS Server is in maintenance mode. * ERROR: An unknown error occurred in the RDS Server. * PROVISIONED: The RDS Server has been provisioned. * CONNECTED: The RDS Server is in an active session. * DISCONNECTED: The RDS Server is in an active session but is disconnected. * AGENT_ERR_STARTUP_IN_PROGRESS: The Horizon Agent has started on the virtual machine, but other required services such as the display protocol are still starting. * AGENT_ERR_DISABLED: The Horizon Agent is disabled. * AGENT_ERR_INVALID_IP: The Horizon Agent has an invalid IP. * AGENT_ERR_NEED_REBOOT: The Horizon Agent needs reboot. * AGENT_ERR_PROTOCOL_FAILURE: Protocol such as RDP or PCoIP is not enabled. * AGENT_ERR_DOMAIN_FAILURE: The RDS Server has an invalid domain. * AGENT_DRAIN_MODE: The RDS Server is configured for drain mode. * AGENT_DRAIN_UNTIL_RESTART: The RDS Server is configured a mode to drain until restart. * ALREADY_USED: The RDS Server cannot accept new sessions. * IN_PROGRESS: There is a RDS Server operation in progress. * VALIDATING: The connection server is synchronizing state information with the agent. * UNKNOWN: Could not determine the state of the RDS Server.
        /// </summary>
        /// <value>State of RDS Server. * WAIT_FOR_AGENT: Connection Server is waiting to establish communication with View Agent on a RDS Server. * AGENT_UNREACHABLE: Connection Server cannot establish communication with View Agent on a RDS Server. * AGENT_CONFIG_ERROR: The RDS Server has configuration error. Ex: Remote Desktop Service role is not enabled. * AVAILABLE: The RDS Server is powered on and ready for an active connection. * DISABLED: The RDS Server is disabled. * DISABLE_IN_PROGRESS: Disabled RDS server still has some brokered sessions. It can still accept re-connections. * PROVISIONING: The RDS Server is being provisioned. * PROVISIONING_ERROR: An error occurred during provisioning. * CUSTOMIZING: The RDS Server is being customized. * DELETING: The RDS Server is marked for deletion. It will be deleted soon. * MAINTENANCE: The RDS Server is in maintenance mode. * ERROR: An unknown error occurred in the RDS Server. * PROVISIONED: The RDS Server has been provisioned. * CONNECTED: The RDS Server is in an active session. * DISCONNECTED: The RDS Server is in an active session but is disconnected. * AGENT_ERR_STARTUP_IN_PROGRESS: The Horizon Agent has started on the virtual machine, but other required services such as the display protocol are still starting. * AGENT_ERR_DISABLED: The Horizon Agent is disabled. * AGENT_ERR_INVALID_IP: The Horizon Agent has an invalid IP. * AGENT_ERR_NEED_REBOOT: The Horizon Agent needs reboot. * AGENT_ERR_PROTOCOL_FAILURE: Protocol such as RDP or PCoIP is not enabled. * AGENT_ERR_DOMAIN_FAILURE: The RDS Server has an invalid domain. * AGENT_DRAIN_MODE: The RDS Server is configured for drain mode. * AGENT_DRAIN_UNTIL_RESTART: The RDS Server is configured a mode to drain until restart. * ALREADY_USED: The RDS Server cannot accept new sessions. * IN_PROGRESS: There is a RDS Server operation in progress. * VALIDATING: The connection server is synchronizing state information with the agent. * UNKNOWN: Could not determine the state of the RDS Server.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum WAITFORAGENT for value: WAIT_FOR_AGENT
            /// </summary>
            [EnumMember(Value = "WAIT_FOR_AGENT")]
            WAITFORAGENT = 1,
            
            /// <summary>
            /// Enum AGENTUNREACHABLE for value: AGENT_UNREACHABLE
            /// </summary>
            [EnumMember(Value = "AGENT_UNREACHABLE")]
            AGENTUNREACHABLE = 2,
            
            /// <summary>
            /// Enum AGENTCONFIGERROR for value: AGENT_CONFIG_ERROR
            /// </summary>
            [EnumMember(Value = "AGENT_CONFIG_ERROR")]
            AGENTCONFIGERROR = 3,
            
            /// <summary>
            /// Enum AVAILABLE for value: AVAILABLE
            /// </summary>
            [EnumMember(Value = "AVAILABLE")]
            AVAILABLE = 4,
            
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 5,
            
            /// <summary>
            /// Enum DISABLEINPROGRESS for value: DISABLE_IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "DISABLE_IN_PROGRESS")]
            DISABLEINPROGRESS = 6,
            
            /// <summary>
            /// Enum PROVISIONING for value: PROVISIONING
            /// </summary>
            [EnumMember(Value = "PROVISIONING")]
            PROVISIONING = 7,
            
            /// <summary>
            /// Enum PROVISIONINGERROR for value: PROVISIONING_ERROR
            /// </summary>
            [EnumMember(Value = "PROVISIONING_ERROR")]
            PROVISIONINGERROR = 8,
            
            /// <summary>
            /// Enum CUSTOMIZING for value: CUSTOMIZING
            /// </summary>
            [EnumMember(Value = "CUSTOMIZING")]
            CUSTOMIZING = 9,
            
            /// <summary>
            /// Enum DELETING for value: DELETING
            /// </summary>
            [EnumMember(Value = "DELETING")]
            DELETING = 10,
            
            /// <summary>
            /// Enum MAINTENANCE for value: MAINTENANCE
            /// </summary>
            [EnumMember(Value = "MAINTENANCE")]
            MAINTENANCE = 11,
            
            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 12,
            
            /// <summary>
            /// Enum PROVISIONED for value: PROVISIONED
            /// </summary>
            [EnumMember(Value = "PROVISIONED")]
            PROVISIONED = 13,
            
            /// <summary>
            /// Enum CONNECTED for value: CONNECTED
            /// </summary>
            [EnumMember(Value = "CONNECTED")]
            CONNECTED = 14,
            
            /// <summary>
            /// Enum DISCONNECTED for value: DISCONNECTED
            /// </summary>
            [EnumMember(Value = "DISCONNECTED")]
            DISCONNECTED = 15,
            
            /// <summary>
            /// Enum AGENTERRSTARTUPINPROGRESS for value: AGENT_ERR_STARTUP_IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "AGENT_ERR_STARTUP_IN_PROGRESS")]
            AGENTERRSTARTUPINPROGRESS = 16,
            
            /// <summary>
            /// Enum AGENTERRDISABLED for value: AGENT_ERR_DISABLED
            /// </summary>
            [EnumMember(Value = "AGENT_ERR_DISABLED")]
            AGENTERRDISABLED = 17,
            
            /// <summary>
            /// Enum AGENTERRINVALIDIP for value: AGENT_ERR_INVALID_IP
            /// </summary>
            [EnumMember(Value = "AGENT_ERR_INVALID_IP")]
            AGENTERRINVALIDIP = 18,
            
            /// <summary>
            /// Enum AGENTERRNEEDREBOOT for value: AGENT_ERR_NEED_REBOOT
            /// </summary>
            [EnumMember(Value = "AGENT_ERR_NEED_REBOOT")]
            AGENTERRNEEDREBOOT = 19,
            
            /// <summary>
            /// Enum AGENTERRPROTOCOLFAILURE for value: AGENT_ERR_PROTOCOL_FAILURE
            /// </summary>
            [EnumMember(Value = "AGENT_ERR_PROTOCOL_FAILURE")]
            AGENTERRPROTOCOLFAILURE = 20,
            
            /// <summary>
            /// Enum AGENTERRDOMAINFAILURE for value: AGENT_ERR_DOMAIN_FAILURE
            /// </summary>
            [EnumMember(Value = "AGENT_ERR_DOMAIN_FAILURE")]
            AGENTERRDOMAINFAILURE = 21,
            
            /// <summary>
            /// Enum AGENTDRAINMODE for value: AGENT_DRAIN_MODE
            /// </summary>
            [EnumMember(Value = "AGENT_DRAIN_MODE")]
            AGENTDRAINMODE = 22,
            
            /// <summary>
            /// Enum AGENTDRAINUNTILRESTART for value: AGENT_DRAIN_UNTIL_RESTART
            /// </summary>
            [EnumMember(Value = "AGENT_DRAIN_UNTIL_RESTART")]
            AGENTDRAINUNTILRESTART = 23,
            
            /// <summary>
            /// Enum ALREADYUSED for value: ALREADY_USED
            /// </summary>
            [EnumMember(Value = "ALREADY_USED")]
            ALREADYUSED = 24,
            
            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 25,
            
            /// <summary>
            /// Enum VALIDATING for value: VALIDATING
            /// </summary>
            [EnumMember(Value = "VALIDATING")]
            VALIDATING = 26,
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 27
        }

        /// <summary>
        /// State of RDS Server. * WAIT_FOR_AGENT: Connection Server is waiting to establish communication with View Agent on a RDS Server. * AGENT_UNREACHABLE: Connection Server cannot establish communication with View Agent on a RDS Server. * AGENT_CONFIG_ERROR: The RDS Server has configuration error. Ex: Remote Desktop Service role is not enabled. * AVAILABLE: The RDS Server is powered on and ready for an active connection. * DISABLED: The RDS Server is disabled. * DISABLE_IN_PROGRESS: Disabled RDS server still has some brokered sessions. It can still accept re-connections. * PROVISIONING: The RDS Server is being provisioned. * PROVISIONING_ERROR: An error occurred during provisioning. * CUSTOMIZING: The RDS Server is being customized. * DELETING: The RDS Server is marked for deletion. It will be deleted soon. * MAINTENANCE: The RDS Server is in maintenance mode. * ERROR: An unknown error occurred in the RDS Server. * PROVISIONED: The RDS Server has been provisioned. * CONNECTED: The RDS Server is in an active session. * DISCONNECTED: The RDS Server is in an active session but is disconnected. * AGENT_ERR_STARTUP_IN_PROGRESS: The Horizon Agent has started on the virtual machine, but other required services such as the display protocol are still starting. * AGENT_ERR_DISABLED: The Horizon Agent is disabled. * AGENT_ERR_INVALID_IP: The Horizon Agent has an invalid IP. * AGENT_ERR_NEED_REBOOT: The Horizon Agent needs reboot. * AGENT_ERR_PROTOCOL_FAILURE: Protocol such as RDP or PCoIP is not enabled. * AGENT_ERR_DOMAIN_FAILURE: The RDS Server has an invalid domain. * AGENT_DRAIN_MODE: The RDS Server is configured for drain mode. * AGENT_DRAIN_UNTIL_RESTART: The RDS Server is configured a mode to drain until restart. * ALREADY_USED: The RDS Server cannot accept new sessions. * IN_PROGRESS: There is a RDS Server operation in progress. * VALIDATING: The connection server is synchronizing state information with the agent. * UNKNOWN: Could not determine the state of the RDS Server.
        /// </summary>
        /// <value>State of RDS Server. * WAIT_FOR_AGENT: Connection Server is waiting to establish communication with View Agent on a RDS Server. * AGENT_UNREACHABLE: Connection Server cannot establish communication with View Agent on a RDS Server. * AGENT_CONFIG_ERROR: The RDS Server has configuration error. Ex: Remote Desktop Service role is not enabled. * AVAILABLE: The RDS Server is powered on and ready for an active connection. * DISABLED: The RDS Server is disabled. * DISABLE_IN_PROGRESS: Disabled RDS server still has some brokered sessions. It can still accept re-connections. * PROVISIONING: The RDS Server is being provisioned. * PROVISIONING_ERROR: An error occurred during provisioning. * CUSTOMIZING: The RDS Server is being customized. * DELETING: The RDS Server is marked for deletion. It will be deleted soon. * MAINTENANCE: The RDS Server is in maintenance mode. * ERROR: An unknown error occurred in the RDS Server. * PROVISIONED: The RDS Server has been provisioned. * CONNECTED: The RDS Server is in an active session. * DISCONNECTED: The RDS Server is in an active session but is disconnected. * AGENT_ERR_STARTUP_IN_PROGRESS: The Horizon Agent has started on the virtual machine, but other required services such as the display protocol are still starting. * AGENT_ERR_DISABLED: The Horizon Agent is disabled. * AGENT_ERR_INVALID_IP: The Horizon Agent has an invalid IP. * AGENT_ERR_NEED_REBOOT: The Horizon Agent needs reboot. * AGENT_ERR_PROTOCOL_FAILURE: Protocol such as RDP or PCoIP is not enabled. * AGENT_ERR_DOMAIN_FAILURE: The RDS Server has an invalid domain. * AGENT_DRAIN_MODE: The RDS Server is configured for drain mode. * AGENT_DRAIN_UNTIL_RESTART: The RDS Server is configured a mode to drain until restart. * ALREADY_USED: The RDS Server cannot accept new sessions. * IN_PROGRESS: There is a RDS Server operation in progress. * VALIDATING: The connection server is synchronizing state information with the agent. * UNKNOWN: Could not determine the state of the RDS Server.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RDSServerMonitorDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RDSServerMonitorDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RDSServerMonitorDetails" /> class.
        /// </summary>
        /// <param name="agentBuild">Agent build number. (required).</param>
        /// <param name="agentVersion">Agent version. (required).</param>
        /// <param name="maxSessionsCountConfigured">Maximum number of sessions for RDS server as configured by administrator. Will be unset if the value is not configured..</param>
        /// <param name="operatingSystem">Operating System version. * UNKNOWN: Unknown * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_SERVER_OTHER: Linux Server (other) (required).</param>
        /// <param name="state">State of RDS Server. * WAIT_FOR_AGENT: Connection Server is waiting to establish communication with View Agent on a RDS Server. * AGENT_UNREACHABLE: Connection Server cannot establish communication with View Agent on a RDS Server. * AGENT_CONFIG_ERROR: The RDS Server has configuration error. Ex: Remote Desktop Service role is not enabled. * AVAILABLE: The RDS Server is powered on and ready for an active connection. * DISABLED: The RDS Server is disabled. * DISABLE_IN_PROGRESS: Disabled RDS server still has some brokered sessions. It can still accept re-connections. * PROVISIONING: The RDS Server is being provisioned. * PROVISIONING_ERROR: An error occurred during provisioning. * CUSTOMIZING: The RDS Server is being customized. * DELETING: The RDS Server is marked for deletion. It will be deleted soon. * MAINTENANCE: The RDS Server is in maintenance mode. * ERROR: An unknown error occurred in the RDS Server. * PROVISIONED: The RDS Server has been provisioned. * CONNECTED: The RDS Server is in an active session. * DISCONNECTED: The RDS Server is in an active session but is disconnected. * AGENT_ERR_STARTUP_IN_PROGRESS: The Horizon Agent has started on the virtual machine, but other required services such as the display protocol are still starting. * AGENT_ERR_DISABLED: The Horizon Agent is disabled. * AGENT_ERR_INVALID_IP: The Horizon Agent has an invalid IP. * AGENT_ERR_NEED_REBOOT: The Horizon Agent needs reboot. * AGENT_ERR_PROTOCOL_FAILURE: Protocol such as RDP or PCoIP is not enabled. * AGENT_ERR_DOMAIN_FAILURE: The RDS Server has an invalid domain. * AGENT_DRAIN_MODE: The RDS Server is configured for drain mode. * AGENT_DRAIN_UNTIL_RESTART: The RDS Server is configured a mode to drain until restart. * ALREADY_USED: The RDS Server cannot accept new sessions. * IN_PROGRESS: There is a RDS Server operation in progress. * VALIDATING: The connection server is synchronizing state information with the agent. * UNKNOWN: Could not determine the state of the RDS Server. (required).</param>
        public RDSServerMonitorDetails(string agentBuild = default(string), string agentVersion = default(string), int? maxSessionsCountConfigured = default(int?), OperatingSystemEnum operatingSystem = default(OperatingSystemEnum), StateEnum state = default(StateEnum))
        {
            // to ensure "agentBuild" is required (not null)
            if (agentBuild == null)
            {
                throw new InvalidDataException("agentBuild is a required property for RDSServerMonitorDetails and cannot be null");
            }
            else
            {
                this.AgentBuild = agentBuild;
            }
            // to ensure "agentVersion" is required (not null)
            if (agentVersion == null)
            {
                throw new InvalidDataException("agentVersion is a required property for RDSServerMonitorDetails and cannot be null");
            }
            else
            {
                this.AgentVersion = agentVersion;
            }
            // to ensure "operatingSystem" is required (not null)
            if (operatingSystem == null)
            {
                throw new InvalidDataException("operatingSystem is a required property for RDSServerMonitorDetails and cannot be null");
            }
            else
            {
                this.OperatingSystem = operatingSystem;
            }
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for RDSServerMonitorDetails and cannot be null");
            }
            else
            {
                this.State = state;
            }
            this.MaxSessionsCountConfigured = maxSessionsCountConfigured;
        }
        
        /// <summary>
        /// Agent build number.
        /// </summary>
        /// <value>Agent build number.</value>
        [DataMember(Name="agent_build", EmitDefaultValue=false)]
        public string AgentBuild { get; set; }

        /// <summary>
        /// Agent version.
        /// </summary>
        /// <value>Agent version.</value>
        [DataMember(Name="agent_version", EmitDefaultValue=false)]
        public string AgentVersion { get; set; }

        /// <summary>
        /// Maximum number of sessions for RDS server as configured by administrator. Will be unset if the value is not configured.
        /// </summary>
        /// <value>Maximum number of sessions for RDS server as configured by administrator. Will be unset if the value is not configured.</value>
        [DataMember(Name="max_sessions_count_configured", EmitDefaultValue=false)]
        public int? MaxSessionsCountConfigured { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RDSServerMonitorDetails {\n");
            sb.Append("  AgentBuild: ").Append(AgentBuild).Append("\n");
            sb.Append("  AgentVersion: ").Append(AgentVersion).Append("\n");
            sb.Append("  MaxSessionsCountConfigured: ").Append(MaxSessionsCountConfigured).Append("\n");
            sb.Append("  OperatingSystem: ").Append(OperatingSystem).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RDSServerMonitorDetails);
        }

        /// <summary>
        /// Returns true if RDSServerMonitorDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of RDSServerMonitorDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RDSServerMonitorDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AgentBuild == input.AgentBuild ||
                    (this.AgentBuild != null &&
                    this.AgentBuild.Equals(input.AgentBuild))
                ) && 
                (
                    this.AgentVersion == input.AgentVersion ||
                    (this.AgentVersion != null &&
                    this.AgentVersion.Equals(input.AgentVersion))
                ) && 
                (
                    this.MaxSessionsCountConfigured == input.MaxSessionsCountConfigured ||
                    (this.MaxSessionsCountConfigured != null &&
                    this.MaxSessionsCountConfigured.Equals(input.MaxSessionsCountConfigured))
                ) && 
                (
                    this.OperatingSystem == input.OperatingSystem ||
                    (this.OperatingSystem != null &&
                    this.OperatingSystem.Equals(input.OperatingSystem))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgentBuild != null)
                    hashCode = hashCode * 59 + this.AgentBuild.GetHashCode();
                if (this.AgentVersion != null)
                    hashCode = hashCode * 59 + this.AgentVersion.GetHashCode();
                if (this.MaxSessionsCountConfigured != null)
                    hashCode = hashCode * 59 + this.MaxSessionsCountConfigured.GetHashCode();
                if (this.OperatingSystem != null)
                    hashCode = hashCode * 59 + this.OperatingSystem.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
