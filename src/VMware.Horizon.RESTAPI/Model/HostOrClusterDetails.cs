/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Details of the host or cluster.
    /// </summary>
    [DataContract]
    public partial class HostOrClusterDetails :  IEquatable<HostOrClusterDetails>, IValidatableObject
    {
        /// <summary>
        /// Defines IncompatibleReasons
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IncompatibleReasonsEnum
        {
            
            /// <summary>
            /// Enum UNSUPPORTEDESXVERSION for value: UNSUPPORTED_ESX_VERSION
            /// </summary>
            [EnumMember(Value = "UNSUPPORTED_ESX_VERSION")]
            UNSUPPORTEDESXVERSION = 1,
            
            /// <summary>
            /// Enum ALLHOSTSDISCONNECTED for value: ALL_HOSTS_DISCONNECTED
            /// </summary>
            [EnumMember(Value = "ALL_HOSTS_DISCONNECTED")]
            ALLHOSTSDISCONNECTED = 2,
            
            /// <summary>
            /// Enum NOHOSTSINCLUSTER for value: NO_HOSTS_IN_CLUSTER
            /// </summary>
            [EnumMember(Value = "NO_HOSTS_IN_CLUSTER")]
            NOHOSTSINCLUSTER = 3,
            
            /// <summary>
            /// Enum INCOMPATIBLEVSAN for value: INCOMPATIBLE_VSAN
            /// </summary>
            [EnumMember(Value = "INCOMPATIBLE_VSAN")]
            INCOMPATIBLEVSAN = 4,
            
            /// <summary>
            /// Enum INCOMPATIBLESTORAGEACCELERATOR for value: INCOMPATIBLE_STORAGE_ACCELERATOR
            /// </summary>
            [EnumMember(Value = "INCOMPATIBLE_STORAGE_ACCELERATOR")]
            INCOMPATIBLESTORAGEACCELERATOR = 5,
            
            /// <summary>
            /// Enum INCOMPATIBLENATIVESNAPSHOTS for value: INCOMPATIBLE_NATIVE_SNAPSHOTS
            /// </summary>
            [EnumMember(Value = "INCOMPATIBLE_NATIVE_SNAPSHOTS")]
            INCOMPATIBLENATIVESNAPSHOTS = 6,
            
            /// <summary>
            /// Enum INCOMPATIBLEINSTANTCLONEDESKTOPPOOLS for value: INCOMPATIBLE_INSTANT_CLONE_DESKTOP_POOLS
            /// </summary>
            [EnumMember(Value = "INCOMPATIBLE_INSTANT_CLONE_DESKTOP_POOLS")]
            INCOMPATIBLEINSTANTCLONEDESKTOPPOOLS = 7,
            
            /// <summary>
            /// Enum INCOMPATIBLESTANDALONEHOSTFORINSTANTCLONE for value: INCOMPATIBLE_STANDALONE_HOST_FOR_INSTANT_CLONE
            /// </summary>
            [EnumMember(Value = "INCOMPATIBLE_STANDALONE_HOST_FOR_INSTANT_CLONE")]
            INCOMPATIBLESTANDALONEHOSTFORINSTANTCLONE = 8,
            
            /// <summary>
            /// Enum INCOMPATIBLEVGPUTYPE for value: INCOMPATIBLE_VGPU_TYPE
            /// </summary>
            [EnumMember(Value = "INCOMPATIBLE_VGPU_TYPE")]
            INCOMPATIBLEVGPUTYPE = 9
        }


        /// <summary>
        /// Reasons that may preclude this Host Or Cluster from being used in desktop pool creation.
        /// </summary>
        /// <value>Reasons that may preclude this Host Or Cluster from being used in desktop pool creation.</value>
        [DataMember(Name="incompatible_reasons", EmitDefaultValue=false)]
        public List<IncompatibleReasonsEnum> IncompatibleReasons { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HostOrClusterDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HostOrClusterDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HostOrClusterDetails" /> class.
        /// </summary>
        /// <param name="cluster">Whether or not this is a cluster or a host. (required).</param>
        /// <param name="datacenterId">Datacenter id for this host or cluster. (required).</param>
        /// <param name="incompatibleReasons">Reasons that may preclude this Host Or Cluster from being used in desktop pool creation. (required).</param>
        /// <param name="name">Host or cluster display name. (required).</param>
        /// <param name="path">Host or cluster path. (required).</param>
        /// <param name="vcenterId">Virtual Center id for this host or cluster. (required).</param>
        /// <param name="vgpuTypes">Types of NVIDIA GRID vGPUs supported by this host or at least one host on this cluster. If unset, this host or cluster does not support NVIDIA GRID vGPUs and cannot be used for desktop creation with NVIDIA GRID vGPU support enabled..</param>
        public HostOrClusterDetails(bool? cluster = default(bool?), string datacenterId = default(string), List<IncompatibleReasonsEnum> incompatibleReasons = default(List<IncompatibleReasonsEnum>), string name = default(string), string path = default(string), string vcenterId = default(string), List<string> vgpuTypes = default(List<string>))
        {
            // to ensure "cluster" is required (not null)
            if (cluster == null)
            {
                throw new InvalidDataException("cluster is a required property for HostOrClusterDetails and cannot be null");
            }
            else
            {
                this.Cluster = cluster;
            }
            // to ensure "datacenterId" is required (not null)
            if (datacenterId == null)
            {
                throw new InvalidDataException("datacenterId is a required property for HostOrClusterDetails and cannot be null");
            }
            else
            {
                this.DatacenterId = datacenterId;
            }
            // to ensure "incompatibleReasons" is required (not null)
            if (incompatibleReasons == null)
            {
                throw new InvalidDataException("incompatibleReasons is a required property for HostOrClusterDetails and cannot be null");
            }
            else
            {
                this.IncompatibleReasons = incompatibleReasons;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for HostOrClusterDetails and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new InvalidDataException("path is a required property for HostOrClusterDetails and cannot be null");
            }
            else
            {
                this.Path = path;
            }
            // to ensure "vcenterId" is required (not null)
            if (vcenterId == null)
            {
                throw new InvalidDataException("vcenterId is a required property for HostOrClusterDetails and cannot be null");
            }
            else
            {
                this.VcenterId = vcenterId;
            }
            this.VgpuTypes = vgpuTypes;
        }
        
        /// <summary>
        /// Whether or not this is a cluster or a host.
        /// </summary>
        /// <value>Whether or not this is a cluster or a host.</value>
        [DataMember(Name="cluster", EmitDefaultValue=false)]
        public bool? Cluster { get; set; }

        /// <summary>
        /// Datacenter id for this host or cluster.
        /// </summary>
        /// <value>Datacenter id for this host or cluster.</value>
        [DataMember(Name="datacenter_id", EmitDefaultValue=false)]
        public string DatacenterId { get; set; }


        /// <summary>
        /// Host or cluster display name.
        /// </summary>
        /// <value>Host or cluster display name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Host or cluster path.
        /// </summary>
        /// <value>Host or cluster path.</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Virtual Center id for this host or cluster.
        /// </summary>
        /// <value>Virtual Center id for this host or cluster.</value>
        [DataMember(Name="vcenter_id", EmitDefaultValue=false)]
        public string VcenterId { get; set; }

        /// <summary>
        /// Types of NVIDIA GRID vGPUs supported by this host or at least one host on this cluster. If unset, this host or cluster does not support NVIDIA GRID vGPUs and cannot be used for desktop creation with NVIDIA GRID vGPU support enabled.
        /// </summary>
        /// <value>Types of NVIDIA GRID vGPUs supported by this host or at least one host on this cluster. If unset, this host or cluster does not support NVIDIA GRID vGPUs and cannot be used for desktop creation with NVIDIA GRID vGPU support enabled.</value>
        [DataMember(Name="vgpu_types", EmitDefaultValue=false)]
        public List<string> VgpuTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HostOrClusterDetails {\n");
            sb.Append("  Cluster: ").Append(Cluster).Append("\n");
            sb.Append("  DatacenterId: ").Append(DatacenterId).Append("\n");
            sb.Append("  IncompatibleReasons: ").Append(IncompatibleReasons).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  VcenterId: ").Append(VcenterId).Append("\n");
            sb.Append("  VgpuTypes: ").Append(VgpuTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HostOrClusterDetails);
        }

        /// <summary>
        /// Returns true if HostOrClusterDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of HostOrClusterDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostOrClusterDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cluster == input.Cluster ||
                    (this.Cluster != null &&
                    this.Cluster.Equals(input.Cluster))
                ) && 
                (
                    this.DatacenterId == input.DatacenterId ||
                    (this.DatacenterId != null &&
                    this.DatacenterId.Equals(input.DatacenterId))
                ) && 
                (
                    this.IncompatibleReasons == input.IncompatibleReasons ||
                    this.IncompatibleReasons != null &&
                    this.IncompatibleReasons.SequenceEqual(input.IncompatibleReasons)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.VcenterId == input.VcenterId ||
                    (this.VcenterId != null &&
                    this.VcenterId.Equals(input.VcenterId))
                ) && 
                (
                    this.VgpuTypes == input.VgpuTypes ||
                    this.VgpuTypes != null &&
                    this.VgpuTypes.SequenceEqual(input.VgpuTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cluster != null)
                    hashCode = hashCode * 59 + this.Cluster.GetHashCode();
                if (this.DatacenterId != null)
                    hashCode = hashCode * 59 + this.DatacenterId.GetHashCode();
                if (this.IncompatibleReasons != null)
                    hashCode = hashCode * 59 + this.IncompatibleReasons.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.VcenterId != null)
                    hashCode = hashCode * 59 + this.VcenterId.GetHashCode();
                if (this.VgpuTypes != null)
                    hashCode = hashCode * 59 + this.VgpuTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
