/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information about the AD Domain connection from connection server.
    /// </summary>
    [DataContract]
    public partial class ADDomainMonitorConnectionServerV2 :  IEquatable<ADDomainMonitorConnectionServerV2>, IValidatableObject
    {
        /// <summary>
        /// Status of the connection to the domain. * UNCONTACTABLE: No domain controllers appear to be present on the network for this domain. * FULLY_ACCESSIBLE: The domain controller(s) are accepting bind operations. * CANNOT_BIND: The domain controller(s) are only accepting LDAP ping operations. * UNKNOWN: Cannot determine accessibility.
        /// </summary>
        /// <value>Status of the connection to the domain. * UNCONTACTABLE: No domain controllers appear to be present on the network for this domain. * FULLY_ACCESSIBLE: The domain controller(s) are accepting bind operations. * CANNOT_BIND: The domain controller(s) are only accepting LDAP ping operations. * UNKNOWN: Cannot determine accessibility.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum UNCONTACTABLE for value: UNCONTACTABLE
            /// </summary>
            [EnumMember(Value = "UNCONTACTABLE")]
            UNCONTACTABLE = 1,
            
            /// <summary>
            /// Enum FULLYACCESSIBLE for value: FULLY_ACCESSIBLE
            /// </summary>
            [EnumMember(Value = "FULLY_ACCESSIBLE")]
            FULLYACCESSIBLE = 2,
            
            /// <summary>
            /// Enum CANNOTBIND for value: CANNOT_BIND
            /// </summary>
            [EnumMember(Value = "CANNOT_BIND")]
            CANNOTBIND = 3,
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 4
        }

        /// <summary>
        /// Status of the connection to the domain. * UNCONTACTABLE: No domain controllers appear to be present on the network for this domain. * FULLY_ACCESSIBLE: The domain controller(s) are accepting bind operations. * CANNOT_BIND: The domain controller(s) are only accepting LDAP ping operations. * UNKNOWN: Cannot determine accessibility.
        /// </summary>
        /// <value>Status of the connection to the domain. * UNCONTACTABLE: No domain controllers appear to be present on the network for this domain. * FULLY_ACCESSIBLE: The domain controller(s) are accepting bind operations. * CANNOT_BIND: The domain controller(s) are only accepting LDAP ping operations. * UNKNOWN: Cannot determine accessibility.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// The trust relationship for the domain. * PRIMARY_DOMAIN: The domain is the domain that the broker is present in. * FROM_BROKER: The domain is trusted by the domain that the broker is in. * TO_BROKER: The domain trusts the broker&#39;s domain (this is for completeness and generally will not be used). * TWO_WAY: The domain has a two way trust relationship with the broker&#39;s domain. * TWO_WAY_FOREST: The domain is in the same forest as the broker&#39;s domain, implies two way trust. * MANUAL: The domain was manually configured (the trust has not been detected). * UNKNOWN: The trust relationship could not be determined.
        /// </summary>
        /// <value>The trust relationship for the domain. * PRIMARY_DOMAIN: The domain is the domain that the broker is present in. * FROM_BROKER: The domain is trusted by the domain that the broker is in. * TO_BROKER: The domain trusts the broker&#39;s domain (this is for completeness and generally will not be used). * TWO_WAY: The domain has a two way trust relationship with the broker&#39;s domain. * TWO_WAY_FOREST: The domain is in the same forest as the broker&#39;s domain, implies two way trust. * MANUAL: The domain was manually configured (the trust has not been detected). * UNKNOWN: The trust relationship could not be determined.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TrustRelationshipEnum
        {
            
            /// <summary>
            /// Enum PRIMARYDOMAIN for value: PRIMARY_DOMAIN
            /// </summary>
            [EnumMember(Value = "PRIMARY_DOMAIN")]
            PRIMARYDOMAIN = 1,
            
            /// <summary>
            /// Enum FROMBROKER for value: FROM_BROKER
            /// </summary>
            [EnumMember(Value = "FROM_BROKER")]
            FROMBROKER = 2,
            
            /// <summary>
            /// Enum TOBROKER for value: TO_BROKER
            /// </summary>
            [EnumMember(Value = "TO_BROKER")]
            TOBROKER = 3,
            
            /// <summary>
            /// Enum TWOWAY for value: TWO_WAY
            /// </summary>
            [EnumMember(Value = "TWO_WAY")]
            TWOWAY = 4,
            
            /// <summary>
            /// Enum TWOWAYFOREST for value: TWO_WAY_FOREST
            /// </summary>
            [EnumMember(Value = "TWO_WAY_FOREST")]
            TWOWAYFOREST = 5,
            
            /// <summary>
            /// Enum MANUAL for value: MANUAL
            /// </summary>
            [EnumMember(Value = "MANUAL")]
            MANUAL = 6,
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 7
        }

        /// <summary>
        /// The trust relationship for the domain. * PRIMARY_DOMAIN: The domain is the domain that the broker is present in. * FROM_BROKER: The domain is trusted by the domain that the broker is in. * TO_BROKER: The domain trusts the broker&#39;s domain (this is for completeness and generally will not be used). * TWO_WAY: The domain has a two way trust relationship with the broker&#39;s domain. * TWO_WAY_FOREST: The domain is in the same forest as the broker&#39;s domain, implies two way trust. * MANUAL: The domain was manually configured (the trust has not been detected). * UNKNOWN: The trust relationship could not be determined.
        /// </summary>
        /// <value>The trust relationship for the domain. * PRIMARY_DOMAIN: The domain is the domain that the broker is present in. * FROM_BROKER: The domain is trusted by the domain that the broker is in. * TO_BROKER: The domain trusts the broker&#39;s domain (this is for completeness and generally will not be used). * TWO_WAY: The domain has a two way trust relationship with the broker&#39;s domain. * TWO_WAY_FOREST: The domain is in the same forest as the broker&#39;s domain, implies two way trust. * MANUAL: The domain was manually configured (the trust has not been detected). * UNKNOWN: The trust relationship could not be determined.</value>
        [DataMember(Name="trust_relationship", EmitDefaultValue=false)]
        public TrustRelationshipEnum TrustRelationship { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ADDomainMonitorConnectionServerV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ADDomainMonitorConnectionServerV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ADDomainMonitorConnectionServerV2" /> class.
        /// </summary>
        /// <param name="id">Unique ID of the connection server. (required).</param>
        /// <param name="lastUpdatedTimestamp">The timestamp in milliseconds when the last update was obtained. Measured as epoch time..</param>
        /// <param name="name">Connection server host name or IP address. (required).</param>
        /// <param name="status">Status of the connection to the domain. * UNCONTACTABLE: No domain controllers appear to be present on the network for this domain. * FULLY_ACCESSIBLE: The domain controller(s) are accepting bind operations. * CANNOT_BIND: The domain controller(s) are only accepting LDAP ping operations. * UNKNOWN: Cannot determine accessibility. (required).</param>
        /// <param name="trustRelationship">The trust relationship for the domain. * PRIMARY_DOMAIN: The domain is the domain that the broker is present in. * FROM_BROKER: The domain is trusted by the domain that the broker is in. * TO_BROKER: The domain trusts the broker&#39;s domain (this is for completeness and generally will not be used). * TWO_WAY: The domain has a two way trust relationship with the broker&#39;s domain. * TWO_WAY_FOREST: The domain is in the same forest as the broker&#39;s domain, implies two way trust. * MANUAL: The domain was manually configured (the trust has not been detected). * UNKNOWN: The trust relationship could not be determined. (required).</param>
        public ADDomainMonitorConnectionServerV2(string id = default(string), long? lastUpdatedTimestamp = default(long?), string name = default(string), StatusEnum status = default(StatusEnum), TrustRelationshipEnum trustRelationship = default(TrustRelationshipEnum))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ADDomainMonitorConnectionServerV2 and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ADDomainMonitorConnectionServerV2 and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for ADDomainMonitorConnectionServerV2 and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "trustRelationship" is required (not null)
            if (trustRelationship == null)
            {
                throw new InvalidDataException("trustRelationship is a required property for ADDomainMonitorConnectionServerV2 and cannot be null");
            }
            else
            {
                this.TrustRelationship = trustRelationship;
            }
            this.LastUpdatedTimestamp = lastUpdatedTimestamp;
        }
        
        /// <summary>
        /// Unique ID of the connection server.
        /// </summary>
        /// <value>Unique ID of the connection server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The timestamp in milliseconds when the last update was obtained. Measured as epoch time.
        /// </summary>
        /// <value>The timestamp in milliseconds when the last update was obtained. Measured as epoch time.</value>
        [DataMember(Name="last_updated_timestamp", EmitDefaultValue=false)]
        public long? LastUpdatedTimestamp { get; set; }

        /// <summary>
        /// Connection server host name or IP address.
        /// </summary>
        /// <value>Connection server host name or IP address.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ADDomainMonitorConnectionServerV2 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastUpdatedTimestamp: ").Append(LastUpdatedTimestamp).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TrustRelationship: ").Append(TrustRelationship).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ADDomainMonitorConnectionServerV2);
        }

        /// <summary>
        /// Returns true if ADDomainMonitorConnectionServerV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of ADDomainMonitorConnectionServerV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ADDomainMonitorConnectionServerV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastUpdatedTimestamp == input.LastUpdatedTimestamp ||
                    (this.LastUpdatedTimestamp != null &&
                    this.LastUpdatedTimestamp.Equals(input.LastUpdatedTimestamp))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TrustRelationship == input.TrustRelationship ||
                    (this.TrustRelationship != null &&
                    this.TrustRelationship.Equals(input.TrustRelationship))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastUpdatedTimestamp != null)
                    hashCode = hashCode * 59 + this.LastUpdatedTimestamp.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TrustRelationship != null)
                    hashCode = hashCode * 59 + this.TrustRelationship.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
