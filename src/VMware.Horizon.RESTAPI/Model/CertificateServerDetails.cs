/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// CertificateServerDetails
    /// </summary>
    [DataContract]
    public partial class CertificateServerDetails :  IEquatable<CertificateServerDetails>, IValidatableObject
    {
        /// <summary>
        /// Certificate Server status. * OK: The state of the certificate server is OK as reported by the enrollment servers. * WARN: At least one enrollment server reports a warning on this certificate server. * ERROR: At least one enrollment server reports an error on this certificate server.
        /// </summary>
        /// <value>Certificate Server status. * OK: The state of the certificate server is OK as reported by the enrollment servers. * WARN: At least one enrollment server reports a warning on this certificate server. * ERROR: At least one enrollment server reports an error on this certificate server.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum OK for value: OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OK = 1,
            
            /// <summary>
            /// Enum WARN for value: WARN
            /// </summary>
            [EnumMember(Value = "WARN")]
            WARN = 2,
            
            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 3
        }

        /// <summary>
        /// Certificate Server status. * OK: The state of the certificate server is OK as reported by the enrollment servers. * WARN: At least one enrollment server reports a warning on this certificate server. * ERROR: At least one enrollment server reports an error on this certificate server.
        /// </summary>
        /// <value>Certificate Server status. * OK: The state of the certificate server is OK as reported by the enrollment servers. * WARN: At least one enrollment server reports a warning on this certificate server. * ERROR: At least one enrollment server reports an error on this certificate server.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateServerDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CertificateServerDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateServerDetails" /> class.
        /// </summary>
        /// <param name="name">Certificate Server name. (required).</param>
        /// <param name="status">Certificate Server status. * OK: The state of the certificate server is OK as reported by the enrollment servers. * WARN: At least one enrollment server reports a warning on this certificate server. * ERROR: At least one enrollment server reports an error on this certificate server. (required).</param>
        public CertificateServerDetails(string name = default(string), StatusEnum status = default(StatusEnum))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CertificateServerDetails and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for CertificateServerDetails and cannot be null");
            }
            else
            {
                this.Status = status;
            }
        }
        
        /// <summary>
        /// Certificate Server name.
        /// </summary>
        /// <value>Certificate Server name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificateServerDetails {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificateServerDetails);
        }

        /// <summary>
        /// Returns true if CertificateServerDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificateServerDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateServerDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
