/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Network interface card settings for machines provisioned for this desktop pool.
    /// </summary>
    [DataContract]
    public partial class DesktopPoolNetworkInterfaceCardSettings :  IEquatable<DesktopPoolNetworkInterfaceCardSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DesktopPoolNetworkInterfaceCardSettings" /> class.
        /// </summary>
        /// <param name="networkInterfaceCardId">The network interface card id for these settings..</param>
        /// <param name="networkInterfaceCardName">The network interface card name..</param>
        /// <param name="networkLabelAssignmentSpecs">Automatic network label assignment feature settings for this NIC. By default, newly provisioned machines of an automated desktop pool retain their parent image&#39;s network labels on each of their network interface cards. In certain circumstances, notably dealing with VLAN subset sizing and DHCP IP address availability, it may be desirable for the desktop pool to instead use different network labels for these newly provisioned machines. This feature allows an administrator to provide a per NIC list of network labels and their maximum availability to be automatically distributed to newly provisioned machines. &lt;br&gt; If this is unset, the feature is disabled.&lt;br&gt; Starting at the alphabetically first network label specification in the list that has not yet been assigned its maximum count for this NIC on this desktop pool, the desktop pool will have its next provisioned machine&#39;s NIC assigned that label. If all network labels in this list have reached their maximum count, this desktop pool will have further provisioned machines assigned the last label in the list over capacity, and an error will be logged. Not all labels need be configured. &lt;br&gt;.</param>
        public DesktopPoolNetworkInterfaceCardSettings(string networkInterfaceCardId = default(string), string networkInterfaceCardName = default(string), List<NetworkLabelAssignmentSettings> networkLabelAssignmentSpecs = default(List<NetworkLabelAssignmentSettings>))
        {
            this.NetworkInterfaceCardId = networkInterfaceCardId;
            this.NetworkInterfaceCardName = networkInterfaceCardName;
            this.NetworkLabelAssignmentSpecs = networkLabelAssignmentSpecs;
        }
        
        /// <summary>
        /// The network interface card id for these settings.
        /// </summary>
        /// <value>The network interface card id for these settings.</value>
        [DataMember(Name="network_interface_card_id", EmitDefaultValue=false)]
        public string NetworkInterfaceCardId { get; set; }

        /// <summary>
        /// The network interface card name.
        /// </summary>
        /// <value>The network interface card name.</value>
        [DataMember(Name="network_interface_card_name", EmitDefaultValue=false)]
        public string NetworkInterfaceCardName { get; set; }

        /// <summary>
        /// Automatic network label assignment feature settings for this NIC. By default, newly provisioned machines of an automated desktop pool retain their parent image&#39;s network labels on each of their network interface cards. In certain circumstances, notably dealing with VLAN subset sizing and DHCP IP address availability, it may be desirable for the desktop pool to instead use different network labels for these newly provisioned machines. This feature allows an administrator to provide a per NIC list of network labels and their maximum availability to be automatically distributed to newly provisioned machines. &lt;br&gt; If this is unset, the feature is disabled.&lt;br&gt; Starting at the alphabetically first network label specification in the list that has not yet been assigned its maximum count for this NIC on this desktop pool, the desktop pool will have its next provisioned machine&#39;s NIC assigned that label. If all network labels in this list have reached their maximum count, this desktop pool will have further provisioned machines assigned the last label in the list over capacity, and an error will be logged. Not all labels need be configured. &lt;br&gt;
        /// </summary>
        /// <value>Automatic network label assignment feature settings for this NIC. By default, newly provisioned machines of an automated desktop pool retain their parent image&#39;s network labels on each of their network interface cards. In certain circumstances, notably dealing with VLAN subset sizing and DHCP IP address availability, it may be desirable for the desktop pool to instead use different network labels for these newly provisioned machines. This feature allows an administrator to provide a per NIC list of network labels and their maximum availability to be automatically distributed to newly provisioned machines. &lt;br&gt; If this is unset, the feature is disabled.&lt;br&gt; Starting at the alphabetically first network label specification in the list that has not yet been assigned its maximum count for this NIC on this desktop pool, the desktop pool will have its next provisioned machine&#39;s NIC assigned that label. If all network labels in this list have reached their maximum count, this desktop pool will have further provisioned machines assigned the last label in the list over capacity, and an error will be logged. Not all labels need be configured. &lt;br&gt;</value>
        [DataMember(Name="network_label_assignment_specs", EmitDefaultValue=false)]
        public List<NetworkLabelAssignmentSettings> NetworkLabelAssignmentSpecs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DesktopPoolNetworkInterfaceCardSettings {\n");
            sb.Append("  NetworkInterfaceCardId: ").Append(NetworkInterfaceCardId).Append("\n");
            sb.Append("  NetworkInterfaceCardName: ").Append(NetworkInterfaceCardName).Append("\n");
            sb.Append("  NetworkLabelAssignmentSpecs: ").Append(NetworkLabelAssignmentSpecs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DesktopPoolNetworkInterfaceCardSettings);
        }

        /// <summary>
        /// Returns true if DesktopPoolNetworkInterfaceCardSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of DesktopPoolNetworkInterfaceCardSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DesktopPoolNetworkInterfaceCardSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NetworkInterfaceCardId == input.NetworkInterfaceCardId ||
                    (this.NetworkInterfaceCardId != null &&
                    this.NetworkInterfaceCardId.Equals(input.NetworkInterfaceCardId))
                ) && 
                (
                    this.NetworkInterfaceCardName == input.NetworkInterfaceCardName ||
                    (this.NetworkInterfaceCardName != null &&
                    this.NetworkInterfaceCardName.Equals(input.NetworkInterfaceCardName))
                ) && 
                (
                    this.NetworkLabelAssignmentSpecs == input.NetworkLabelAssignmentSpecs ||
                    this.NetworkLabelAssignmentSpecs != null &&
                    this.NetworkLabelAssignmentSpecs.SequenceEqual(input.NetworkLabelAssignmentSpecs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NetworkInterfaceCardId != null)
                    hashCode = hashCode * 59 + this.NetworkInterfaceCardId.GetHashCode();
                if (this.NetworkInterfaceCardName != null)
                    hashCode = hashCode * 59 + this.NetworkInterfaceCardName.GetHashCode();
                if (this.NetworkLabelAssignmentSpecs != null)
                    hashCode = hashCode * 59 + this.NetworkLabelAssignmentSpecs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
