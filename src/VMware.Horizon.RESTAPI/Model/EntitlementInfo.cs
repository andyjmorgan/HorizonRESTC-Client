/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Entitlement Information related to the resource.&lt;br&gt;List API returning this summary information can use search filter queryto filter on specific fields supported by filters.&lt;br&gt;Supported Filters : &#39;Equals&#39;.&lt;br&gt;See the field description to know the filter types it supports.
    /// </summary>
    [DataContract]
    public partial class EntitlementInfo :  IEquatable<EntitlementInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntitlementInfo" /> class.
        /// </summary>
        /// <param name="adUserOrGroupIds">List of ad-user-or-group SIDs which are entitled to the given resource..</param>
        /// <param name="id">Unique ID representing the resource.&lt;br&gt;Supported Filters : &#39;Equals&#39;..</param>
        public EntitlementInfo(List<string> adUserOrGroupIds = default(List<string>), string id = default(string))
        {
            this.AdUserOrGroupIds = adUserOrGroupIds;
            this.Id = id;
        }
        
        /// <summary>
        /// List of ad-user-or-group SIDs which are entitled to the given resource.
        /// </summary>
        /// <value>List of ad-user-or-group SIDs which are entitled to the given resource.</value>
        [DataMember(Name="ad_user_or_group_ids", EmitDefaultValue=false)]
        public List<string> AdUserOrGroupIds { get; set; }

        /// <summary>
        /// Unique ID representing the resource.&lt;br&gt;Supported Filters : &#39;Equals&#39;.
        /// </summary>
        /// <value>Unique ID representing the resource.&lt;br&gt;Supported Filters : &#39;Equals&#39;.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntitlementInfo {\n");
            sb.Append("  AdUserOrGroupIds: ").Append(AdUserOrGroupIds).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntitlementInfo);
        }

        /// <summary>
        /// Returns true if EntitlementInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of EntitlementInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntitlementInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdUserOrGroupIds == input.AdUserOrGroupIds ||
                    this.AdUserOrGroupIds != null &&
                    this.AdUserOrGroupIds.SequenceEqual(input.AdUserOrGroupIds)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdUserOrGroupIds != null)
                    hashCode = hashCode * 59 + this.AdUserOrGroupIds.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
