/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to Session.
    /// </summary>
    [DataContract]
    public partial class SessionInfo :  IEquatable<SessionInfo>, IValidatableObject
    {
        /// <summary>
        /// Protocol for the session.  It will be unset for disconnected sessions. * PCOIP: Display protocol is PCoIP. * RDP: Display protocol is RDP. * BLAST: Display protocol is BLAST. * CONSOLE: Display protocol is console. * UNKNOWN: Display protocol is unknown.
        /// </summary>
        /// <value>Protocol for the session.  It will be unset for disconnected sessions. * PCOIP: Display protocol is PCoIP. * RDP: Display protocol is RDP. * BLAST: Display protocol is BLAST. * CONSOLE: Display protocol is console. * UNKNOWN: Display protocol is unknown.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SessionProtocolEnum
        {
            
            /// <summary>
            /// Enum PCOIP for value: PCOIP
            /// </summary>
            [EnumMember(Value = "PCOIP")]
            PCOIP = 1,
            
            /// <summary>
            /// Enum RDP for value: RDP
            /// </summary>
            [EnumMember(Value = "RDP")]
            RDP = 2,
            
            /// <summary>
            /// Enum BLAST for value: BLAST
            /// </summary>
            [EnumMember(Value = "BLAST")]
            BLAST = 3,
            
            /// <summary>
            /// Enum CONSOLE for value: CONSOLE
            /// </summary>
            [EnumMember(Value = "CONSOLE")]
            CONSOLE = 4,
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 5
        }

        /// <summary>
        /// Protocol for the session.  It will be unset for disconnected sessions. * PCOIP: Display protocol is PCoIP. * RDP: Display protocol is RDP. * BLAST: Display protocol is BLAST. * CONSOLE: Display protocol is console. * UNKNOWN: Display protocol is unknown.
        /// </summary>
        /// <value>Protocol for the session.  It will be unset for disconnected sessions. * PCOIP: Display protocol is PCoIP. * RDP: Display protocol is RDP. * BLAST: Display protocol is BLAST. * CONSOLE: Display protocol is console. * UNKNOWN: Display protocol is unknown.</value>
        [DataMember(Name="session_protocol", EmitDefaultValue=false)]
        public SessionProtocolEnum? SessionProtocol { get; set; }
        /// <summary>
        /// State of session. * CONNECTED: Session is connected * DISCONNECTED: Session is disconnected * PENDING: Session is pending
        /// </summary>
        /// <value>State of session. * CONNECTED: Session is connected * DISCONNECTED: Session is disconnected * PENDING: Session is pending</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SessionStateEnum
        {
            
            /// <summary>
            /// Enum CONNECTED for value: CONNECTED
            /// </summary>
            [EnumMember(Value = "CONNECTED")]
            CONNECTED = 1,
            
            /// <summary>
            /// Enum DISCONNECTED for value: DISCONNECTED
            /// </summary>
            [EnumMember(Value = "DISCONNECTED")]
            DISCONNECTED = 2,
            
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 3
        }

        /// <summary>
        /// State of session. * CONNECTED: Session is connected * DISCONNECTED: Session is disconnected * PENDING: Session is pending
        /// </summary>
        /// <value>State of session. * CONNECTED: Session is connected * DISCONNECTED: Session is disconnected * PENDING: Session is pending</value>
        [DataMember(Name="session_state", EmitDefaultValue=false)]
        public SessionStateEnum? SessionState { get; set; }
        /// <summary>
        /// Type of session. * DESKTOP: Desktop or RDS desktop session. * APPLICATION: Application session.
        /// </summary>
        /// <value>Type of session. * DESKTOP: Desktop or RDS desktop session. * APPLICATION: Application session.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SessionTypeEnum
        {
            
            /// <summary>
            /// Enum DESKTOP for value: DESKTOP
            /// </summary>
            [EnumMember(Value = "DESKTOP")]
            DESKTOP = 1,
            
            /// <summary>
            /// Enum APPLICATION for value: APPLICATION
            /// </summary>
            [EnumMember(Value = "APPLICATION")]
            APPLICATION = 2
        }

        /// <summary>
        /// Type of session. * DESKTOP: Desktop or RDS desktop session. * APPLICATION: Application session.
        /// </summary>
        /// <value>Type of session. * DESKTOP: Desktop or RDS desktop session. * APPLICATION: Application session.</value>
        [DataMember(Name="session_type", EmitDefaultValue=false)]
        public SessionTypeEnum? SessionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionInfo" /> class.
        /// </summary>
        /// <param name="accessGroupId">Access group id associated with the session.  For a non-RDS desktop session, this is the desktop pool&#39;s access group id.  For an RDS desktop session, this is the RDS desktop pool&#39;s farm&#39;s access group id.  For an application session, this is the application&#39;s farm&#39;s access group id..</param>
        /// <param name="agentVersion">Version of agent This property need not be set..</param>
        /// <param name="applicationNames">Names of the applications launched in the session.  It will be only set when session_type is APPLICATION..</param>
        /// <param name="brokerUserId">User SID for the broker user associated with the session.  It will be unset for non-broker sessions..</param>
        /// <param name="brokeredRemotely">Indicates whether the session is brokered from a remote pod.  It is set only if the Horizon View agent where the session resides is version 6.0 or later..</param>
        /// <param name="clientData">Client data associated with the session..</param>
        /// <param name="desktopPoolId">Unique desktop pool id for the session.  This is unset if the session is not brokered through a desktop, such as for direct console access..</param>
        /// <param name="disconnectedTime">Epoch time in milli seconds, when the session was last disconnected.  This will be unset if the session&#39;s machine has an error state, or if the session has never been disconnected..</param>
        /// <param name="farmId">Unique farm id for this RDS desktop or application session. This is unset if the session is not brokered through a farm, such as for application sessions or direct console access..</param>
        /// <param name="id">Unique id representing a session..</param>
        /// <param name="idleDuration">Idle time duration in minutes, indicating how long the end user of the session has been idle for. This property need not be set..</param>
        /// <param name="lastSessionDurationMs">Duration of the last connection period of the session in milli seconds. If the session is currently connected, this is the duration that the session has been in connected state. If the session is currently disconnected, this is the duration of its previous connection period. This will be unset on error..</param>
        /// <param name="machineId">Unique machine id for the session.  This is unset for RDS Desktop or application sessions. If desktop pool id is unset, it is the id of registered un-managed physical machine..</param>
        /// <param name="rdsServerId">Unique RDS server id for the RDS desktop or application session. This property need not be set..</param>
        /// <param name="resourcedRemotely">Indicates whether the session is running on remote pod resource..</param>
        /// <param name="securityGatewayData">Security gateway data associated with the session..</param>
        /// <param name="sessionProtocol">Protocol for the session.  It will be unset for disconnected sessions. * PCOIP: Display protocol is PCoIP. * RDP: Display protocol is RDP. * BLAST: Display protocol is BLAST. * CONSOLE: Display protocol is console. * UNKNOWN: Display protocol is unknown..</param>
        /// <param name="sessionState">State of session. * CONNECTED: Session is connected * DISCONNECTED: Session is disconnected * PENDING: Session is pending.</param>
        /// <param name="sessionType">Type of session. * DESKTOP: Desktop or RDS desktop session. * APPLICATION: Application session..</param>
        /// <param name="startTime">Epoch time in milli seconds, when the session was originally logged in.  The lifecycle of a session begins at login and ends at logout, with any number of connect and disconnect occurrences in between. The first connection time will be shortly after this time.  This property need not be set..</param>
        /// <param name="unauthenticated">Indicates whether the session is of unauthenticated access user.  This property need not be set..</param>
        /// <param name="userId">Unique SID of the user logged into the session.  It may not match the broker user id for non-SSO scenarios..</param>
        public SessionInfo(string accessGroupId = default(string), string agentVersion = default(string), List<string> applicationNames = default(List<string>), string brokerUserId = default(string), bool? brokeredRemotely = default(bool?), ClientData clientData = default(ClientData), string desktopPoolId = default(string), long? disconnectedTime = default(long?), string farmId = default(string), string id = default(string), long? idleDuration = default(long?), long? lastSessionDurationMs = default(long?), string machineId = default(string), string rdsServerId = default(string), bool? resourcedRemotely = default(bool?), SecurityGatewayData securityGatewayData = default(SecurityGatewayData), SessionProtocolEnum? sessionProtocol = default(SessionProtocolEnum?), SessionStateEnum? sessionState = default(SessionStateEnum?), SessionTypeEnum? sessionType = default(SessionTypeEnum?), long? startTime = default(long?), bool? unauthenticated = default(bool?), string userId = default(string))
        {
            this.AccessGroupId = accessGroupId;
            this.AgentVersion = agentVersion;
            this.ApplicationNames = applicationNames;
            this.BrokerUserId = brokerUserId;
            this.BrokeredRemotely = brokeredRemotely;
            this.ClientData = clientData;
            this.DesktopPoolId = desktopPoolId;
            this.DisconnectedTime = disconnectedTime;
            this.FarmId = farmId;
            this.Id = id;
            this.IdleDuration = idleDuration;
            this.LastSessionDurationMs = lastSessionDurationMs;
            this.MachineId = machineId;
            this.RdsServerId = rdsServerId;
            this.ResourcedRemotely = resourcedRemotely;
            this.SecurityGatewayData = securityGatewayData;
            this.SessionProtocol = sessionProtocol;
            this.SessionState = sessionState;
            this.SessionType = sessionType;
            this.StartTime = startTime;
            this.Unauthenticated = unauthenticated;
            this.UserId = userId;
        }
        
        /// <summary>
        /// Access group id associated with the session.  For a non-RDS desktop session, this is the desktop pool&#39;s access group id.  For an RDS desktop session, this is the RDS desktop pool&#39;s farm&#39;s access group id.  For an application session, this is the application&#39;s farm&#39;s access group id.
        /// </summary>
        /// <value>Access group id associated with the session.  For a non-RDS desktop session, this is the desktop pool&#39;s access group id.  For an RDS desktop session, this is the RDS desktop pool&#39;s farm&#39;s access group id.  For an application session, this is the application&#39;s farm&#39;s access group id.</value>
        [DataMember(Name="access_group_id", EmitDefaultValue=false)]
        public string AccessGroupId { get; set; }

        /// <summary>
        /// Version of agent This property need not be set.
        /// </summary>
        /// <value>Version of agent This property need not be set.</value>
        [DataMember(Name="agent_version", EmitDefaultValue=false)]
        public string AgentVersion { get; set; }

        /// <summary>
        /// Names of the applications launched in the session.  It will be only set when session_type is APPLICATION.
        /// </summary>
        /// <value>Names of the applications launched in the session.  It will be only set when session_type is APPLICATION.</value>
        [DataMember(Name="application_names", EmitDefaultValue=false)]
        public List<string> ApplicationNames { get; set; }

        /// <summary>
        /// User SID for the broker user associated with the session.  It will be unset for non-broker sessions.
        /// </summary>
        /// <value>User SID for the broker user associated with the session.  It will be unset for non-broker sessions.</value>
        [DataMember(Name="broker_user_id", EmitDefaultValue=false)]
        public string BrokerUserId { get; set; }

        /// <summary>
        /// Indicates whether the session is brokered from a remote pod.  It is set only if the Horizon View agent where the session resides is version 6.0 or later.
        /// </summary>
        /// <value>Indicates whether the session is brokered from a remote pod.  It is set only if the Horizon View agent where the session resides is version 6.0 or later.</value>
        [DataMember(Name="brokered_remotely", EmitDefaultValue=false)]
        public bool? BrokeredRemotely { get; set; }

        /// <summary>
        /// Client data associated with the session.
        /// </summary>
        /// <value>Client data associated with the session.</value>
        [DataMember(Name="client_data", EmitDefaultValue=false)]
        public ClientData ClientData { get; set; }

        /// <summary>
        /// Unique desktop pool id for the session.  This is unset if the session is not brokered through a desktop, such as for direct console access.
        /// </summary>
        /// <value>Unique desktop pool id for the session.  This is unset if the session is not brokered through a desktop, such as for direct console access.</value>
        [DataMember(Name="desktop_pool_id", EmitDefaultValue=false)]
        public string DesktopPoolId { get; set; }

        /// <summary>
        /// Epoch time in milli seconds, when the session was last disconnected.  This will be unset if the session&#39;s machine has an error state, or if the session has never been disconnected.
        /// </summary>
        /// <value>Epoch time in milli seconds, when the session was last disconnected.  This will be unset if the session&#39;s machine has an error state, or if the session has never been disconnected.</value>
        [DataMember(Name="disconnected_time", EmitDefaultValue=false)]
        public long? DisconnectedTime { get; set; }

        /// <summary>
        /// Unique farm id for this RDS desktop or application session. This is unset if the session is not brokered through a farm, such as for application sessions or direct console access.
        /// </summary>
        /// <value>Unique farm id for this RDS desktop or application session. This is unset if the session is not brokered through a farm, such as for application sessions or direct console access.</value>
        [DataMember(Name="farm_id", EmitDefaultValue=false)]
        public string FarmId { get; set; }

        /// <summary>
        /// Unique id representing a session.
        /// </summary>
        /// <value>Unique id representing a session.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Idle time duration in minutes, indicating how long the end user of the session has been idle for. This property need not be set.
        /// </summary>
        /// <value>Idle time duration in minutes, indicating how long the end user of the session has been idle for. This property need not be set.</value>
        [DataMember(Name="idle_duration", EmitDefaultValue=false)]
        public long? IdleDuration { get; set; }

        /// <summary>
        /// Duration of the last connection period of the session in milli seconds. If the session is currently connected, this is the duration that the session has been in connected state. If the session is currently disconnected, this is the duration of its previous connection period. This will be unset on error.
        /// </summary>
        /// <value>Duration of the last connection period of the session in milli seconds. If the session is currently connected, this is the duration that the session has been in connected state. If the session is currently disconnected, this is the duration of its previous connection period. This will be unset on error.</value>
        [DataMember(Name="last_session_duration_ms", EmitDefaultValue=false)]
        public long? LastSessionDurationMs { get; set; }

        /// <summary>
        /// Unique machine id for the session.  This is unset for RDS Desktop or application sessions. If desktop pool id is unset, it is the id of registered un-managed physical machine.
        /// </summary>
        /// <value>Unique machine id for the session.  This is unset for RDS Desktop or application sessions. If desktop pool id is unset, it is the id of registered un-managed physical machine.</value>
        [DataMember(Name="machine_id", EmitDefaultValue=false)]
        public string MachineId { get; set; }

        /// <summary>
        /// Unique RDS server id for the RDS desktop or application session. This property need not be set.
        /// </summary>
        /// <value>Unique RDS server id for the RDS desktop or application session. This property need not be set.</value>
        [DataMember(Name="rds_server_id", EmitDefaultValue=false)]
        public string RdsServerId { get; set; }

        /// <summary>
        /// Indicates whether the session is running on remote pod resource.
        /// </summary>
        /// <value>Indicates whether the session is running on remote pod resource.</value>
        [DataMember(Name="resourced_remotely", EmitDefaultValue=false)]
        public bool? ResourcedRemotely { get; set; }

        /// <summary>
        /// Security gateway data associated with the session.
        /// </summary>
        /// <value>Security gateway data associated with the session.</value>
        [DataMember(Name="security_gateway_data", EmitDefaultValue=false)]
        public SecurityGatewayData SecurityGatewayData { get; set; }




        /// <summary>
        /// Epoch time in milli seconds, when the session was originally logged in.  The lifecycle of a session begins at login and ends at logout, with any number of connect and disconnect occurrences in between. The first connection time will be shortly after this time.  This property need not be set.
        /// </summary>
        /// <value>Epoch time in milli seconds, when the session was originally logged in.  The lifecycle of a session begins at login and ends at logout, with any number of connect and disconnect occurrences in between. The first connection time will be shortly after this time.  This property need not be set.</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public long? StartTime { get; set; }

        /// <summary>
        /// Indicates whether the session is of unauthenticated access user.  This property need not be set.
        /// </summary>
        /// <value>Indicates whether the session is of unauthenticated access user.  This property need not be set.</value>
        [DataMember(Name="unauthenticated", EmitDefaultValue=false)]
        public bool? Unauthenticated { get; set; }

        /// <summary>
        /// Unique SID of the user logged into the session.  It may not match the broker user id for non-SSO scenarios.
        /// </summary>
        /// <value>Unique SID of the user logged into the session.  It may not match the broker user id for non-SSO scenarios.</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionInfo {\n");
            sb.Append("  AccessGroupId: ").Append(AccessGroupId).Append("\n");
            sb.Append("  AgentVersion: ").Append(AgentVersion).Append("\n");
            sb.Append("  ApplicationNames: ").Append(ApplicationNames).Append("\n");
            sb.Append("  BrokerUserId: ").Append(BrokerUserId).Append("\n");
            sb.Append("  BrokeredRemotely: ").Append(BrokeredRemotely).Append("\n");
            sb.Append("  ClientData: ").Append(ClientData).Append("\n");
            sb.Append("  DesktopPoolId: ").Append(DesktopPoolId).Append("\n");
            sb.Append("  DisconnectedTime: ").Append(DisconnectedTime).Append("\n");
            sb.Append("  FarmId: ").Append(FarmId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdleDuration: ").Append(IdleDuration).Append("\n");
            sb.Append("  LastSessionDurationMs: ").Append(LastSessionDurationMs).Append("\n");
            sb.Append("  MachineId: ").Append(MachineId).Append("\n");
            sb.Append("  RdsServerId: ").Append(RdsServerId).Append("\n");
            sb.Append("  ResourcedRemotely: ").Append(ResourcedRemotely).Append("\n");
            sb.Append("  SecurityGatewayData: ").Append(SecurityGatewayData).Append("\n");
            sb.Append("  SessionProtocol: ").Append(SessionProtocol).Append("\n");
            sb.Append("  SessionState: ").Append(SessionState).Append("\n");
            sb.Append("  SessionType: ").Append(SessionType).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Unauthenticated: ").Append(Unauthenticated).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SessionInfo);
        }

        /// <summary>
        /// Returns true if SessionInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SessionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessGroupId == input.AccessGroupId ||
                    (this.AccessGroupId != null &&
                    this.AccessGroupId.Equals(input.AccessGroupId))
                ) && 
                (
                    this.AgentVersion == input.AgentVersion ||
                    (this.AgentVersion != null &&
                    this.AgentVersion.Equals(input.AgentVersion))
                ) && 
                (
                    this.ApplicationNames == input.ApplicationNames ||
                    this.ApplicationNames != null &&
                    this.ApplicationNames.SequenceEqual(input.ApplicationNames)
                ) && 
                (
                    this.BrokerUserId == input.BrokerUserId ||
                    (this.BrokerUserId != null &&
                    this.BrokerUserId.Equals(input.BrokerUserId))
                ) && 
                (
                    this.BrokeredRemotely == input.BrokeredRemotely ||
                    (this.BrokeredRemotely != null &&
                    this.BrokeredRemotely.Equals(input.BrokeredRemotely))
                ) && 
                (
                    this.ClientData == input.ClientData ||
                    (this.ClientData != null &&
                    this.ClientData.Equals(input.ClientData))
                ) && 
                (
                    this.DesktopPoolId == input.DesktopPoolId ||
                    (this.DesktopPoolId != null &&
                    this.DesktopPoolId.Equals(input.DesktopPoolId))
                ) && 
                (
                    this.DisconnectedTime == input.DisconnectedTime ||
                    (this.DisconnectedTime != null &&
                    this.DisconnectedTime.Equals(input.DisconnectedTime))
                ) && 
                (
                    this.FarmId == input.FarmId ||
                    (this.FarmId != null &&
                    this.FarmId.Equals(input.FarmId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IdleDuration == input.IdleDuration ||
                    (this.IdleDuration != null &&
                    this.IdleDuration.Equals(input.IdleDuration))
                ) && 
                (
                    this.LastSessionDurationMs == input.LastSessionDurationMs ||
                    (this.LastSessionDurationMs != null &&
                    this.LastSessionDurationMs.Equals(input.LastSessionDurationMs))
                ) && 
                (
                    this.MachineId == input.MachineId ||
                    (this.MachineId != null &&
                    this.MachineId.Equals(input.MachineId))
                ) && 
                (
                    this.RdsServerId == input.RdsServerId ||
                    (this.RdsServerId != null &&
                    this.RdsServerId.Equals(input.RdsServerId))
                ) && 
                (
                    this.ResourcedRemotely == input.ResourcedRemotely ||
                    (this.ResourcedRemotely != null &&
                    this.ResourcedRemotely.Equals(input.ResourcedRemotely))
                ) && 
                (
                    this.SecurityGatewayData == input.SecurityGatewayData ||
                    (this.SecurityGatewayData != null &&
                    this.SecurityGatewayData.Equals(input.SecurityGatewayData))
                ) && 
                (
                    this.SessionProtocol == input.SessionProtocol ||
                    (this.SessionProtocol != null &&
                    this.SessionProtocol.Equals(input.SessionProtocol))
                ) && 
                (
                    this.SessionState == input.SessionState ||
                    (this.SessionState != null &&
                    this.SessionState.Equals(input.SessionState))
                ) && 
                (
                    this.SessionType == input.SessionType ||
                    (this.SessionType != null &&
                    this.SessionType.Equals(input.SessionType))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.Unauthenticated == input.Unauthenticated ||
                    (this.Unauthenticated != null &&
                    this.Unauthenticated.Equals(input.Unauthenticated))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessGroupId != null)
                    hashCode = hashCode * 59 + this.AccessGroupId.GetHashCode();
                if (this.AgentVersion != null)
                    hashCode = hashCode * 59 + this.AgentVersion.GetHashCode();
                if (this.ApplicationNames != null)
                    hashCode = hashCode * 59 + this.ApplicationNames.GetHashCode();
                if (this.BrokerUserId != null)
                    hashCode = hashCode * 59 + this.BrokerUserId.GetHashCode();
                if (this.BrokeredRemotely != null)
                    hashCode = hashCode * 59 + this.BrokeredRemotely.GetHashCode();
                if (this.ClientData != null)
                    hashCode = hashCode * 59 + this.ClientData.GetHashCode();
                if (this.DesktopPoolId != null)
                    hashCode = hashCode * 59 + this.DesktopPoolId.GetHashCode();
                if (this.DisconnectedTime != null)
                    hashCode = hashCode * 59 + this.DisconnectedTime.GetHashCode();
                if (this.FarmId != null)
                    hashCode = hashCode * 59 + this.FarmId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IdleDuration != null)
                    hashCode = hashCode * 59 + this.IdleDuration.GetHashCode();
                if (this.LastSessionDurationMs != null)
                    hashCode = hashCode * 59 + this.LastSessionDurationMs.GetHashCode();
                if (this.MachineId != null)
                    hashCode = hashCode * 59 + this.MachineId.GetHashCode();
                if (this.RdsServerId != null)
                    hashCode = hashCode * 59 + this.RdsServerId.GetHashCode();
                if (this.ResourcedRemotely != null)
                    hashCode = hashCode * 59 + this.ResourcedRemotely.GetHashCode();
                if (this.SecurityGatewayData != null)
                    hashCode = hashCode * 59 + this.SecurityGatewayData.GetHashCode();
                if (this.SessionProtocol != null)
                    hashCode = hashCode * 59 + this.SessionProtocol.GetHashCode();
                if (this.SessionState != null)
                    hashCode = hashCode * 59 + this.SessionState.GetHashCode();
                if (this.SessionType != null)
                    hashCode = hashCode * 59 + this.SessionType.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.Unauthenticated != null)
                    hashCode = hashCode * 59 + this.Unauthenticated.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
