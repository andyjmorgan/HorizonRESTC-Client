/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Details of the SAML authenticator.
    /// </summary>
    [DataContract]
    public partial class SAMLAuthMonitorDetails :  IEquatable<SAMLAuthMonitorDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SAMLAuthMonitorDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SAMLAuthMonitorDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SAMLAuthMonitorDetails" /> class.
        /// </summary>
        /// <param name="administratorUrl">The administrator URL for the SAML authenticator..</param>
        /// <param name="label">The label of the SAML Authenticator. (required).</param>
        /// <param name="metadataUrl">The metadata URL of the SAML Authenticator. (required).</param>
        public SAMLAuthMonitorDetails(string administratorUrl = default(string), string label = default(string), string metadataUrl = default(string))
        {
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new InvalidDataException("label is a required property for SAMLAuthMonitorDetails and cannot be null");
            }
            else
            {
                this.Label = label;
            }
            // to ensure "metadataUrl" is required (not null)
            if (metadataUrl == null)
            {
                throw new InvalidDataException("metadataUrl is a required property for SAMLAuthMonitorDetails and cannot be null");
            }
            else
            {
                this.MetadataUrl = metadataUrl;
            }
            this.AdministratorUrl = administratorUrl;
        }
        
        /// <summary>
        /// The administrator URL for the SAML authenticator.
        /// </summary>
        /// <value>The administrator URL for the SAML authenticator.</value>
        [DataMember(Name="administrator_url", EmitDefaultValue=false)]
        public string AdministratorUrl { get; set; }

        /// <summary>
        /// The label of the SAML Authenticator.
        /// </summary>
        /// <value>The label of the SAML Authenticator.</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// The metadata URL of the SAML Authenticator.
        /// </summary>
        /// <value>The metadata URL of the SAML Authenticator.</value>
        [DataMember(Name="metadata_url", EmitDefaultValue=false)]
        public string MetadataUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SAMLAuthMonitorDetails {\n");
            sb.Append("  AdministratorUrl: ").Append(AdministratorUrl).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  MetadataUrl: ").Append(MetadataUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SAMLAuthMonitorDetails);
        }

        /// <summary>
        /// Returns true if SAMLAuthMonitorDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SAMLAuthMonitorDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SAMLAuthMonitorDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdministratorUrl == input.AdministratorUrl ||
                    (this.AdministratorUrl != null &&
                    this.AdministratorUrl.Equals(input.AdministratorUrl))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.MetadataUrl == input.MetadataUrl ||
                    (this.MetadataUrl != null &&
                    this.MetadataUrl.Equals(input.MetadataUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdministratorUrl != null)
                    hashCode = hashCode * 59 + this.AdministratorUrl.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.MetadataUrl != null)
                    hashCode = hashCode * 59 + this.MetadataUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
