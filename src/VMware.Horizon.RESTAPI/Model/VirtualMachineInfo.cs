/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to a Virtual Machine.
    /// </summary>
    [DataContract]
    public partial class VirtualMachineInfo :  IEquatable<VirtualMachineInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines IncompatibleReasons
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IncompatibleReasonsEnum
        {
            
            /// <summary>
            /// Enum INUSEBYLOCALDESKTOPPOOL for value: IN_USE_BY_LOCAL_DESKTOP_POOL
            /// </summary>
            [EnumMember(Value = "IN_USE_BY_LOCAL_DESKTOP_POOL")]
            INUSEBYLOCALDESKTOPPOOL = 1,
            
            /// <summary>
            /// Enum INUSEBYNONLOCALDESKTOPPOOL for value: IN_USE_BY_NON_LOCAL_DESKTOP_POOL
            /// </summary>
            [EnumMember(Value = "IN_USE_BY_NON_LOCAL_DESKTOP_POOL")]
            INUSEBYNONLOCALDESKTOPPOOL = 2,
            
            /// <summary>
            /// Enum VIEWCOMPOSERREPLICA for value: VIEW_COMPOSER_REPLICA
            /// </summary>
            [EnumMember(Value = "VIEW_COMPOSER_REPLICA")]
            VIEWCOMPOSERREPLICA = 3,
            
            /// <summary>
            /// Enum VIEWCOMPOSERBASEIMAGE for value: VIEW_COMPOSER_BASE_IMAGE
            /// </summary>
            [EnumMember(Value = "VIEW_COMPOSER_BASE_IMAGE")]
            VIEWCOMPOSERBASEIMAGE = 4,
            
            /// <summary>
            /// Enum UNSUPPORTEDOS for value: UNSUPPORTED_OS
            /// </summary>
            [EnumMember(Value = "UNSUPPORTED_OS")]
            UNSUPPORTEDOS = 5,
            
            /// <summary>
            /// Enum INCOMPATIBLEGRIDVGPUS for value: INCOMPATIBLE_GRID_VGPUS
            /// </summary>
            [EnumMember(Value = "INCOMPATIBLE_GRID_VGPUS")]
            INCOMPATIBLEGRIDVGPUS = 6,
            
            /// <summary>
            /// Enum INSTANTINTERNAL for value: INSTANT_INTERNAL
            /// </summary>
            [EnumMember(Value = "INSTANT_INTERNAL")]
            INSTANTINTERNAL = 7,
            
            /// <summary>
            /// Enum INSTANTCLONEBASEIMAGE for value: INSTANT_CLONE_BASE_IMAGE
            /// </summary>
            [EnumMember(Value = "INSTANT_CLONE_BASE_IMAGE")]
            INSTANTCLONEBASEIMAGE = 8
        }


        /// <summary>
        /// Reasons that may preclude this Virtual Machine from having its snapshots used in linked or instant clone desktop or farm.
        /// </summary>
        /// <value>Reasons that may preclude this Virtual Machine from having its snapshots used in linked or instant clone desktop or farm.</value>
        [DataMember(Name="incompatible_reasons", EmitDefaultValue=false)]
        public List<IncompatibleReasonsEnum> IncompatibleReasons { get; set; }
        /// <summary>
        /// Operating system. * UNKNOWN: Unknown * WINDOWS_XP: Windows XP * WINDOWS_VISTA: Windows Vista * WINDOWS_7: Windows 7 * WINDOWS_8: Windows 8 * WINDOWS_10: Windows 10 * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_OTHER: Linux (other) * LINUX_SERVER_OTHER: Linux server (other) * LINUX_UBUNTU: Linux (Ubuntu) * LINUX_RHEL: Linux (Red Hat Enterprise) * LINUX_SUSE: Linux (Suse) * LINUX_CENTOS: Linux (CentOS)
        /// </summary>
        /// <value>Operating system. * UNKNOWN: Unknown * WINDOWS_XP: Windows XP * WINDOWS_VISTA: Windows Vista * WINDOWS_7: Windows 7 * WINDOWS_8: Windows 8 * WINDOWS_10: Windows 10 * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_OTHER: Linux (other) * LINUX_SERVER_OTHER: Linux server (other) * LINUX_UBUNTU: Linux (Ubuntu) * LINUX_RHEL: Linux (Red Hat Enterprise) * LINUX_SUSE: Linux (Suse) * LINUX_CENTOS: Linux (CentOS)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatingSystemEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,
            
            /// <summary>
            /// Enum WINDOWSXP for value: WINDOWS_XP
            /// </summary>
            [EnumMember(Value = "WINDOWS_XP")]
            WINDOWSXP = 2,
            
            /// <summary>
            /// Enum WINDOWSVISTA for value: WINDOWS_VISTA
            /// </summary>
            [EnumMember(Value = "WINDOWS_VISTA")]
            WINDOWSVISTA = 3,
            
            /// <summary>
            /// Enum WINDOWS7 for value: WINDOWS_7
            /// </summary>
            [EnumMember(Value = "WINDOWS_7")]
            WINDOWS7 = 4,
            
            /// <summary>
            /// Enum WINDOWS8 for value: WINDOWS_8
            /// </summary>
            [EnumMember(Value = "WINDOWS_8")]
            WINDOWS8 = 5,
            
            /// <summary>
            /// Enum WINDOWS10 for value: WINDOWS_10
            /// </summary>
            [EnumMember(Value = "WINDOWS_10")]
            WINDOWS10 = 6,
            
            /// <summary>
            /// Enum WINDOWSSERVER2003 for value: WINDOWS_SERVER_2003
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2003")]
            WINDOWSSERVER2003 = 7,
            
            /// <summary>
            /// Enum WINDOWSSERVER2008 for value: WINDOWS_SERVER_2008
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2008")]
            WINDOWSSERVER2008 = 8,
            
            /// <summary>
            /// Enum WINDOWSSERVER2008R2 for value: WINDOWS_SERVER_2008_R2
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2008_R2")]
            WINDOWSSERVER2008R2 = 9,
            
            /// <summary>
            /// Enum WINDOWSSERVER2012 for value: WINDOWS_SERVER_2012
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2012")]
            WINDOWSSERVER2012 = 10,
            
            /// <summary>
            /// Enum WINDOWSSERVER2012R2 for value: WINDOWS_SERVER_2012_R2
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2012_R2")]
            WINDOWSSERVER2012R2 = 11,
            
            /// <summary>
            /// Enum WINDOWSSERVER2016ORABOVE for value: WINDOWS_SERVER_2016_OR_ABOVE
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2016_OR_ABOVE")]
            WINDOWSSERVER2016ORABOVE = 12,
            
            /// <summary>
            /// Enum LINUXOTHER for value: LINUX_OTHER
            /// </summary>
            [EnumMember(Value = "LINUX_OTHER")]
            LINUXOTHER = 13,
            
            /// <summary>
            /// Enum LINUXSERVEROTHER for value: LINUX_SERVER_OTHER
            /// </summary>
            [EnumMember(Value = "LINUX_SERVER_OTHER")]
            LINUXSERVEROTHER = 14,
            
            /// <summary>
            /// Enum LINUXUBUNTU for value: LINUX_UBUNTU
            /// </summary>
            [EnumMember(Value = "LINUX_UBUNTU")]
            LINUXUBUNTU = 15,
            
            /// <summary>
            /// Enum LINUXRHEL for value: LINUX_RHEL
            /// </summary>
            [EnumMember(Value = "LINUX_RHEL")]
            LINUXRHEL = 16,
            
            /// <summary>
            /// Enum LINUXSUSE for value: LINUX_SUSE
            /// </summary>
            [EnumMember(Value = "LINUX_SUSE")]
            LINUXSUSE = 17,
            
            /// <summary>
            /// Enum LINUXCENTOS for value: LINUX_CENTOS
            /// </summary>
            [EnumMember(Value = "LINUX_CENTOS")]
            LINUXCENTOS = 18
        }

        /// <summary>
        /// Operating system. * UNKNOWN: Unknown * WINDOWS_XP: Windows XP * WINDOWS_VISTA: Windows Vista * WINDOWS_7: Windows 7 * WINDOWS_8: Windows 8 * WINDOWS_10: Windows 10 * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_OTHER: Linux (other) * LINUX_SERVER_OTHER: Linux server (other) * LINUX_UBUNTU: Linux (Ubuntu) * LINUX_RHEL: Linux (Red Hat Enterprise) * LINUX_SUSE: Linux (Suse) * LINUX_CENTOS: Linux (CentOS)
        /// </summary>
        /// <value>Operating system. * UNKNOWN: Unknown * WINDOWS_XP: Windows XP * WINDOWS_VISTA: Windows Vista * WINDOWS_7: Windows 7 * WINDOWS_8: Windows 8 * WINDOWS_10: Windows 10 * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_OTHER: Linux (other) * LINUX_SERVER_OTHER: Linux server (other) * LINUX_UBUNTU: Linux (Ubuntu) * LINUX_RHEL: Linux (Red Hat Enterprise) * LINUX_SUSE: Linux (Suse) * LINUX_CENTOS: Linux (CentOS)</value>
        [DataMember(Name="operating_system", EmitDefaultValue=false)]
        public OperatingSystemEnum OperatingSystem { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VirtualMachineInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VirtualMachineInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VirtualMachineInfo" /> class.
        /// </summary>
        /// <param name="hardwareVersion">Hardware version for this VM. (required).</param>
        /// <param name="id">Unique ID representing a VM. (required).</param>
        /// <param name="incompatibleReasons">Reasons that may preclude this Virtual Machine from having its snapshots used in linked or instant clone desktop or farm..</param>
        /// <param name="name">VM name. (required).</param>
        /// <param name="operatingSystem">Operating system. * UNKNOWN: Unknown * WINDOWS_XP: Windows XP * WINDOWS_VISTA: Windows Vista * WINDOWS_7: Windows 7 * WINDOWS_8: Windows 8 * WINDOWS_10: Windows 10 * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_OTHER: Linux (other) * LINUX_SERVER_OTHER: Linux server (other) * LINUX_UBUNTU: Linux (Ubuntu) * LINUX_RHEL: Linux (Red Hat Enterprise) * LINUX_SUSE: Linux (Suse) * LINUX_CENTOS: Linux (CentOS) (required).</param>
        /// <param name="operatingSystemDisplayName">Operating system display name from Virtual Center. (required).</param>
        /// <param name="path">VM path. (required).</param>
        /// <param name="vGputype">Virtual GPU type. (required).</param>
        public VirtualMachineInfo(int? hardwareVersion = default(int?), string id = default(string), List<IncompatibleReasonsEnum> incompatibleReasons = default(List<IncompatibleReasonsEnum>), string name = default(string), OperatingSystemEnum operatingSystem = default(OperatingSystemEnum), string operatingSystemDisplayName = default(string), string path = default(string), string vGputype = default(string))
        {
            // to ensure "hardwareVersion" is required (not null)
            if (hardwareVersion == null)
            {
                throw new InvalidDataException("hardwareVersion is a required property for VirtualMachineInfo and cannot be null");
            }
            else
            {
                this.HardwareVersion = hardwareVersion;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for VirtualMachineInfo and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for VirtualMachineInfo and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "operatingSystem" is required (not null)
            if (operatingSystem == null)
            {
                throw new InvalidDataException("operatingSystem is a required property for VirtualMachineInfo and cannot be null");
            }
            else
            {
                this.OperatingSystem = operatingSystem;
            }
            // to ensure "operatingSystemDisplayName" is required (not null)
            if (operatingSystemDisplayName == null)
            {
                throw new InvalidDataException("operatingSystemDisplayName is a required property for VirtualMachineInfo and cannot be null");
            }
            else
            {
                this.OperatingSystemDisplayName = operatingSystemDisplayName;
            }
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new InvalidDataException("path is a required property for VirtualMachineInfo and cannot be null");
            }
            else
            {
                this.Path = path;
            }
            // to ensure "vGputype" is required (not null)
            if (vGputype == null)
            {
                throw new InvalidDataException("vGputype is a required property for VirtualMachineInfo and cannot be null");
            }
            else
            {
                this.VGputype = vGputype;
            }
            this.IncompatibleReasons = incompatibleReasons;
        }
        
        /// <summary>
        /// Hardware version for this VM.
        /// </summary>
        /// <value>Hardware version for this VM.</value>
        [DataMember(Name="hardware_version", EmitDefaultValue=false)]
        public int? HardwareVersion { get; set; }

        /// <summary>
        /// Unique ID representing a VM.
        /// </summary>
        /// <value>Unique ID representing a VM.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// VM name.
        /// </summary>
        /// <value>VM name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Operating system display name from Virtual Center.
        /// </summary>
        /// <value>Operating system display name from Virtual Center.</value>
        [DataMember(Name="operating_system_display_name", EmitDefaultValue=false)]
        public string OperatingSystemDisplayName { get; set; }

        /// <summary>
        /// VM path.
        /// </summary>
        /// <value>VM path.</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Virtual GPU type.
        /// </summary>
        /// <value>Virtual GPU type.</value>
        [DataMember(Name="v_gputype", EmitDefaultValue=false)]
        public string VGputype { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VirtualMachineInfo {\n");
            sb.Append("  HardwareVersion: ").Append(HardwareVersion).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IncompatibleReasons: ").Append(IncompatibleReasons).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OperatingSystem: ").Append(OperatingSystem).Append("\n");
            sb.Append("  OperatingSystemDisplayName: ").Append(OperatingSystemDisplayName).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  VGputype: ").Append(VGputype).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VirtualMachineInfo);
        }

        /// <summary>
        /// Returns true if VirtualMachineInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of VirtualMachineInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VirtualMachineInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HardwareVersion == input.HardwareVersion ||
                    (this.HardwareVersion != null &&
                    this.HardwareVersion.Equals(input.HardwareVersion))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IncompatibleReasons == input.IncompatibleReasons ||
                    this.IncompatibleReasons != null &&
                    this.IncompatibleReasons.SequenceEqual(input.IncompatibleReasons)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OperatingSystem == input.OperatingSystem ||
                    (this.OperatingSystem != null &&
                    this.OperatingSystem.Equals(input.OperatingSystem))
                ) && 
                (
                    this.OperatingSystemDisplayName == input.OperatingSystemDisplayName ||
                    (this.OperatingSystemDisplayName != null &&
                    this.OperatingSystemDisplayName.Equals(input.OperatingSystemDisplayName))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.VGputype == input.VGputype ||
                    (this.VGputype != null &&
                    this.VGputype.Equals(input.VGputype))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HardwareVersion != null)
                    hashCode = hashCode * 59 + this.HardwareVersion.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IncompatibleReasons != null)
                    hashCode = hashCode * 59 + this.IncompatibleReasons.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OperatingSystem != null)
                    hashCode = hashCode * 59 + this.OperatingSystem.GetHashCode();
                if (this.OperatingSystemDisplayName != null)
                    hashCode = hashCode * 59 + this.OperatingSystemDisplayName.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.VGputype != null)
                    hashCode = hashCode * 59 + this.VGputype.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
