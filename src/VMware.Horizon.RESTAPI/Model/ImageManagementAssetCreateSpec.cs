/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to image management asset.
    /// </summary>
    [DataContract]
    public partial class ImageManagementAssetCreateSpec :  IEquatable<ImageManagementAssetCreateSpec>, IValidatableObject
    {
        /// <summary>
        /// Image management asset clone type. * FULL_CLONE: Image management asset to be used in full clone automated desktop pool. * INSTANT_CLONE: Image management asset to be used in instant clone desktop pool/farm.
        /// </summary>
        /// <value>Image management asset clone type. * FULL_CLONE: Image management asset to be used in full clone automated desktop pool. * INSTANT_CLONE: Image management asset to be used in instant clone desktop pool/farm.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CloneTypeEnum
        {
            
            /// <summary>
            /// Enum FULLCLONE for value: FULL_CLONE
            /// </summary>
            [EnumMember(Value = "FULL_CLONE")]
            FULLCLONE = 1,
            
            /// <summary>
            /// Enum INSTANTCLONE for value: INSTANT_CLONE
            /// </summary>
            [EnumMember(Value = "INSTANT_CLONE")]
            INSTANTCLONE = 2
        }

        /// <summary>
        /// Image management asset clone type. * FULL_CLONE: Image management asset to be used in full clone automated desktop pool. * INSTANT_CLONE: Image management asset to be used in instant clone desktop pool/farm.
        /// </summary>
        /// <value>Image management asset clone type. * FULL_CLONE: Image management asset to be used in full clone automated desktop pool. * INSTANT_CLONE: Image management asset to be used in instant clone desktop pool/farm.</value>
        [DataMember(Name="clone_type", EmitDefaultValue=false)]
        public CloneTypeEnum CloneType { get; set; }
        /// <summary>
        /// Image management asset image type. * RDSH_APPS: Image management asset to be used for farm creation which is be used in application. * RDSH_DESKTOP: Image management asset is for farm creation to be created. * VDI_DESKTOP: Image management asset is available for desktops/farms to be created.
        /// </summary>
        /// <value>Image management asset image type. * RDSH_APPS: Image management asset to be used for farm creation which is be used in application. * RDSH_DESKTOP: Image management asset is for farm creation to be created. * VDI_DESKTOP: Image management asset is available for desktops/farms to be created.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ImageTypeEnum
        {
            
            /// <summary>
            /// Enum RDSHAPPS for value: RDSH_APPS
            /// </summary>
            [EnumMember(Value = "RDSH_APPS")]
            RDSHAPPS = 1,
            
            /// <summary>
            /// Enum RDSHDESKTOP for value: RDSH_DESKTOP
            /// </summary>
            [EnumMember(Value = "RDSH_DESKTOP")]
            RDSHDESKTOP = 2,
            
            /// <summary>
            /// Enum VDIDESKTOP for value: VDI_DESKTOP
            /// </summary>
            [EnumMember(Value = "VDI_DESKTOP")]
            VDIDESKTOP = 3
        }

        /// <summary>
        /// Image management asset image type. * RDSH_APPS: Image management asset to be used for farm creation which is be used in application. * RDSH_DESKTOP: Image management asset is for farm creation to be created. * VDI_DESKTOP: Image management asset is available for desktops/farms to be created.
        /// </summary>
        /// <value>Image management asset image type. * RDSH_APPS: Image management asset to be used for farm creation which is be used in application. * RDSH_DESKTOP: Image management asset is for farm creation to be created. * VDI_DESKTOP: Image management asset is available for desktops/farms to be created.</value>
        [DataMember(Name="image_type", EmitDefaultValue=false)]
        public ImageTypeEnum ImageType { get; set; }
        /// <summary>
        /// Image management asset status. * AVAILABLE: Image management asset is available for desktop pools/farms to be created. * DEPLOYING_VM: Image management asset is deploying VM on the virtual center. * DEPLOYMENT_DONE: Image management asset VM deployed on the virtual center. * DELETED: Image management asset has been deleted. * DISABLED: Image management asset has been disabled and no further pool/farm operation can be done using the same. * FAILED: Image management asset creation has failed. * REPLICATING: Copying the specialized images across all virtual centers. * RETRY_PENDING: When image management asset creation has failed, retry action is pending for asset to be created. * SPECIALIZING_VM: Image management asset is being published and specialized internally like installing agents etc.
        /// </summary>
        /// <value>Image management asset status. * AVAILABLE: Image management asset is available for desktop pools/farms to be created. * DEPLOYING_VM: Image management asset is deploying VM on the virtual center. * DEPLOYMENT_DONE: Image management asset VM deployed on the virtual center. * DELETED: Image management asset has been deleted. * DISABLED: Image management asset has been disabled and no further pool/farm operation can be done using the same. * FAILED: Image management asset creation has failed. * REPLICATING: Copying the specialized images across all virtual centers. * RETRY_PENDING: When image management asset creation has failed, retry action is pending for asset to be created. * SPECIALIZING_VM: Image management asset is being published and specialized internally like installing agents etc.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum AVAILABLE for value: AVAILABLE
            /// </summary>
            [EnumMember(Value = "AVAILABLE")]
            AVAILABLE = 1,
            
            /// <summary>
            /// Enum DEPLOYINGVM for value: DEPLOYING_VM
            /// </summary>
            [EnumMember(Value = "DEPLOYING_VM")]
            DEPLOYINGVM = 2,
            
            /// <summary>
            /// Enum DEPLOYMENTDONE for value: DEPLOYMENT_DONE
            /// </summary>
            [EnumMember(Value = "DEPLOYMENT_DONE")]
            DEPLOYMENTDONE = 3,
            
            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 4,
            
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 5,
            
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 6,
            
            /// <summary>
            /// Enum REPLICATING for value: REPLICATING
            /// </summary>
            [EnumMember(Value = "REPLICATING")]
            REPLICATING = 7,
            
            /// <summary>
            /// Enum RETRYPENDING for value: RETRY_PENDING
            /// </summary>
            [EnumMember(Value = "RETRY_PENDING")]
            RETRYPENDING = 8,
            
            /// <summary>
            /// Enum SPECIALIZINGVM for value: SPECIALIZING_VM
            /// </summary>
            [EnumMember(Value = "SPECIALIZING_VM")]
            SPECIALIZINGVM = 9
        }

        /// <summary>
        /// Image management asset status. * AVAILABLE: Image management asset is available for desktop pools/farms to be created. * DEPLOYING_VM: Image management asset is deploying VM on the virtual center. * DEPLOYMENT_DONE: Image management asset VM deployed on the virtual center. * DELETED: Image management asset has been deleted. * DISABLED: Image management asset has been disabled and no further pool/farm operation can be done using the same. * FAILED: Image management asset creation has failed. * REPLICATING: Copying the specialized images across all virtual centers. * RETRY_PENDING: When image management asset creation has failed, retry action is pending for asset to be created. * SPECIALIZING_VM: Image management asset is being published and specialized internally like installing agents etc.
        /// </summary>
        /// <value>Image management asset status. * AVAILABLE: Image management asset is available for desktop pools/farms to be created. * DEPLOYING_VM: Image management asset is deploying VM on the virtual center. * DEPLOYMENT_DONE: Image management asset VM deployed on the virtual center. * DELETED: Image management asset has been deleted. * DISABLED: Image management asset has been disabled and no further pool/farm operation can be done using the same. * FAILED: Image management asset creation has failed. * REPLICATING: Copying the specialized images across all virtual centers. * RETRY_PENDING: When image management asset creation has failed, retry action is pending for asset to be created. * SPECIALIZING_VM: Image management asset is being published and specialized internally like installing agents etc.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageManagementAssetCreateSpec" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImageManagementAssetCreateSpec() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageManagementAssetCreateSpec" /> class.
        /// </summary>
        /// <param name="additionalDetails">Additional details about image management asset..</param>
        /// <param name="baseSnapshotId">Virtual machine snapshot. Must be set if vm_template_id is unset..</param>
        /// <param name="baseVmId">Virtual machine ID. Must be set if vm_template_id is unset..</param>
        /// <param name="cloneType">Image management asset clone type. * FULL_CLONE: Image management asset to be used in full clone automated desktop pool. * INSTANT_CLONE: Image management asset to be used in instant clone desktop pool/farm. (required).</param>
        /// <param name="imStreamId">Image management stream to which this asset belongs to. (required).</param>
        /// <param name="imVersionId">Image management version to which this asset belongs to. (required).</param>
        /// <param name="imageType">Image management asset image type. * RDSH_APPS: Image management asset to be used for farm creation which is be used in application. * RDSH_DESKTOP: Image management asset is for farm creation to be created. * VDI_DESKTOP: Image management asset is available for desktops/farms to be created. (required).</param>
        /// <param name="status">Image management asset status. * AVAILABLE: Image management asset is available for desktop pools/farms to be created. * DEPLOYING_VM: Image management asset is deploying VM on the virtual center. * DEPLOYMENT_DONE: Image management asset VM deployed on the virtual center. * DELETED: Image management asset has been deleted. * DISABLED: Image management asset has been disabled and no further pool/farm operation can be done using the same. * FAILED: Image management asset creation has failed. * REPLICATING: Copying the specialized images across all virtual centers. * RETRY_PENDING: When image management asset creation has failed, retry action is pending for asset to be created. * SPECIALIZING_VM: Image management asset is being published and specialized internally like installing agents etc. (required).</param>
        /// <param name="vcenterId">Virtual Center where this asset is created. (required).</param>
        /// <param name="vmTemplateId">Virtual machine template ID..</param>
        public ImageManagementAssetCreateSpec(Dictionary<string, string> additionalDetails = default(Dictionary<string, string>), string baseSnapshotId = default(string), string baseVmId = default(string), CloneTypeEnum cloneType = default(CloneTypeEnum), string imStreamId = default(string), string imVersionId = default(string), ImageTypeEnum imageType = default(ImageTypeEnum), StatusEnum status = default(StatusEnum), string vcenterId = default(string), string vmTemplateId = default(string))
        {
            // to ensure "cloneType" is required (not null)
            if (cloneType == null)
            {
                throw new InvalidDataException("cloneType is a required property for ImageManagementAssetCreateSpec and cannot be null");
            }
            else
            {
                this.CloneType = cloneType;
            }
            // to ensure "imStreamId" is required (not null)
            if (imStreamId == null)
            {
                throw new InvalidDataException("imStreamId is a required property for ImageManagementAssetCreateSpec and cannot be null");
            }
            else
            {
                this.ImStreamId = imStreamId;
            }
            // to ensure "imVersionId" is required (not null)
            if (imVersionId == null)
            {
                throw new InvalidDataException("imVersionId is a required property for ImageManagementAssetCreateSpec and cannot be null");
            }
            else
            {
                this.ImVersionId = imVersionId;
            }
            // to ensure "imageType" is required (not null)
            if (imageType == null)
            {
                throw new InvalidDataException("imageType is a required property for ImageManagementAssetCreateSpec and cannot be null");
            }
            else
            {
                this.ImageType = imageType;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for ImageManagementAssetCreateSpec and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "vcenterId" is required (not null)
            if (vcenterId == null)
            {
                throw new InvalidDataException("vcenterId is a required property for ImageManagementAssetCreateSpec and cannot be null");
            }
            else
            {
                this.VcenterId = vcenterId;
            }
            this.AdditionalDetails = additionalDetails;
            this.BaseSnapshotId = baseSnapshotId;
            this.BaseVmId = baseVmId;
            this.VmTemplateId = vmTemplateId;
        }
        
        /// <summary>
        /// Additional details about image management asset.
        /// </summary>
        /// <value>Additional details about image management asset.</value>
        [DataMember(Name="additional_details", EmitDefaultValue=false)]
        public Dictionary<string, string> AdditionalDetails { get; set; }

        /// <summary>
        /// Virtual machine snapshot. Must be set if vm_template_id is unset.
        /// </summary>
        /// <value>Virtual machine snapshot. Must be set if vm_template_id is unset.</value>
        [DataMember(Name="base_snapshot_id", EmitDefaultValue=false)]
        public string BaseSnapshotId { get; set; }

        /// <summary>
        /// Virtual machine ID. Must be set if vm_template_id is unset.
        /// </summary>
        /// <value>Virtual machine ID. Must be set if vm_template_id is unset.</value>
        [DataMember(Name="base_vm_id", EmitDefaultValue=false)]
        public string BaseVmId { get; set; }


        /// <summary>
        /// Image management stream to which this asset belongs to.
        /// </summary>
        /// <value>Image management stream to which this asset belongs to.</value>
        [DataMember(Name="im_stream_id", EmitDefaultValue=false)]
        public string ImStreamId { get; set; }

        /// <summary>
        /// Image management version to which this asset belongs to.
        /// </summary>
        /// <value>Image management version to which this asset belongs to.</value>
        [DataMember(Name="im_version_id", EmitDefaultValue=false)]
        public string ImVersionId { get; set; }



        /// <summary>
        /// Virtual Center where this asset is created.
        /// </summary>
        /// <value>Virtual Center where this asset is created.</value>
        [DataMember(Name="vcenter_id", EmitDefaultValue=false)]
        public string VcenterId { get; set; }

        /// <summary>
        /// Virtual machine template ID.
        /// </summary>
        /// <value>Virtual machine template ID.</value>
        [DataMember(Name="vm_template_id", EmitDefaultValue=false)]
        public string VmTemplateId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImageManagementAssetCreateSpec {\n");
            sb.Append("  AdditionalDetails: ").Append(AdditionalDetails).Append("\n");
            sb.Append("  BaseSnapshotId: ").Append(BaseSnapshotId).Append("\n");
            sb.Append("  BaseVmId: ").Append(BaseVmId).Append("\n");
            sb.Append("  CloneType: ").Append(CloneType).Append("\n");
            sb.Append("  ImStreamId: ").Append(ImStreamId).Append("\n");
            sb.Append("  ImVersionId: ").Append(ImVersionId).Append("\n");
            sb.Append("  ImageType: ").Append(ImageType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  VcenterId: ").Append(VcenterId).Append("\n");
            sb.Append("  VmTemplateId: ").Append(VmTemplateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImageManagementAssetCreateSpec);
        }

        /// <summary>
        /// Returns true if ImageManagementAssetCreateSpec instances are equal
        /// </summary>
        /// <param name="input">Instance of ImageManagementAssetCreateSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImageManagementAssetCreateSpec input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalDetails == input.AdditionalDetails ||
                    this.AdditionalDetails != null &&
                    this.AdditionalDetails.SequenceEqual(input.AdditionalDetails)
                ) && 
                (
                    this.BaseSnapshotId == input.BaseSnapshotId ||
                    (this.BaseSnapshotId != null &&
                    this.BaseSnapshotId.Equals(input.BaseSnapshotId))
                ) && 
                (
                    this.BaseVmId == input.BaseVmId ||
                    (this.BaseVmId != null &&
                    this.BaseVmId.Equals(input.BaseVmId))
                ) && 
                (
                    this.CloneType == input.CloneType ||
                    (this.CloneType != null &&
                    this.CloneType.Equals(input.CloneType))
                ) && 
                (
                    this.ImStreamId == input.ImStreamId ||
                    (this.ImStreamId != null &&
                    this.ImStreamId.Equals(input.ImStreamId))
                ) && 
                (
                    this.ImVersionId == input.ImVersionId ||
                    (this.ImVersionId != null &&
                    this.ImVersionId.Equals(input.ImVersionId))
                ) && 
                (
                    this.ImageType == input.ImageType ||
                    (this.ImageType != null &&
                    this.ImageType.Equals(input.ImageType))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.VcenterId == input.VcenterId ||
                    (this.VcenterId != null &&
                    this.VcenterId.Equals(input.VcenterId))
                ) && 
                (
                    this.VmTemplateId == input.VmTemplateId ||
                    (this.VmTemplateId != null &&
                    this.VmTemplateId.Equals(input.VmTemplateId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalDetails != null)
                    hashCode = hashCode * 59 + this.AdditionalDetails.GetHashCode();
                if (this.BaseSnapshotId != null)
                    hashCode = hashCode * 59 + this.BaseSnapshotId.GetHashCode();
                if (this.BaseVmId != null)
                    hashCode = hashCode * 59 + this.BaseVmId.GetHashCode();
                if (this.CloneType != null)
                    hashCode = hashCode * 59 + this.CloneType.GetHashCode();
                if (this.ImStreamId != null)
                    hashCode = hashCode * 59 + this.ImStreamId.GetHashCode();
                if (this.ImVersionId != null)
                    hashCode = hashCode * 59 + this.ImVersionId.GetHashCode();
                if (this.ImageType != null)
                    hashCode = hashCode * 59 + this.ImageType.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.VcenterId != null)
                    hashCode = hashCode * 59 + this.VcenterId.GetHashCode();
                if (this.VmTemplateId != null)
                    hashCode = hashCode * 59 + this.VmTemplateId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
