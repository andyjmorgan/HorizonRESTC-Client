/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Security gateway data associated with the session.
    /// </summary>
    [DataContract]
    public partial class SecurityGatewayData :  IEquatable<SecurityGatewayData>, IValidatableObject
    {
        /// <summary>
        /// Location of the security gateway.  This property need not be set. * EXTERNAL: Gateway location is external. * INTERNAL: Gateway location is internal. * UNKNOWN: Gateway location is unknown.
        /// </summary>
        /// <value>Location of the security gateway.  This property need not be set. * EXTERNAL: Gateway location is external. * INTERNAL: Gateway location is internal. * UNKNOWN: Gateway location is unknown.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LocationEnum
        {
            
            /// <summary>
            /// Enum EXTERNAL for value: EXTERNAL
            /// </summary>
            [EnumMember(Value = "EXTERNAL")]
            EXTERNAL = 1,
            
            /// <summary>
            /// Enum INTERNAL for value: INTERNAL
            /// </summary>
            [EnumMember(Value = "INTERNAL")]
            INTERNAL = 2,
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 3
        }

        /// <summary>
        /// Location of the security gateway.  This property need not be set. * EXTERNAL: Gateway location is external. * INTERNAL: Gateway location is internal. * UNKNOWN: Gateway location is unknown.
        /// </summary>
        /// <value>Location of the security gateway.  This property need not be set. * EXTERNAL: Gateway location is external. * INTERNAL: Gateway location is internal. * UNKNOWN: Gateway location is unknown.</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public LocationEnum? Location { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityGatewayData" /> class.
        /// </summary>
        /// <param name="address">IP address of the security gateway.  This property need not be set..</param>
        /// <param name="domainName">Computer machine name or DNS name of the security gateway.  This property need not be set..</param>
        /// <param name="location">Location of the security gateway.  This property need not be set. * EXTERNAL: Gateway location is external. * INTERNAL: Gateway location is internal. * UNKNOWN: Gateway location is unknown..</param>
        public SecurityGatewayData(string address = default(string), string domainName = default(string), LocationEnum? location = default(LocationEnum?))
        {
            this.Address = address;
            this.DomainName = domainName;
            this.Location = location;
        }
        
        /// <summary>
        /// IP address of the security gateway.  This property need not be set.
        /// </summary>
        /// <value>IP address of the security gateway.  This property need not be set.</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Computer machine name or DNS name of the security gateway.  This property need not be set.
        /// </summary>
        /// <value>Computer machine name or DNS name of the security gateway.  This property need not be set.</value>
        [DataMember(Name="domain_name", EmitDefaultValue=false)]
        public string DomainName { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecurityGatewayData {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityGatewayData);
        }

        /// <summary>
        /// Returns true if SecurityGatewayData instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityGatewayData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityGatewayData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.DomainName == input.DomainName ||
                    (this.DomainName != null &&
                    this.DomainName.Equals(input.DomainName))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.DomainName != null)
                    hashCode = hashCode * 59 + this.DomainName.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
