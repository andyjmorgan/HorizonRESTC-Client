/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to RCX servers of the cluster.
    /// </summary>
    [DataContract]
    public partial class RCXServerInfo :  IEquatable<RCXServerInfo>, IValidatableObject
    {
        /// <summary>
        /// This indicates the current status of RCX server. * UP: RCX server is running. * DOWN: RCX server is down. * UNKNOWN: RCX server status is unknown.
        /// </summary>
        /// <value>This indicates the current status of RCX server. * UP: RCX server is running. * DOWN: RCX server is down. * UNKNOWN: RCX server status is unknown.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum UP for value: UP
            /// </summary>
            [EnumMember(Value = "UP")]
            UP = 1,
            
            /// <summary>
            /// Enum DOWN for value: DOWN
            /// </summary>
            [EnumMember(Value = "DOWN")]
            DOWN = 2,
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 3
        }

        /// <summary>
        /// This indicates the current status of RCX server. * UP: RCX server is running. * DOWN: RCX server is down. * UNKNOWN: RCX server status is unknown.
        /// </summary>
        /// <value>This indicates the current status of RCX server. * UP: RCX server is running. * DOWN: RCX server is down. * UNKNOWN: RCX server status is unknown.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RCXServerInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RCXServerInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RCXServerInfo" /> class.
        /// </summary>
        /// <param name="id">Unique ID representing RCX server. (required).</param>
        /// <param name="name">FQDN/IP address of the RCX server. (required).</param>
        /// <param name="port">RCX server&#39;s port. (required).</param>
        /// <param name="status">This indicates the current status of RCX server. * UP: RCX server is running. * DOWN: RCX server is down. * UNKNOWN: RCX server status is unknown. (required).</param>
        /// <param name="thumbprints">Thumbprints of the RCX server certificates..</param>
        /// <param name="version">Version information of RCX server. (required).</param>
        public RCXServerInfo(string id = default(string), string name = default(string), int? port = default(int?), StatusEnum status = default(StatusEnum), List<CertificateThumbprint> thumbprints = default(List<CertificateThumbprint>), string version = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for RCXServerInfo and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for RCXServerInfo and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "port" is required (not null)
            if (port == null)
            {
                throw new InvalidDataException("port is a required property for RCXServerInfo and cannot be null");
            }
            else
            {
                this.Port = port;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for RCXServerInfo and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for RCXServerInfo and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            this.Thumbprints = thumbprints;
        }
        
        /// <summary>
        /// Unique ID representing RCX server.
        /// </summary>
        /// <value>Unique ID representing RCX server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// FQDN/IP address of the RCX server.
        /// </summary>
        /// <value>FQDN/IP address of the RCX server.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// RCX server&#39;s port.
        /// </summary>
        /// <value>RCX server&#39;s port.</value>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }


        /// <summary>
        /// Thumbprints of the RCX server certificates.
        /// </summary>
        /// <value>Thumbprints of the RCX server certificates.</value>
        [DataMember(Name="thumbprints", EmitDefaultValue=false)]
        public List<CertificateThumbprint> Thumbprints { get; set; }

        /// <summary>
        /// Version information of RCX server.
        /// </summary>
        /// <value>Version information of RCX server.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RCXServerInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Thumbprints: ").Append(Thumbprints).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RCXServerInfo);
        }

        /// <summary>
        /// Returns true if RCXServerInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of RCXServerInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RCXServerInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Thumbprints == input.Thumbprints ||
                    this.Thumbprints != null &&
                    this.Thumbprints.SequenceEqual(input.Thumbprints)
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Thumbprints != null)
                    hashCode = hashCode * 59 + this.Thumbprints.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
