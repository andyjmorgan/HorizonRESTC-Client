/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Application pool information.&lt;br&gt;List API returning this summary information can use search filter query to filter on specific fields supported by filters.&lt;br&gt; Supported Filters : &#39;And&#39;, &#39;Or&#39;, &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39; and &#39;EndsWith&#39;.&lt;br&gt;See the field description to know the filter types it supports.
    /// </summary>
    [DataContract]
    public partial class ApplicationPoolInfo :  IEquatable<ApplicationPoolInfo>, IValidatableObject
    {
        /// <summary>
        /// Multi-session mode for the application pool. An application launched in multi-session mode does not support reconnect behavior when user logs in from a different client instance. Multi-session mode should be disabled when pre-launch is enabled.&lt;br&gt;Supported Filters: &#39;Equals&#39;. * DISABLED: Multi-session is not supported for this application. * ENABLED_DEFAULT_OFF: Multi-session is supported for this application but is disabled by default. The client would need to explicitly request multi-session launch, if wanted. If a legacy client is used, this will always result in a single-session application launch. * ENABLED_DEFAULT_ON: Multi-session mode is supported for this application and is enabled by default. The client can request explicitly for single-session launch, if wanted. If a legacy client is used, this will always result in a multi-session application launch. * ENABLED_ENFORCED: Multi-session is supported for this application and it is enforced. The client can not select to launch this application as a single-session application.
        /// </summary>
        /// <value>Multi-session mode for the application pool. An application launched in multi-session mode does not support reconnect behavior when user logs in from a different client instance. Multi-session mode should be disabled when pre-launch is enabled.&lt;br&gt;Supported Filters: &#39;Equals&#39;. * DISABLED: Multi-session is not supported for this application. * ENABLED_DEFAULT_OFF: Multi-session is supported for this application but is disabled by default. The client would need to explicitly request multi-session launch, if wanted. If a legacy client is used, this will always result in a single-session application launch. * ENABLED_DEFAULT_ON: Multi-session mode is supported for this application and is enabled by default. The client can request explicitly for single-session launch, if wanted. If a legacy client is used, this will always result in a multi-session application launch. * ENABLED_ENFORCED: Multi-session is supported for this application and it is enforced. The client can not select to launch this application as a single-session application.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MultiSessionModeEnum
        {
            
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 1,
            
            /// <summary>
            /// Enum ENABLEDDEFAULTOFF for value: ENABLED_DEFAULT_OFF
            /// </summary>
            [EnumMember(Value = "ENABLED_DEFAULT_OFF")]
            ENABLEDDEFAULTOFF = 2,
            
            /// <summary>
            /// Enum ENABLEDDEFAULTON for value: ENABLED_DEFAULT_ON
            /// </summary>
            [EnumMember(Value = "ENABLED_DEFAULT_ON")]
            ENABLEDDEFAULTON = 3,
            
            /// <summary>
            /// Enum ENABLEDENFORCED for value: ENABLED_ENFORCED
            /// </summary>
            [EnumMember(Value = "ENABLED_ENFORCED")]
            ENABLEDENFORCED = 4
        }

        /// <summary>
        /// Multi-session mode for the application pool. An application launched in multi-session mode does not support reconnect behavior when user logs in from a different client instance. Multi-session mode should be disabled when pre-launch is enabled.&lt;br&gt;Supported Filters: &#39;Equals&#39;. * DISABLED: Multi-session is not supported for this application. * ENABLED_DEFAULT_OFF: Multi-session is supported for this application but is disabled by default. The client would need to explicitly request multi-session launch, if wanted. If a legacy client is used, this will always result in a single-session application launch. * ENABLED_DEFAULT_ON: Multi-session mode is supported for this application and is enabled by default. The client can request explicitly for single-session launch, if wanted. If a legacy client is used, this will always result in a multi-session application launch. * ENABLED_ENFORCED: Multi-session is supported for this application and it is enforced. The client can not select to launch this application as a single-session application.
        /// </summary>
        /// <value>Multi-session mode for the application pool. An application launched in multi-session mode does not support reconnect behavior when user logs in from a different client instance. Multi-session mode should be disabled when pre-launch is enabled.&lt;br&gt;Supported Filters: &#39;Equals&#39;. * DISABLED: Multi-session is not supported for this application. * ENABLED_DEFAULT_OFF: Multi-session is supported for this application but is disabled by default. The client would need to explicitly request multi-session launch, if wanted. If a legacy client is used, this will always result in a single-session application launch. * ENABLED_DEFAULT_ON: Multi-session mode is supported for this application and is enabled by default. The client can request explicitly for single-session launch, if wanted. If a legacy client is used, this will always result in a multi-session application launch. * ENABLED_ENFORCED: Multi-session is supported for this application and it is enforced. The client can not select to launch this application as a single-session application.</value>
        [DataMember(Name="multi_session_mode", EmitDefaultValue=false)]
        public MultiSessionModeEnum? MultiSessionMode { get; set; }
        /// <summary>
        /// Defines ShortcutLocations
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShortcutLocationsEnum
        {
            
            /// <summary>
            /// Enum STARTMENU for value: START_MENU
            /// </summary>
            [EnumMember(Value = "START_MENU")]
            STARTMENU = 1,
            
            /// <summary>
            /// Enum DESKTOP for value: DESKTOP
            /// </summary>
            [EnumMember(Value = "DESKTOP")]
            DESKTOP = 2
        }


        /// <summary>
        /// Locations of the category folder in the user&#39;s OS containing a shortcut to the application. The value must be set if category folder name is provided.
        /// </summary>
        /// <value>Locations of the category folder in the user&#39;s OS containing a shortcut to the application. The value must be set if category folder name is provided.</value>
        [DataMember(Name="shortcut_locations", EmitDefaultValue=false)]
        public List<ShortcutLocationsEnum> ShortcutLocations { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationPoolInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApplicationPoolInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationPoolInfo" /> class.
        /// </summary>
        /// <param name="accessGroupId">Access groups can organize the entities (like application pools, desktop pools) in the organization. They can also be used for delegated administration. For application pool, this is the same as that of the farm or desktop pool that the application pool belongs to.&lt;br&gt;Supported Filters: &#39;Equals&#39;. (required).</param>
        /// <param name="antiAffinityData">Anti-affinity data. When an anti-affinity rule is configured for an application pool, Horizon Connection Server attempts to launch the application only on RDS servers that have sufficient resources to run the application. This feature can be useful for controlling applications that consume large amounts of CPU or memory resources.&lt;br&gt;An anti-affinity rule consists of an application matching pattern and a maximum count. For example, the application matching pattern might be autocad.exe and the maximum count might be 2..</param>
        /// <param name="categoryFolderName">Name of the category folder in the user&#39;s OS containing a shortcut to the application. Unset if the application does not belong to a category..</param>
        /// <param name="csRestrictionTags">Connection server restrictions. Application pool can be accessed from only those connection server instances that have a matching tag in this list. Null or empty list means that the application pool can be accessed from any connection server..</param>
        /// <param name="customizedIconIds">List of customized icon IDs associated with the application which the user has configured..</param>
        /// <param name="description">Notes about the application pool.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;..</param>
        /// <param name="desktopPoolId">ID of the desktop pool from which this application pool is created. Either this or farm id will be set.&lt;br&gt;Supported Filters: &#39;Equals&#39;..</param>
        /// <param name="displayName">The display name is the name that users will see when they connect to view client. If the display name is left blank, it defaults to name.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;..</param>
        /// <param name="enableClientRestrictions">Indicates whether client restrictions are to be applied to application pool. Currently it is valid for application pool created from farm.&lt;br&gt;Supported Filters: &#39;Equals&#39;..</param>
        /// <param name="enablePreLaunch">Whether to pre-launch the application.&lt;br&gt;Supported Filters: &#39;Equals&#39;..</param>
        /// <param name="enabled">Indicates whether the application pool is enabled.&lt;br&gt;Supported Filters: &#39;Equals&#39;. (required).</param>
        /// <param name="executablePath">Path to application executable.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39; and &#39;Contains&#39;. (required).</param>
        /// <param name="farmId">ID of the farm from which this application pool is created. Either this or desktop pool id will be set.&lt;br&gt;Supported Filters: &#39;Equals&#39;..</param>
        /// <param name="iconIds">List of icon IDs associated with the application which are fetched from the agent..</param>
        /// <param name="id">Unique ID representing application pool. (required).</param>
        /// <param name="maxMultiSessions">Maximum number of multi-sessions a user can have in this application pool. This property is required if multi-session mode is set to \&quot;ENABLED_DEFAULT_OFF\&quot;, \&quot;ENABLED_DEFAULT_ON\&quot;, or \&quot;ENABLED_ENFORCED\&quot;.</param>
        /// <param name="multiSessionMode">Multi-session mode for the application pool. An application launched in multi-session mode does not support reconnect behavior when user logs in from a different client instance. Multi-session mode should be disabled when pre-launch is enabled.&lt;br&gt;Supported Filters: &#39;Equals&#39;. * DISABLED: Multi-session is not supported for this application. * ENABLED_DEFAULT_OFF: Multi-session is supported for this application but is disabled by default. The client would need to explicitly request multi-session launch, if wanted. If a legacy client is used, this will always result in a single-session application launch. * ENABLED_DEFAULT_ON: Multi-session mode is supported for this application and is enabled by default. The client can request explicitly for single-session launch, if wanted. If a legacy client is used, this will always result in a multi-session application launch. * ENABLED_ENFORCED: Multi-session is supported for this application and it is enforced. The client can not select to launch this application as a single-session application..</param>
        /// <param name="name">The application name is the unique identifier used to identify this application pool. This property must contain only alphanumerics, underscores, and dashes. The maximum length is 64 characters.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;. (required).</param>
        /// <param name="parameters">Parameters to pass to application when launching..</param>
        /// <param name="publisher">Application publisher.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;..</param>
        /// <param name="shortcutLocations">Locations of the category folder in the user&#39;s OS containing a shortcut to the application. The value must be set if category folder name is provided..</param>
        /// <param name="startFolder">Starting folder for application..</param>
        /// <param name="supportedFileTypesData">Supported file types details..</param>
        /// <param name="version">Application version.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;..</param>
        public ApplicationPoolInfo(string accessGroupId = default(string), ApplicationAntiAffinityData antiAffinityData = default(ApplicationAntiAffinityData), string categoryFolderName = default(string), List<string> csRestrictionTags = default(List<string>), List<string> customizedIconIds = default(List<string>), string description = default(string), string desktopPoolId = default(string), string displayName = default(string), bool? enableClientRestrictions = default(bool?), bool? enablePreLaunch = default(bool?), bool? enabled = default(bool?), string executablePath = default(string), string farmId = default(string), List<string> iconIds = default(List<string>), string id = default(string), int? maxMultiSessions = default(int?), MultiSessionModeEnum? multiSessionMode = default(MultiSessionModeEnum?), string name = default(string), string parameters = default(string), string publisher = default(string), List<ShortcutLocationsEnum> shortcutLocations = default(List<ShortcutLocationsEnum>), string startFolder = default(string), ApplicationSupportedFileTypesData supportedFileTypesData = default(ApplicationSupportedFileTypesData), string version = default(string))
        {
            // to ensure "accessGroupId" is required (not null)
            if (accessGroupId == null)
            {
                throw new InvalidDataException("accessGroupId is a required property for ApplicationPoolInfo and cannot be null");
            }
            else
            {
                this.AccessGroupId = accessGroupId;
            }
            // to ensure "enabled" is required (not null)
            if (enabled == null)
            {
                throw new InvalidDataException("enabled is a required property for ApplicationPoolInfo and cannot be null");
            }
            else
            {
                this.Enabled = enabled;
            }
            // to ensure "executablePath" is required (not null)
            if (executablePath == null)
            {
                throw new InvalidDataException("executablePath is a required property for ApplicationPoolInfo and cannot be null");
            }
            else
            {
                this.ExecutablePath = executablePath;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ApplicationPoolInfo and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ApplicationPoolInfo and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.AntiAffinityData = antiAffinityData;
            this.CategoryFolderName = categoryFolderName;
            this.CsRestrictionTags = csRestrictionTags;
            this.CustomizedIconIds = customizedIconIds;
            this.Description = description;
            this.DesktopPoolId = desktopPoolId;
            this.DisplayName = displayName;
            this.EnableClientRestrictions = enableClientRestrictions;
            this.EnablePreLaunch = enablePreLaunch;
            this.FarmId = farmId;
            this.IconIds = iconIds;
            this.MaxMultiSessions = maxMultiSessions;
            this.MultiSessionMode = multiSessionMode;
            this.Parameters = parameters;
            this.Publisher = publisher;
            this.ShortcutLocations = shortcutLocations;
            this.StartFolder = startFolder;
            this.SupportedFileTypesData = supportedFileTypesData;
            this.Version = version;
        }
        
        /// <summary>
        /// Access groups can organize the entities (like application pools, desktop pools) in the organization. They can also be used for delegated administration. For application pool, this is the same as that of the farm or desktop pool that the application pool belongs to.&lt;br&gt;Supported Filters: &#39;Equals&#39;.
        /// </summary>
        /// <value>Access groups can organize the entities (like application pools, desktop pools) in the organization. They can also be used for delegated administration. For application pool, this is the same as that of the farm or desktop pool that the application pool belongs to.&lt;br&gt;Supported Filters: &#39;Equals&#39;.</value>
        [DataMember(Name="access_group_id", EmitDefaultValue=false)]
        public string AccessGroupId { get; set; }

        /// <summary>
        /// Anti-affinity data. When an anti-affinity rule is configured for an application pool, Horizon Connection Server attempts to launch the application only on RDS servers that have sufficient resources to run the application. This feature can be useful for controlling applications that consume large amounts of CPU or memory resources.&lt;br&gt;An anti-affinity rule consists of an application matching pattern and a maximum count. For example, the application matching pattern might be autocad.exe and the maximum count might be 2.
        /// </summary>
        /// <value>Anti-affinity data. When an anti-affinity rule is configured for an application pool, Horizon Connection Server attempts to launch the application only on RDS servers that have sufficient resources to run the application. This feature can be useful for controlling applications that consume large amounts of CPU or memory resources.&lt;br&gt;An anti-affinity rule consists of an application matching pattern and a maximum count. For example, the application matching pattern might be autocad.exe and the maximum count might be 2.</value>
        [DataMember(Name="anti_affinity_data", EmitDefaultValue=false)]
        public ApplicationAntiAffinityData AntiAffinityData { get; set; }

        /// <summary>
        /// Name of the category folder in the user&#39;s OS containing a shortcut to the application. Unset if the application does not belong to a category.
        /// </summary>
        /// <value>Name of the category folder in the user&#39;s OS containing a shortcut to the application. Unset if the application does not belong to a category.</value>
        [DataMember(Name="category_folder_name", EmitDefaultValue=false)]
        public string CategoryFolderName { get; set; }

        /// <summary>
        /// Connection server restrictions. Application pool can be accessed from only those connection server instances that have a matching tag in this list. Null or empty list means that the application pool can be accessed from any connection server.
        /// </summary>
        /// <value>Connection server restrictions. Application pool can be accessed from only those connection server instances that have a matching tag in this list. Null or empty list means that the application pool can be accessed from any connection server.</value>
        [DataMember(Name="cs_restriction_tags", EmitDefaultValue=false)]
        public List<string> CsRestrictionTags { get; set; }

        /// <summary>
        /// List of customized icon IDs associated with the application which the user has configured.
        /// </summary>
        /// <value>List of customized icon IDs associated with the application which the user has configured.</value>
        [DataMember(Name="customized_icon_ids", EmitDefaultValue=false)]
        public List<string> CustomizedIconIds { get; set; }

        /// <summary>
        /// Notes about the application pool.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;.
        /// </summary>
        /// <value>Notes about the application pool.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// ID of the desktop pool from which this application pool is created. Either this or farm id will be set.&lt;br&gt;Supported Filters: &#39;Equals&#39;.
        /// </summary>
        /// <value>ID of the desktop pool from which this application pool is created. Either this or farm id will be set.&lt;br&gt;Supported Filters: &#39;Equals&#39;.</value>
        [DataMember(Name="desktop_pool_id", EmitDefaultValue=false)]
        public string DesktopPoolId { get; set; }

        /// <summary>
        /// The display name is the name that users will see when they connect to view client. If the display name is left blank, it defaults to name.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;.
        /// </summary>
        /// <value>The display name is the name that users will see when they connect to view client. If the display name is left blank, it defaults to name.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;.</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Indicates whether client restrictions are to be applied to application pool. Currently it is valid for application pool created from farm.&lt;br&gt;Supported Filters: &#39;Equals&#39;.
        /// </summary>
        /// <value>Indicates whether client restrictions are to be applied to application pool. Currently it is valid for application pool created from farm.&lt;br&gt;Supported Filters: &#39;Equals&#39;.</value>
        [DataMember(Name="enable_client_restrictions", EmitDefaultValue=false)]
        public bool? EnableClientRestrictions { get; set; }

        /// <summary>
        /// Whether to pre-launch the application.&lt;br&gt;Supported Filters: &#39;Equals&#39;.
        /// </summary>
        /// <value>Whether to pre-launch the application.&lt;br&gt;Supported Filters: &#39;Equals&#39;.</value>
        [DataMember(Name="enable_pre_launch", EmitDefaultValue=false)]
        public bool? EnablePreLaunch { get; set; }

        /// <summary>
        /// Indicates whether the application pool is enabled.&lt;br&gt;Supported Filters: &#39;Equals&#39;.
        /// </summary>
        /// <value>Indicates whether the application pool is enabled.&lt;br&gt;Supported Filters: &#39;Equals&#39;.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Path to application executable.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39; and &#39;Contains&#39;.
        /// </summary>
        /// <value>Path to application executable.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39; and &#39;Contains&#39;.</value>
        [DataMember(Name="executable_path", EmitDefaultValue=false)]
        public string ExecutablePath { get; set; }

        /// <summary>
        /// ID of the farm from which this application pool is created. Either this or desktop pool id will be set.&lt;br&gt;Supported Filters: &#39;Equals&#39;.
        /// </summary>
        /// <value>ID of the farm from which this application pool is created. Either this or desktop pool id will be set.&lt;br&gt;Supported Filters: &#39;Equals&#39;.</value>
        [DataMember(Name="farm_id", EmitDefaultValue=false)]
        public string FarmId { get; set; }

        /// <summary>
        /// List of icon IDs associated with the application which are fetched from the agent.
        /// </summary>
        /// <value>List of icon IDs associated with the application which are fetched from the agent.</value>
        [DataMember(Name="icon_ids", EmitDefaultValue=false)]
        public List<string> IconIds { get; set; }

        /// <summary>
        /// Unique ID representing application pool.
        /// </summary>
        /// <value>Unique ID representing application pool.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Maximum number of multi-sessions a user can have in this application pool. This property is required if multi-session mode is set to \&quot;ENABLED_DEFAULT_OFF\&quot;, \&quot;ENABLED_DEFAULT_ON\&quot;, or \&quot;ENABLED_ENFORCED\&quot;
        /// </summary>
        /// <value>Maximum number of multi-sessions a user can have in this application pool. This property is required if multi-session mode is set to \&quot;ENABLED_DEFAULT_OFF\&quot;, \&quot;ENABLED_DEFAULT_ON\&quot;, or \&quot;ENABLED_ENFORCED\&quot;</value>
        [DataMember(Name="max_multi_sessions", EmitDefaultValue=false)]
        public int? MaxMultiSessions { get; set; }


        /// <summary>
        /// The application name is the unique identifier used to identify this application pool. This property must contain only alphanumerics, underscores, and dashes. The maximum length is 64 characters.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;.
        /// </summary>
        /// <value>The application name is the unique identifier used to identify this application pool. This property must contain only alphanumerics, underscores, and dashes. The maximum length is 64 characters.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Parameters to pass to application when launching.
        /// </summary>
        /// <value>Parameters to pass to application when launching.</value>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public string Parameters { get; set; }

        /// <summary>
        /// Application publisher.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;.
        /// </summary>
        /// <value>Application publisher.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;.</value>
        [DataMember(Name="publisher", EmitDefaultValue=false)]
        public string Publisher { get; set; }


        /// <summary>
        /// Starting folder for application.
        /// </summary>
        /// <value>Starting folder for application.</value>
        [DataMember(Name="start_folder", EmitDefaultValue=false)]
        public string StartFolder { get; set; }

        /// <summary>
        /// Supported file types details.
        /// </summary>
        /// <value>Supported file types details.</value>
        [DataMember(Name="supported_file_types_data", EmitDefaultValue=false)]
        public ApplicationSupportedFileTypesData SupportedFileTypesData { get; set; }

        /// <summary>
        /// Application version.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;.
        /// </summary>
        /// <value>Application version.&lt;br&gt;Supported Filters: &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationPoolInfo {\n");
            sb.Append("  AccessGroupId: ").Append(AccessGroupId).Append("\n");
            sb.Append("  AntiAffinityData: ").Append(AntiAffinityData).Append("\n");
            sb.Append("  CategoryFolderName: ").Append(CategoryFolderName).Append("\n");
            sb.Append("  CsRestrictionTags: ").Append(CsRestrictionTags).Append("\n");
            sb.Append("  CustomizedIconIds: ").Append(CustomizedIconIds).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DesktopPoolId: ").Append(DesktopPoolId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  EnableClientRestrictions: ").Append(EnableClientRestrictions).Append("\n");
            sb.Append("  EnablePreLaunch: ").Append(EnablePreLaunch).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  ExecutablePath: ").Append(ExecutablePath).Append("\n");
            sb.Append("  FarmId: ").Append(FarmId).Append("\n");
            sb.Append("  IconIds: ").Append(IconIds).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MaxMultiSessions: ").Append(MaxMultiSessions).Append("\n");
            sb.Append("  MultiSessionMode: ").Append(MultiSessionMode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Publisher: ").Append(Publisher).Append("\n");
            sb.Append("  ShortcutLocations: ").Append(ShortcutLocations).Append("\n");
            sb.Append("  StartFolder: ").Append(StartFolder).Append("\n");
            sb.Append("  SupportedFileTypesData: ").Append(SupportedFileTypesData).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationPoolInfo);
        }

        /// <summary>
        /// Returns true if ApplicationPoolInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationPoolInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationPoolInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessGroupId == input.AccessGroupId ||
                    (this.AccessGroupId != null &&
                    this.AccessGroupId.Equals(input.AccessGroupId))
                ) && 
                (
                    this.AntiAffinityData == input.AntiAffinityData ||
                    (this.AntiAffinityData != null &&
                    this.AntiAffinityData.Equals(input.AntiAffinityData))
                ) && 
                (
                    this.CategoryFolderName == input.CategoryFolderName ||
                    (this.CategoryFolderName != null &&
                    this.CategoryFolderName.Equals(input.CategoryFolderName))
                ) && 
                (
                    this.CsRestrictionTags == input.CsRestrictionTags ||
                    this.CsRestrictionTags != null &&
                    this.CsRestrictionTags.SequenceEqual(input.CsRestrictionTags)
                ) && 
                (
                    this.CustomizedIconIds == input.CustomizedIconIds ||
                    this.CustomizedIconIds != null &&
                    this.CustomizedIconIds.SequenceEqual(input.CustomizedIconIds)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DesktopPoolId == input.DesktopPoolId ||
                    (this.DesktopPoolId != null &&
                    this.DesktopPoolId.Equals(input.DesktopPoolId))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.EnableClientRestrictions == input.EnableClientRestrictions ||
                    (this.EnableClientRestrictions != null &&
                    this.EnableClientRestrictions.Equals(input.EnableClientRestrictions))
                ) && 
                (
                    this.EnablePreLaunch == input.EnablePreLaunch ||
                    (this.EnablePreLaunch != null &&
                    this.EnablePreLaunch.Equals(input.EnablePreLaunch))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.ExecutablePath == input.ExecutablePath ||
                    (this.ExecutablePath != null &&
                    this.ExecutablePath.Equals(input.ExecutablePath))
                ) && 
                (
                    this.FarmId == input.FarmId ||
                    (this.FarmId != null &&
                    this.FarmId.Equals(input.FarmId))
                ) && 
                (
                    this.IconIds == input.IconIds ||
                    this.IconIds != null &&
                    this.IconIds.SequenceEqual(input.IconIds)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MaxMultiSessions == input.MaxMultiSessions ||
                    (this.MaxMultiSessions != null &&
                    this.MaxMultiSessions.Equals(input.MaxMultiSessions))
                ) && 
                (
                    this.MultiSessionMode == input.MultiSessionMode ||
                    (this.MultiSessionMode != null &&
                    this.MultiSessionMode.Equals(input.MultiSessionMode))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                ) && 
                (
                    this.Publisher == input.Publisher ||
                    (this.Publisher != null &&
                    this.Publisher.Equals(input.Publisher))
                ) && 
                (
                    this.ShortcutLocations == input.ShortcutLocations ||
                    this.ShortcutLocations != null &&
                    this.ShortcutLocations.SequenceEqual(input.ShortcutLocations)
                ) && 
                (
                    this.StartFolder == input.StartFolder ||
                    (this.StartFolder != null &&
                    this.StartFolder.Equals(input.StartFolder))
                ) && 
                (
                    this.SupportedFileTypesData == input.SupportedFileTypesData ||
                    (this.SupportedFileTypesData != null &&
                    this.SupportedFileTypesData.Equals(input.SupportedFileTypesData))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessGroupId != null)
                    hashCode = hashCode * 59 + this.AccessGroupId.GetHashCode();
                if (this.AntiAffinityData != null)
                    hashCode = hashCode * 59 + this.AntiAffinityData.GetHashCode();
                if (this.CategoryFolderName != null)
                    hashCode = hashCode * 59 + this.CategoryFolderName.GetHashCode();
                if (this.CsRestrictionTags != null)
                    hashCode = hashCode * 59 + this.CsRestrictionTags.GetHashCode();
                if (this.CustomizedIconIds != null)
                    hashCode = hashCode * 59 + this.CustomizedIconIds.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DesktopPoolId != null)
                    hashCode = hashCode * 59 + this.DesktopPoolId.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.EnableClientRestrictions != null)
                    hashCode = hashCode * 59 + this.EnableClientRestrictions.GetHashCode();
                if (this.EnablePreLaunch != null)
                    hashCode = hashCode * 59 + this.EnablePreLaunch.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.ExecutablePath != null)
                    hashCode = hashCode * 59 + this.ExecutablePath.GetHashCode();
                if (this.FarmId != null)
                    hashCode = hashCode * 59 + this.FarmId.GetHashCode();
                if (this.IconIds != null)
                    hashCode = hashCode * 59 + this.IconIds.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MaxMultiSessions != null)
                    hashCode = hashCode * 59 + this.MaxMultiSessions.GetHashCode();
                if (this.MultiSessionMode != null)
                    hashCode = hashCode * 59 + this.MultiSessionMode.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.Publisher != null)
                    hashCode = hashCode * 59 + this.Publisher.GetHashCode();
                if (this.ShortcutLocations != null)
                    hashCode = hashCode * 59 + this.ShortcutLocations.GetHashCode();
                if (this.StartFolder != null)
                    hashCode = hashCode * 59 + this.StartFolder.GetHashCode();
                if (this.SupportedFileTypesData != null)
                    hashCode = hashCode * 59 + this.SupportedFileTypesData.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
