/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Load Balancer Metric settings for Farm.
    /// </summary>
    [DataContract]
    public partial class LoadBalancerMetricSettings :  IEquatable<LoadBalancerMetricSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadBalancerMetricSettings" /> class.
        /// </summary>
        /// <param name="cpuThreshold">Represents threshold of CPU usage, in percentage. If the value is 0,then this metric will not be considered for load balancing. Default value is 0..</param>
        /// <param name="diskQueueLengthThreshold">Represents the threshold of average number of both read and write requests that werequeued for the selected disk during the sample interval. If the value is 0,then this metric will not be considered for load balancing. Default value is 0..</param>
        /// <param name="diskReadLatencyThreshold">Represents the threshold of average time, in milliseconds, of a read of data from the disk. If the value is 0,then this metric will not be considered for load balancing. Default value is 0..</param>
        /// <param name="diskWriteLatencyThreshold">Represents the threshold of average time, in milliseconds, of a write of data to the disk.If the value is 0, then this metric will not be considered for load balancing. Default value is 0..</param>
        /// <param name="includeSessionCount">Whether to include session count for load balancing. Default value is true..</param>
        /// <param name="memoryThreshold">Represents threshold of memory usage, in percentage.If the value is 0, then this metric will not be considered for load balancing..</param>
        public LoadBalancerMetricSettings(int? cpuThreshold = default(int?), int? diskQueueLengthThreshold = default(int?), int? diskReadLatencyThreshold = default(int?), int? diskWriteLatencyThreshold = default(int?), bool? includeSessionCount = default(bool?), int? memoryThreshold = default(int?))
        {
            this.CpuThreshold = cpuThreshold;
            this.DiskQueueLengthThreshold = diskQueueLengthThreshold;
            this.DiskReadLatencyThreshold = diskReadLatencyThreshold;
            this.DiskWriteLatencyThreshold = diskWriteLatencyThreshold;
            this.IncludeSessionCount = includeSessionCount;
            this.MemoryThreshold = memoryThreshold;
        }
        
        /// <summary>
        /// Represents threshold of CPU usage, in percentage. If the value is 0,then this metric will not be considered for load balancing. Default value is 0.
        /// </summary>
        /// <value>Represents threshold of CPU usage, in percentage. If the value is 0,then this metric will not be considered for load balancing. Default value is 0.</value>
        [DataMember(Name="cpu_threshold", EmitDefaultValue=false)]
        public int? CpuThreshold { get; set; }

        /// <summary>
        /// Represents the threshold of average number of both read and write requests that werequeued for the selected disk during the sample interval. If the value is 0,then this metric will not be considered for load balancing. Default value is 0.
        /// </summary>
        /// <value>Represents the threshold of average number of both read and write requests that werequeued for the selected disk during the sample interval. If the value is 0,then this metric will not be considered for load balancing. Default value is 0.</value>
        [DataMember(Name="disk_queue_length_threshold", EmitDefaultValue=false)]
        public int? DiskQueueLengthThreshold { get; set; }

        /// <summary>
        /// Represents the threshold of average time, in milliseconds, of a read of data from the disk. If the value is 0,then this metric will not be considered for load balancing. Default value is 0.
        /// </summary>
        /// <value>Represents the threshold of average time, in milliseconds, of a read of data from the disk. If the value is 0,then this metric will not be considered for load balancing. Default value is 0.</value>
        [DataMember(Name="disk_read_latency_threshold", EmitDefaultValue=false)]
        public int? DiskReadLatencyThreshold { get; set; }

        /// <summary>
        /// Represents the threshold of average time, in milliseconds, of a write of data to the disk.If the value is 0, then this metric will not be considered for load balancing. Default value is 0.
        /// </summary>
        /// <value>Represents the threshold of average time, in milliseconds, of a write of data to the disk.If the value is 0, then this metric will not be considered for load balancing. Default value is 0.</value>
        [DataMember(Name="disk_write_latency_threshold", EmitDefaultValue=false)]
        public int? DiskWriteLatencyThreshold { get; set; }

        /// <summary>
        /// Whether to include session count for load balancing. Default value is true.
        /// </summary>
        /// <value>Whether to include session count for load balancing. Default value is true.</value>
        [DataMember(Name="include_session_count", EmitDefaultValue=false)]
        public bool? IncludeSessionCount { get; set; }

        /// <summary>
        /// Represents threshold of memory usage, in percentage.If the value is 0, then this metric will not be considered for load balancing.
        /// </summary>
        /// <value>Represents threshold of memory usage, in percentage.If the value is 0, then this metric will not be considered for load balancing.</value>
        [DataMember(Name="memory_threshold", EmitDefaultValue=false)]
        public int? MemoryThreshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoadBalancerMetricSettings {\n");
            sb.Append("  CpuThreshold: ").Append(CpuThreshold).Append("\n");
            sb.Append("  DiskQueueLengthThreshold: ").Append(DiskQueueLengthThreshold).Append("\n");
            sb.Append("  DiskReadLatencyThreshold: ").Append(DiskReadLatencyThreshold).Append("\n");
            sb.Append("  DiskWriteLatencyThreshold: ").Append(DiskWriteLatencyThreshold).Append("\n");
            sb.Append("  IncludeSessionCount: ").Append(IncludeSessionCount).Append("\n");
            sb.Append("  MemoryThreshold: ").Append(MemoryThreshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoadBalancerMetricSettings);
        }

        /// <summary>
        /// Returns true if LoadBalancerMetricSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of LoadBalancerMetricSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoadBalancerMetricSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CpuThreshold == input.CpuThreshold ||
                    (this.CpuThreshold != null &&
                    this.CpuThreshold.Equals(input.CpuThreshold))
                ) && 
                (
                    this.DiskQueueLengthThreshold == input.DiskQueueLengthThreshold ||
                    (this.DiskQueueLengthThreshold != null &&
                    this.DiskQueueLengthThreshold.Equals(input.DiskQueueLengthThreshold))
                ) && 
                (
                    this.DiskReadLatencyThreshold == input.DiskReadLatencyThreshold ||
                    (this.DiskReadLatencyThreshold != null &&
                    this.DiskReadLatencyThreshold.Equals(input.DiskReadLatencyThreshold))
                ) && 
                (
                    this.DiskWriteLatencyThreshold == input.DiskWriteLatencyThreshold ||
                    (this.DiskWriteLatencyThreshold != null &&
                    this.DiskWriteLatencyThreshold.Equals(input.DiskWriteLatencyThreshold))
                ) && 
                (
                    this.IncludeSessionCount == input.IncludeSessionCount ||
                    (this.IncludeSessionCount != null &&
                    this.IncludeSessionCount.Equals(input.IncludeSessionCount))
                ) && 
                (
                    this.MemoryThreshold == input.MemoryThreshold ||
                    (this.MemoryThreshold != null &&
                    this.MemoryThreshold.Equals(input.MemoryThreshold))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CpuThreshold != null)
                    hashCode = hashCode * 59 + this.CpuThreshold.GetHashCode();
                if (this.DiskQueueLengthThreshold != null)
                    hashCode = hashCode * 59 + this.DiskQueueLengthThreshold.GetHashCode();
                if (this.DiskReadLatencyThreshold != null)
                    hashCode = hashCode * 59 + this.DiskReadLatencyThreshold.GetHashCode();
                if (this.DiskWriteLatencyThreshold != null)
                    hashCode = hashCode * 59 + this.DiskWriteLatencyThreshold.GetHashCode();
                if (this.IncludeSessionCount != null)
                    hashCode = hashCode * 59 + this.IncludeSessionCount.GetHashCode();
                if (this.MemoryThreshold != null)
                    hashCode = hashCode * 59 + this.MemoryThreshold.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CpuThreshold (int?) maximum
            if(this.CpuThreshold > (int?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CpuThreshold, must be a value less than or equal to 100.", new [] { "CpuThreshold" });
            }

            // CpuThreshold (int?) minimum
            if(this.CpuThreshold < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CpuThreshold, must be a value greater than or equal to 0.", new [] { "CpuThreshold" });
            }

            // DiskQueueLengthThreshold (int?) minimum
            if(this.DiskQueueLengthThreshold < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiskQueueLengthThreshold, must be a value greater than or equal to 0.", new [] { "DiskQueueLengthThreshold" });
            }

            // DiskReadLatencyThreshold (int?) minimum
            if(this.DiskReadLatencyThreshold < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiskReadLatencyThreshold, must be a value greater than or equal to 0.", new [] { "DiskReadLatencyThreshold" });
            }

            // DiskWriteLatencyThreshold (int?) minimum
            if(this.DiskWriteLatencyThreshold < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiskWriteLatencyThreshold, must be a value greater than or equal to 0.", new [] { "DiskWriteLatencyThreshold" });
            }

            // MemoryThreshold (int?) maximum
            if(this.MemoryThreshold > (int?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MemoryThreshold, must be a value less than or equal to 100.", new [] { "MemoryThreshold" });
            }

            // MemoryThreshold (int?) minimum
            if(this.MemoryThreshold < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MemoryThreshold, must be a value greater than or equal to 0.", new [] { "MemoryThreshold" });
            }

            yield break;
        }
    }

}
