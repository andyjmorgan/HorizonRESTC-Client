/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to image management tag.
    /// </summary>
    [DataContract]
    public partial class ImageManagementTagUpdateSpec :  IEquatable<ImageManagementTagUpdateSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageManagementTagUpdateSpec" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImageManagementTagUpdateSpec() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageManagementTagUpdateSpec" /> class.
        /// </summary>
        /// <param name="additionalDetails">Additional details about image management tag..</param>
        /// <param name="imVersionId">Image management version ID to which this tag belongs. (required).</param>
        /// <param name="name">Image management tag name. (required).</param>
        public ImageManagementTagUpdateSpec(Dictionary<string, string> additionalDetails = default(Dictionary<string, string>), string imVersionId = default(string), string name = default(string))
        {
            // to ensure "imVersionId" is required (not null)
            if (imVersionId == null)
            {
                throw new InvalidDataException("imVersionId is a required property for ImageManagementTagUpdateSpec and cannot be null");
            }
            else
            {
                this.ImVersionId = imVersionId;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ImageManagementTagUpdateSpec and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.AdditionalDetails = additionalDetails;
        }
        
        /// <summary>
        /// Additional details about image management tag.
        /// </summary>
        /// <value>Additional details about image management tag.</value>
        [DataMember(Name="additional_details", EmitDefaultValue=false)]
        public Dictionary<string, string> AdditionalDetails { get; set; }

        /// <summary>
        /// Image management version ID to which this tag belongs.
        /// </summary>
        /// <value>Image management version ID to which this tag belongs.</value>
        [DataMember(Name="im_version_id", EmitDefaultValue=false)]
        public string ImVersionId { get; set; }

        /// <summary>
        /// Image management tag name.
        /// </summary>
        /// <value>Image management tag name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImageManagementTagUpdateSpec {\n");
            sb.Append("  AdditionalDetails: ").Append(AdditionalDetails).Append("\n");
            sb.Append("  ImVersionId: ").Append(ImVersionId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImageManagementTagUpdateSpec);
        }

        /// <summary>
        /// Returns true if ImageManagementTagUpdateSpec instances are equal
        /// </summary>
        /// <param name="input">Instance of ImageManagementTagUpdateSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImageManagementTagUpdateSpec input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalDetails == input.AdditionalDetails ||
                    this.AdditionalDetails != null &&
                    this.AdditionalDetails.SequenceEqual(input.AdditionalDetails)
                ) && 
                (
                    this.ImVersionId == input.ImVersionId ||
                    (this.ImVersionId != null &&
                    this.ImVersionId.Equals(input.ImVersionId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalDetails != null)
                    hashCode = hashCode * 59 + this.AdditionalDetails.GetHashCode();
                if (this.ImVersionId != null)
                    hashCode = hashCode * 59 + this.ImVersionId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
