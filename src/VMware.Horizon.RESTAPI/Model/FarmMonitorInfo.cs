/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Monitoring information related to Farm.
    /// </summary>
    [DataContract]
    public partial class FarmMonitorInfo :  IEquatable<FarmMonitorInfo>, IValidatableObject
    {
        /// <summary>
        /// Status of Farm. * OK: Farm is enabled and no servers are in WARNING or ERROR state. One or more server(s) may be DISABLED (including the case where all of them are DISABLED). * WARNING: Farm is enabled. One or more of the following is true: 1) One or more server(s) is either in WARNING or ERROR (not exceeding the predefined threshold) state. 2) The RDS Servers in this Farm present a mix of both known and unknown load preferences. * ERROR: Farm is enabled. One or more server(s) (exceeding the predefined threshold) is in ERROR state, or, for Automated Farms, there could be a provisioning error. * DISABLED: Farm is disabled.
        /// </summary>
        /// <value>Status of Farm. * OK: Farm is enabled and no servers are in WARNING or ERROR state. One or more server(s) may be DISABLED (including the case where all of them are DISABLED). * WARNING: Farm is enabled. One or more of the following is true: 1) One or more server(s) is either in WARNING or ERROR (not exceeding the predefined threshold) state. 2) The RDS Servers in this Farm present a mix of both known and unknown load preferences. * ERROR: Farm is enabled. One or more server(s) (exceeding the predefined threshold) is in ERROR state, or, for Automated Farms, there could be a provisioning error. * DISABLED: Farm is disabled.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum OK for value: OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OK = 1,
            
            /// <summary>
            /// Enum WARNING for value: WARNING
            /// </summary>
            [EnumMember(Value = "WARNING")]
            WARNING = 2,
            
            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 3,
            
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 4
        }

        /// <summary>
        /// Status of Farm. * OK: Farm is enabled and no servers are in WARNING or ERROR state. One or more server(s) may be DISABLED (including the case where all of them are DISABLED). * WARNING: Farm is enabled. One or more of the following is true: 1) One or more server(s) is either in WARNING or ERROR (not exceeding the predefined threshold) state. 2) The RDS Servers in this Farm present a mix of both known and unknown load preferences. * ERROR: Farm is enabled. One or more server(s) (exceeding the predefined threshold) is in ERROR state, or, for Automated Farms, there could be a provisioning error. * DISABLED: Farm is disabled.
        /// </summary>
        /// <value>Status of Farm. * OK: Farm is enabled and no servers are in WARNING or ERROR state. One or more server(s) may be DISABLED (including the case where all of them are DISABLED). * WARNING: Farm is enabled. One or more of the following is true: 1) One or more server(s) is either in WARNING or ERROR (not exceeding the predefined threshold) state. 2) The RDS Servers in this Farm present a mix of both known and unknown load preferences. * ERROR: Farm is enabled. One or more server(s) (exceeding the predefined threshold) is in ERROR state, or, for Automated Farms, there could be a provisioning error. * DISABLED: Farm is disabled.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FarmMonitorInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FarmMonitorInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FarmMonitorInfo" /> class.
        /// </summary>
        /// <param name="applicationCount">Number of Applications published from the farm..</param>
        /// <param name="details">Details of Farm. (required).</param>
        /// <param name="id">Unique ID of the Farm. (required).</param>
        /// <param name="name">Farm name. (required).</param>
        /// <param name="rdsServerCount">Number of RDS Servers in the farm..</param>
        /// <param name="status">Status of Farm. * OK: Farm is enabled and no servers are in WARNING or ERROR state. One or more server(s) may be DISABLED (including the case where all of them are DISABLED). * WARNING: Farm is enabled. One or more of the following is true: 1) One or more server(s) is either in WARNING or ERROR (not exceeding the predefined threshold) state. 2) The RDS Servers in this Farm present a mix of both known and unknown load preferences. * ERROR: Farm is enabled. One or more server(s) (exceeding the predefined threshold) is in ERROR state, or, for Automated Farms, there could be a provisioning error. * DISABLED: Farm is disabled. (required).</param>
        public FarmMonitorInfo(int? applicationCount = default(int?), FarmMonitorDetails details = default(FarmMonitorDetails), string id = default(string), string name = default(string), int? rdsServerCount = default(int?), StatusEnum status = default(StatusEnum))
        {
            // to ensure "details" is required (not null)
            if (details == null)
            {
                throw new InvalidDataException("details is a required property for FarmMonitorInfo and cannot be null");
            }
            else
            {
                this.Details = details;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for FarmMonitorInfo and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for FarmMonitorInfo and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for FarmMonitorInfo and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.ApplicationCount = applicationCount;
            this.RdsServerCount = rdsServerCount;
        }
        
        /// <summary>
        /// Number of Applications published from the farm.
        /// </summary>
        /// <value>Number of Applications published from the farm.</value>
        [DataMember(Name="application_count", EmitDefaultValue=false)]
        public int? ApplicationCount { get; set; }

        /// <summary>
        /// Details of Farm.
        /// </summary>
        /// <value>Details of Farm.</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public FarmMonitorDetails Details { get; set; }

        /// <summary>
        /// Unique ID of the Farm.
        /// </summary>
        /// <value>Unique ID of the Farm.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Farm name.
        /// </summary>
        /// <value>Farm name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Number of RDS Servers in the farm.
        /// </summary>
        /// <value>Number of RDS Servers in the farm.</value>
        [DataMember(Name="rds_server_count", EmitDefaultValue=false)]
        public int? RdsServerCount { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FarmMonitorInfo {\n");
            sb.Append("  ApplicationCount: ").Append(ApplicationCount).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RdsServerCount: ").Append(RdsServerCount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FarmMonitorInfo);
        }

        /// <summary>
        /// Returns true if FarmMonitorInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of FarmMonitorInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FarmMonitorInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationCount == input.ApplicationCount ||
                    (this.ApplicationCount != null &&
                    this.ApplicationCount.Equals(input.ApplicationCount))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RdsServerCount == input.RdsServerCount ||
                    (this.RdsServerCount != null &&
                    this.RdsServerCount.Equals(input.RdsServerCount))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationCount != null)
                    hashCode = hashCode * 59 + this.ApplicationCount.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RdsServerCount != null)
                    hashCode = hashCode * 59 + this.RdsServerCount.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
