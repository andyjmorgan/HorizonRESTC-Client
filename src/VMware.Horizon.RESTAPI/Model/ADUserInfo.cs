/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to AD User.
    /// </summary>
    [DataContract]
    public partial class ADUserInfo :  IEquatable<ADUserInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ADUserInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ADUserInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ADUserInfo" /> class.
        /// </summary>
        /// <param name="domain">DNS name of the domain in which this user or group belongs to..</param>
        /// <param name="groupGuids">Guids of the user&#39;s groups in RFC 4122 format..</param>
        /// <param name="groupSids">List of unique SIDs of the groups, this user or group belongs to..</param>
        /// <param name="userGuid">GUID of the user in RFC 4122 format. (required).</param>
        /// <param name="userPrincipalName">User Principal name(UPN) of this user..</param>
        /// <param name="userSid">Unique SID representing this AD User. (required).</param>
        /// <param name="username">Username of this user..</param>
        public ADUserInfo(string domain = default(string), List<string> groupGuids = default(List<string>), List<string> groupSids = default(List<string>), string userGuid = default(string), string userPrincipalName = default(string), string userSid = default(string), string username = default(string))
        {
            // to ensure "userGuid" is required (not null)
            if (userGuid == null)
            {
                throw new InvalidDataException("userGuid is a required property for ADUserInfo and cannot be null");
            }
            else
            {
                this.UserGuid = userGuid;
            }
            // to ensure "userSid" is required (not null)
            if (userSid == null)
            {
                throw new InvalidDataException("userSid is a required property for ADUserInfo and cannot be null");
            }
            else
            {
                this.UserSid = userSid;
            }
            this.Domain = domain;
            this.GroupGuids = groupGuids;
            this.GroupSids = groupSids;
            this.UserPrincipalName = userPrincipalName;
            this.Username = username;
        }
        
        /// <summary>
        /// DNS name of the domain in which this user or group belongs to.
        /// </summary>
        /// <value>DNS name of the domain in which this user or group belongs to.</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// Guids of the user&#39;s groups in RFC 4122 format.
        /// </summary>
        /// <value>Guids of the user&#39;s groups in RFC 4122 format.</value>
        [DataMember(Name="group_guids", EmitDefaultValue=false)]
        public List<string> GroupGuids { get; set; }

        /// <summary>
        /// List of unique SIDs of the groups, this user or group belongs to.
        /// </summary>
        /// <value>List of unique SIDs of the groups, this user or group belongs to.</value>
        [DataMember(Name="group_sids", EmitDefaultValue=false)]
        public List<string> GroupSids { get; set; }

        /// <summary>
        /// GUID of the user in RFC 4122 format.
        /// </summary>
        /// <value>GUID of the user in RFC 4122 format.</value>
        [DataMember(Name="user_guid", EmitDefaultValue=false)]
        public string UserGuid { get; set; }

        /// <summary>
        /// User Principal name(UPN) of this user.
        /// </summary>
        /// <value>User Principal name(UPN) of this user.</value>
        [DataMember(Name="user_principal_name", EmitDefaultValue=false)]
        public string UserPrincipalName { get; set; }

        /// <summary>
        /// Unique SID representing this AD User.
        /// </summary>
        /// <value>Unique SID representing this AD User.</value>
        [DataMember(Name="user_sid", EmitDefaultValue=false)]
        public string UserSid { get; set; }

        /// <summary>
        /// Username of this user.
        /// </summary>
        /// <value>Username of this user.</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ADUserInfo {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  GroupGuids: ").Append(GroupGuids).Append("\n");
            sb.Append("  GroupSids: ").Append(GroupSids).Append("\n");
            sb.Append("  UserGuid: ").Append(UserGuid).Append("\n");
            sb.Append("  UserPrincipalName: ").Append(UserPrincipalName).Append("\n");
            sb.Append("  UserSid: ").Append(UserSid).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ADUserInfo);
        }

        /// <summary>
        /// Returns true if ADUserInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ADUserInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ADUserInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.GroupGuids == input.GroupGuids ||
                    this.GroupGuids != null &&
                    this.GroupGuids.SequenceEqual(input.GroupGuids)
                ) && 
                (
                    this.GroupSids == input.GroupSids ||
                    this.GroupSids != null &&
                    this.GroupSids.SequenceEqual(input.GroupSids)
                ) && 
                (
                    this.UserGuid == input.UserGuid ||
                    (this.UserGuid != null &&
                    this.UserGuid.Equals(input.UserGuid))
                ) && 
                (
                    this.UserPrincipalName == input.UserPrincipalName ||
                    (this.UserPrincipalName != null &&
                    this.UserPrincipalName.Equals(input.UserPrincipalName))
                ) && 
                (
                    this.UserSid == input.UserSid ||
                    (this.UserSid != null &&
                    this.UserSid.Equals(input.UserSid))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.GroupGuids != null)
                    hashCode = hashCode * 59 + this.GroupGuids.GetHashCode();
                if (this.GroupSids != null)
                    hashCode = hashCode * 59 + this.GroupSids.GetHashCode();
                if (this.UserGuid != null)
                    hashCode = hashCode * 59 + this.UserGuid.GetHashCode();
                if (this.UserPrincipalName != null)
                    hashCode = hashCode * 59 + this.UserPrincipalName.GetHashCode();
                if (this.UserSid != null)
                    hashCode = hashCode * 59 + this.UserSid.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
