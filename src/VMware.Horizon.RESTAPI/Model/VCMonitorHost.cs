/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information about the host connected to a Virtual Center.
    /// </summary>
    [DataContract]
    public partial class VCMonitorHost :  IEquatable<VCMonitorHost>, IValidatableObject
    {
        /// <summary>
        /// Status of the host connection. * CONNECTED: The host is successfully connected to Virtual Center server. * DISCONNECTED: The host is disconnected from Virtual Center server. * NOT_RESPONDING: The host is not responding.
        /// </summary>
        /// <value>Status of the host connection. * CONNECTED: The host is successfully connected to Virtual Center server. * DISCONNECTED: The host is disconnected from Virtual Center server. * NOT_RESPONDING: The host is not responding.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum CONNECTED for value: CONNECTED
            /// </summary>
            [EnumMember(Value = "CONNECTED")]
            CONNECTED = 1,
            
            /// <summary>
            /// Enum DISCONNECTED for value: DISCONNECTED
            /// </summary>
            [EnumMember(Value = "DISCONNECTED")]
            DISCONNECTED = 2,
            
            /// <summary>
            /// Enum NOTRESPONDING for value: NOT_RESPONDING
            /// </summary>
            [EnumMember(Value = "NOT_RESPONDING")]
            NOTRESPONDING = 3
        }

        /// <summary>
        /// Status of the host connection. * CONNECTED: The host is successfully connected to Virtual Center server. * DISCONNECTED: The host is disconnected from Virtual Center server. * NOT_RESPONDING: The host is not responding.
        /// </summary>
        /// <value>Status of the host connection. * CONNECTED: The host is successfully connected to Virtual Center server. * DISCONNECTED: The host is disconnected from Virtual Center server. * NOT_RESPONDING: The host is not responding.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VCMonitorHost" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VCMonitorHost() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VCMonitorHost" /> class.
        /// </summary>
        /// <param name="cpuCoreCount">Number of physical CPU cores on the host..</param>
        /// <param name="cpuMhz">CPU speed per core in Mhz. This might be an averaged value if the speed is not uniform across all cores..</param>
        /// <param name="details">Details of the ESX Host. (required).</param>
        /// <param name="memorySizeMb">The physical memory size in mega bytes..</param>
        /// <param name="status">Status of the host connection. * CONNECTED: The host is successfully connected to Virtual Center server. * DISCONNECTED: The host is disconnected from Virtual Center server. * NOT_RESPONDING: The host is not responding. (required).</param>
        public VCMonitorHost(int? cpuCoreCount = default(int?), int? cpuMhz = default(int?), VCMonitorHostDetails details = default(VCMonitorHostDetails), int? memorySizeMb = default(int?), StatusEnum status = default(StatusEnum))
        {
            // to ensure "details" is required (not null)
            if (details == null)
            {
                throw new InvalidDataException("details is a required property for VCMonitorHost and cannot be null");
            }
            else
            {
                this.Details = details;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for VCMonitorHost and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.CpuCoreCount = cpuCoreCount;
            this.CpuMhz = cpuMhz;
            this.MemorySizeMb = memorySizeMb;
        }
        
        /// <summary>
        /// Number of physical CPU cores on the host.
        /// </summary>
        /// <value>Number of physical CPU cores on the host.</value>
        [DataMember(Name="cpu_core_count", EmitDefaultValue=false)]
        public int? CpuCoreCount { get; set; }

        /// <summary>
        /// CPU speed per core in Mhz. This might be an averaged value if the speed is not uniform across all cores.
        /// </summary>
        /// <value>CPU speed per core in Mhz. This might be an averaged value if the speed is not uniform across all cores.</value>
        [DataMember(Name="cpu_mhz", EmitDefaultValue=false)]
        public int? CpuMhz { get; set; }

        /// <summary>
        /// Details of the ESX Host.
        /// </summary>
        /// <value>Details of the ESX Host.</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public VCMonitorHostDetails Details { get; set; }

        /// <summary>
        /// The physical memory size in mega bytes.
        /// </summary>
        /// <value>The physical memory size in mega bytes.</value>
        [DataMember(Name="memory_size_mb", EmitDefaultValue=false)]
        public int? MemorySizeMb { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VCMonitorHost {\n");
            sb.Append("  CpuCoreCount: ").Append(CpuCoreCount).Append("\n");
            sb.Append("  CpuMhz: ").Append(CpuMhz).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  MemorySizeMb: ").Append(MemorySizeMb).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VCMonitorHost);
        }

        /// <summary>
        /// Returns true if VCMonitorHost instances are equal
        /// </summary>
        /// <param name="input">Instance of VCMonitorHost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VCMonitorHost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CpuCoreCount == input.CpuCoreCount ||
                    (this.CpuCoreCount != null &&
                    this.CpuCoreCount.Equals(input.CpuCoreCount))
                ) && 
                (
                    this.CpuMhz == input.CpuMhz ||
                    (this.CpuMhz != null &&
                    this.CpuMhz.Equals(input.CpuMhz))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.MemorySizeMb == input.MemorySizeMb ||
                    (this.MemorySizeMb != null &&
                    this.MemorySizeMb.Equals(input.MemorySizeMb))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CpuCoreCount != null)
                    hashCode = hashCode * 59 + this.CpuCoreCount.GetHashCode();
                if (this.CpuMhz != null)
                    hashCode = hashCode * 59 + this.CpuMhz.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.MemorySizeMb != null)
                    hashCode = hashCode * 59 + this.MemorySizeMb.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
