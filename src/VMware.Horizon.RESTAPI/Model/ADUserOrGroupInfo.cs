/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to AD User or Group.
    /// </summary>
    [DataContract]
    public partial class ADUserOrGroupInfo :  IEquatable<ADUserOrGroupInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ADUserOrGroupInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ADUserOrGroupInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ADUserOrGroupInfo" /> class.
        /// </summary>
        /// <param name="container">AD container for this user or group..</param>
        /// <param name="description">Description number of this user or group. Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39;..</param>
        /// <param name="displayName">Login name with domain of this user or group..</param>
        /// <param name="distinguishedName">Active Directory distinguished name for this user or group..</param>
        /// <param name="domain">DNS name of the domain in which this user or group belongs. Supported Filters : &#39;Equals&#39;.  Also, if &#39;Or&#39; filter is used anywhere in filter string for this model class, then that &#39;Or&#39; filter should nest only &#39;Equals&#39; filter on &#39;domain&#39; field. (required).</param>
        /// <param name="email">Email address of this user or group. Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39;..</param>
        /// <param name="firstName">First name of this user or group..</param>
        /// <param name="group">Indicates if this object represents a group. This field is NOT supported in filter string. To use any filter on &#39;group&#39;, use &#39;group_only&#39; query param directly. (required).</param>
        /// <param name="groupMembershipIds">List of unique SIDs of the groups, this user or group belongs to..</param>
        /// <param name="guid">GUID of the user or group in RFC 4122 format. Supported Filters : &#39;Equals&#39;. (required).</param>
        /// <param name="id">Unique SID representing this AD User or Group. (required).</param>
        /// <param name="kioskUser">Indicates if this user or group is a \&quot;kiosk user\&quot; that supports client authentication. Client authentication is the process of supporting client devices directly logging into resources..</param>
        /// <param name="lastName">Last name of this user or group..</param>
        /// <param name="loginName">Login name of this user or group.  Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39;..</param>
        /// <param name="longDisplayName">Login name, domain and name for this user or group, else display name.</param>
        /// <param name="name">Name of this user or group.  Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39;..</param>
        /// <param name="phone">Phone number of this user. Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39;..</param>
        /// <param name="subGroupCount">Number of subgroups in this group, or 0 if not a group..</param>
        /// <param name="userCount">Number of users in this group, or 0 if not a group..</param>
        /// <param name="userDisplayName">User or group&#39;s display name. This corresponds with displayName attribute in AD..</param>
        /// <param name="userPrincipalName">User Principal name(UPN) of this user..</param>
        public ADUserOrGroupInfo(string container = default(string), string description = default(string), string displayName = default(string), string distinguishedName = default(string), string domain = default(string), string email = default(string), string firstName = default(string), bool? group = default(bool?), List<string> groupMembershipIds = default(List<string>), string guid = default(string), string id = default(string), bool? kioskUser = default(bool?), string lastName = default(string), string loginName = default(string), string longDisplayName = default(string), string name = default(string), string phone = default(string), int? subGroupCount = default(int?), int? userCount = default(int?), string userDisplayName = default(string), string userPrincipalName = default(string))
        {
            // to ensure "domain" is required (not null)
            if (domain == null)
            {
                throw new InvalidDataException("domain is a required property for ADUserOrGroupInfo and cannot be null");
            }
            else
            {
                this.Domain = domain;
            }
            // to ensure "group" is required (not null)
            if (group == null)
            {
                throw new InvalidDataException("group is a required property for ADUserOrGroupInfo and cannot be null");
            }
            else
            {
                this.Group = group;
            }
            // to ensure "guid" is required (not null)
            if (guid == null)
            {
                throw new InvalidDataException("guid is a required property for ADUserOrGroupInfo and cannot be null");
            }
            else
            {
                this.Guid = guid;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ADUserOrGroupInfo and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            this.Container = container;
            this.Description = description;
            this.DisplayName = displayName;
            this.DistinguishedName = distinguishedName;
            this.Email = email;
            this.FirstName = firstName;
            this.GroupMembershipIds = groupMembershipIds;
            this.KioskUser = kioskUser;
            this.LastName = lastName;
            this.LoginName = loginName;
            this.LongDisplayName = longDisplayName;
            this.Name = name;
            this.Phone = phone;
            this.SubGroupCount = subGroupCount;
            this.UserCount = userCount;
            this.UserDisplayName = userDisplayName;
            this.UserPrincipalName = userPrincipalName;
        }
        
        /// <summary>
        /// AD container for this user or group.
        /// </summary>
        /// <value>AD container for this user or group.</value>
        [DataMember(Name="container", EmitDefaultValue=false)]
        public string Container { get; set; }

        /// <summary>
        /// Description number of this user or group. Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39;.
        /// </summary>
        /// <value>Description number of this user or group. Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39;.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Login name with domain of this user or group.
        /// </summary>
        /// <value>Login name with domain of this user or group.</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Active Directory distinguished name for this user or group.
        /// </summary>
        /// <value>Active Directory distinguished name for this user or group.</value>
        [DataMember(Name="distinguished_name", EmitDefaultValue=false)]
        public string DistinguishedName { get; set; }

        /// <summary>
        /// DNS name of the domain in which this user or group belongs. Supported Filters : &#39;Equals&#39;.  Also, if &#39;Or&#39; filter is used anywhere in filter string for this model class, then that &#39;Or&#39; filter should nest only &#39;Equals&#39; filter on &#39;domain&#39; field.
        /// </summary>
        /// <value>DNS name of the domain in which this user or group belongs. Supported Filters : &#39;Equals&#39;.  Also, if &#39;Or&#39; filter is used anywhere in filter string for this model class, then that &#39;Or&#39; filter should nest only &#39;Equals&#39; filter on &#39;domain&#39; field.</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// Email address of this user or group. Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39;.
        /// </summary>
        /// <value>Email address of this user or group. Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39;.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// First name of this user or group.
        /// </summary>
        /// <value>First name of this user or group.</value>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Indicates if this object represents a group. This field is NOT supported in filter string. To use any filter on &#39;group&#39;, use &#39;group_only&#39; query param directly.
        /// </summary>
        /// <value>Indicates if this object represents a group. This field is NOT supported in filter string. To use any filter on &#39;group&#39;, use &#39;group_only&#39; query param directly.</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public bool? Group { get; set; }

        /// <summary>
        /// List of unique SIDs of the groups, this user or group belongs to.
        /// </summary>
        /// <value>List of unique SIDs of the groups, this user or group belongs to.</value>
        [DataMember(Name="group_membership_ids", EmitDefaultValue=false)]
        public List<string> GroupMembershipIds { get; set; }

        /// <summary>
        /// GUID of the user or group in RFC 4122 format. Supported Filters : &#39;Equals&#39;.
        /// </summary>
        /// <value>GUID of the user or group in RFC 4122 format. Supported Filters : &#39;Equals&#39;.</value>
        [DataMember(Name="guid", EmitDefaultValue=false)]
        public string Guid { get; set; }

        /// <summary>
        /// Unique SID representing this AD User or Group.
        /// </summary>
        /// <value>Unique SID representing this AD User or Group.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Indicates if this user or group is a \&quot;kiosk user\&quot; that supports client authentication. Client authentication is the process of supporting client devices directly logging into resources.
        /// </summary>
        /// <value>Indicates if this user or group is a \&quot;kiosk user\&quot; that supports client authentication. Client authentication is the process of supporting client devices directly logging into resources.</value>
        [DataMember(Name="kiosk_user", EmitDefaultValue=false)]
        public bool? KioskUser { get; set; }

        /// <summary>
        /// Last name of this user or group.
        /// </summary>
        /// <value>Last name of this user or group.</value>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Login name of this user or group.  Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39;.
        /// </summary>
        /// <value>Login name of this user or group.  Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39;.</value>
        [DataMember(Name="login_name", EmitDefaultValue=false)]
        public string LoginName { get; set; }

        /// <summary>
        /// Login name, domain and name for this user or group, else display name
        /// </summary>
        /// <value>Login name, domain and name for this user or group, else display name</value>
        [DataMember(Name="long_display_name", EmitDefaultValue=false)]
        public string LongDisplayName { get; set; }

        /// <summary>
        /// Name of this user or group.  Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39;.
        /// </summary>
        /// <value>Name of this user or group.  Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39;.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Phone number of this user. Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39;.
        /// </summary>
        /// <value>Phone number of this user. Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39;.</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Number of subgroups in this group, or 0 if not a group.
        /// </summary>
        /// <value>Number of subgroups in this group, or 0 if not a group.</value>
        [DataMember(Name="sub_group_count", EmitDefaultValue=false)]
        public int? SubGroupCount { get; set; }

        /// <summary>
        /// Number of users in this group, or 0 if not a group.
        /// </summary>
        /// <value>Number of users in this group, or 0 if not a group.</value>
        [DataMember(Name="user_count", EmitDefaultValue=false)]
        public int? UserCount { get; set; }

        /// <summary>
        /// User or group&#39;s display name. This corresponds with displayName attribute in AD.
        /// </summary>
        /// <value>User or group&#39;s display name. This corresponds with displayName attribute in AD.</value>
        [DataMember(Name="user_display_name", EmitDefaultValue=false)]
        public string UserDisplayName { get; set; }

        /// <summary>
        /// User Principal name(UPN) of this user.
        /// </summary>
        /// <value>User Principal name(UPN) of this user.</value>
        [DataMember(Name="user_principal_name", EmitDefaultValue=false)]
        public string UserPrincipalName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ADUserOrGroupInfo {\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DistinguishedName: ").Append(DistinguishedName).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  GroupMembershipIds: ").Append(GroupMembershipIds).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  KioskUser: ").Append(KioskUser).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LoginName: ").Append(LoginName).Append("\n");
            sb.Append("  LongDisplayName: ").Append(LongDisplayName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  SubGroupCount: ").Append(SubGroupCount).Append("\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("  UserDisplayName: ").Append(UserDisplayName).Append("\n");
            sb.Append("  UserPrincipalName: ").Append(UserPrincipalName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ADUserOrGroupInfo);
        }

        /// <summary>
        /// Returns true if ADUserOrGroupInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ADUserOrGroupInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ADUserOrGroupInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Container == input.Container ||
                    (this.Container != null &&
                    this.Container.Equals(input.Container))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.DistinguishedName == input.DistinguishedName ||
                    (this.DistinguishedName != null &&
                    this.DistinguishedName.Equals(input.DistinguishedName))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.GroupMembershipIds == input.GroupMembershipIds ||
                    this.GroupMembershipIds != null &&
                    this.GroupMembershipIds.SequenceEqual(input.GroupMembershipIds)
                ) && 
                (
                    this.Guid == input.Guid ||
                    (this.Guid != null &&
                    this.Guid.Equals(input.Guid))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.KioskUser == input.KioskUser ||
                    (this.KioskUser != null &&
                    this.KioskUser.Equals(input.KioskUser))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.LoginName == input.LoginName ||
                    (this.LoginName != null &&
                    this.LoginName.Equals(input.LoginName))
                ) && 
                (
                    this.LongDisplayName == input.LongDisplayName ||
                    (this.LongDisplayName != null &&
                    this.LongDisplayName.Equals(input.LongDisplayName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.SubGroupCount == input.SubGroupCount ||
                    (this.SubGroupCount != null &&
                    this.SubGroupCount.Equals(input.SubGroupCount))
                ) && 
                (
                    this.UserCount == input.UserCount ||
                    (this.UserCount != null &&
                    this.UserCount.Equals(input.UserCount))
                ) && 
                (
                    this.UserDisplayName == input.UserDisplayName ||
                    (this.UserDisplayName != null &&
                    this.UserDisplayName.Equals(input.UserDisplayName))
                ) && 
                (
                    this.UserPrincipalName == input.UserPrincipalName ||
                    (this.UserPrincipalName != null &&
                    this.UserPrincipalName.Equals(input.UserPrincipalName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Container != null)
                    hashCode = hashCode * 59 + this.Container.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.DistinguishedName != null)
                    hashCode = hashCode * 59 + this.DistinguishedName.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.GroupMembershipIds != null)
                    hashCode = hashCode * 59 + this.GroupMembershipIds.GetHashCode();
                if (this.Guid != null)
                    hashCode = hashCode * 59 + this.Guid.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.KioskUser != null)
                    hashCode = hashCode * 59 + this.KioskUser.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.LoginName != null)
                    hashCode = hashCode * 59 + this.LoginName.GetHashCode();
                if (this.LongDisplayName != null)
                    hashCode = hashCode * 59 + this.LongDisplayName.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.SubGroupCount != null)
                    hashCode = hashCode * 59 + this.SubGroupCount.GetHashCode();
                if (this.UserCount != null)
                    hashCode = hashCode * 59 + this.UserCount.GetHashCode();
                if (this.UserDisplayName != null)
                    hashCode = hashCode * 59 + this.UserDisplayName.GetHashCode();
                if (this.UserPrincipalName != null)
                    hashCode = hashCode * 59 + this.UserPrincipalName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
