/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information required to delete machines.
    /// </summary>
    [DataContract]
    public partial class MachineDeleteSpec :  IEquatable<MachineDeleteSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineDeleteSpec" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MachineDeleteSpec() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineDeleteSpec" /> class.
        /// </summary>
        /// <param name="machineDeleteData">The specification applicable when deleting machines..</param>
        /// <param name="machineIds">Machine Ids representing the machines to be deleted. (required).</param>
        public MachineDeleteSpec(MachineDeleteData machineDeleteData = default(MachineDeleteData), List<string> machineIds = default(List<string>))
        {
            // to ensure "machineIds" is required (not null)
            if (machineIds == null)
            {
                throw new InvalidDataException("machineIds is a required property for MachineDeleteSpec and cannot be null");
            }
            else
            {
                this.MachineIds = machineIds;
            }
            this.MachineDeleteData = machineDeleteData;
        }
        
        /// <summary>
        /// The specification applicable when deleting machines.
        /// </summary>
        /// <value>The specification applicable when deleting machines.</value>
        [DataMember(Name="machine_delete_data", EmitDefaultValue=false)]
        public MachineDeleteData MachineDeleteData { get; set; }

        /// <summary>
        /// Machine Ids representing the machines to be deleted.
        /// </summary>
        /// <value>Machine Ids representing the machines to be deleted.</value>
        [DataMember(Name="machine_ids", EmitDefaultValue=false)]
        public List<string> MachineIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MachineDeleteSpec {\n");
            sb.Append("  MachineDeleteData: ").Append(MachineDeleteData).Append("\n");
            sb.Append("  MachineIds: ").Append(MachineIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MachineDeleteSpec);
        }

        /// <summary>
        /// Returns true if MachineDeleteSpec instances are equal
        /// </summary>
        /// <param name="input">Instance of MachineDeleteSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MachineDeleteSpec input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MachineDeleteData == input.MachineDeleteData ||
                    (this.MachineDeleteData != null &&
                    this.MachineDeleteData.Equals(input.MachineDeleteData))
                ) && 
                (
                    this.MachineIds == input.MachineIds ||
                    this.MachineIds != null &&
                    this.MachineIds.SequenceEqual(input.MachineIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MachineDeleteData != null)
                    hashCode = hashCode * 59 + this.MachineDeleteData.GetHashCode();
                if (this.MachineIds != null)
                    hashCode = hashCode * 59 + this.MachineIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
