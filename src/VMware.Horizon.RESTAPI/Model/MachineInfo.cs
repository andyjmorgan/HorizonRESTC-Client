/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to a Machine.&lt;br&gt;List API returning this summary information can use search filter query to filter on specific fields supported by filters.&lt;br&gt; Supported Filters : &#39;And&#39;, &#39;Or&#39;, &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;Contains&#39; and &#39;EndsWith&#39;.&lt;br&gt;See the field description to know the filter types it supports.
    /// </summary>
    [DataContract]
    public partial class MachineInfo :  IEquatable<MachineInfo>, IValidatableObject
    {
        /// <summary>
        /// The current JMS message security mode used by this machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * DISABLED: Message security mode is disabled. * MIXED: Message security mode is enabled but not enforced. * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components. * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode.
        /// </summary>
        /// <value>The current JMS message security mode used by this machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * DISABLED: Message security mode is disabled. * MIXED: Message security mode is enabled but not enforced. * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components. * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageSecurityModeEnum
        {
            
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 1,
            
            /// <summary>
            /// Enum MIXED for value: MIXED
            /// </summary>
            [EnumMember(Value = "MIXED")]
            MIXED = 2,
            
            /// <summary>
            /// Enum ENABLED for value: ENABLED
            /// </summary>
            [EnumMember(Value = "ENABLED")]
            ENABLED = 3,
            
            /// <summary>
            /// Enum ENHANCED for value: ENHANCED
            /// </summary>
            [EnumMember(Value = "ENHANCED")]
            ENHANCED = 4
        }

        /// <summary>
        /// The current JMS message security mode used by this machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * DISABLED: Message security mode is disabled. * MIXED: Message security mode is enabled but not enforced. * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components. * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode.
        /// </summary>
        /// <value>The current JMS message security mode used by this machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * DISABLED: Message security mode is disabled. * MIXED: Message security mode is enabled but not enforced. * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components. * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode.</value>
        [DataMember(Name="message_security_mode", EmitDefaultValue=false)]
        public MessageSecurityModeEnum MessageSecurityMode { get; set; }
        /// <summary>
        /// The guest operating system. * UNKNOWN: Unknown * WINDOWS_XP: Windows XP * WINDOWS_VISTA: Windows Vista * WINDOWS_7: Windows 7 * WINDOWS_8: Windows 8 * WINDOWS_10: Windows 10 * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_OTHER: Linux (other) * LINUX_SERVER_OTHER: Linux server (other) * LINUX_UBUNTU: Linux (Ubuntu) * LINUX_RHEL: Linux (Red Hat Enterprise) * LINUX_SUSE: Linux (Suse) * LINUX_CENTOS: Linux (CentOS)
        /// </summary>
        /// <value>The guest operating system. * UNKNOWN: Unknown * WINDOWS_XP: Windows XP * WINDOWS_VISTA: Windows Vista * WINDOWS_7: Windows 7 * WINDOWS_8: Windows 8 * WINDOWS_10: Windows 10 * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_OTHER: Linux (other) * LINUX_SERVER_OTHER: Linux server (other) * LINUX_UBUNTU: Linux (Ubuntu) * LINUX_RHEL: Linux (Red Hat Enterprise) * LINUX_SUSE: Linux (Suse) * LINUX_CENTOS: Linux (CentOS)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatingSystemEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,
            
            /// <summary>
            /// Enum WINDOWSXP for value: WINDOWS_XP
            /// </summary>
            [EnumMember(Value = "WINDOWS_XP")]
            WINDOWSXP = 2,
            
            /// <summary>
            /// Enum WINDOWSVISTA for value: WINDOWS_VISTA
            /// </summary>
            [EnumMember(Value = "WINDOWS_VISTA")]
            WINDOWSVISTA = 3,
            
            /// <summary>
            /// Enum WINDOWS7 for value: WINDOWS_7
            /// </summary>
            [EnumMember(Value = "WINDOWS_7")]
            WINDOWS7 = 4,
            
            /// <summary>
            /// Enum WINDOWS8 for value: WINDOWS_8
            /// </summary>
            [EnumMember(Value = "WINDOWS_8")]
            WINDOWS8 = 5,
            
            /// <summary>
            /// Enum WINDOWS10 for value: WINDOWS_10
            /// </summary>
            [EnumMember(Value = "WINDOWS_10")]
            WINDOWS10 = 6,
            
            /// <summary>
            /// Enum WINDOWSSERVER2003 for value: WINDOWS_SERVER_2003
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2003")]
            WINDOWSSERVER2003 = 7,
            
            /// <summary>
            /// Enum WINDOWSSERVER2008 for value: WINDOWS_SERVER_2008
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2008")]
            WINDOWSSERVER2008 = 8,
            
            /// <summary>
            /// Enum WINDOWSSERVER2008R2 for value: WINDOWS_SERVER_2008_R2
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2008_R2")]
            WINDOWSSERVER2008R2 = 9,
            
            /// <summary>
            /// Enum WINDOWSSERVER2012 for value: WINDOWS_SERVER_2012
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2012")]
            WINDOWSSERVER2012 = 10,
            
            /// <summary>
            /// Enum WINDOWSSERVER2012R2 for value: WINDOWS_SERVER_2012_R2
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2012_R2")]
            WINDOWSSERVER2012R2 = 11,
            
            /// <summary>
            /// Enum WINDOWSSERVER2016ORABOVE for value: WINDOWS_SERVER_2016_OR_ABOVE
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER_2016_OR_ABOVE")]
            WINDOWSSERVER2016ORABOVE = 12,
            
            /// <summary>
            /// Enum LINUXOTHER for value: LINUX_OTHER
            /// </summary>
            [EnumMember(Value = "LINUX_OTHER")]
            LINUXOTHER = 13,
            
            /// <summary>
            /// Enum LINUXSERVEROTHER for value: LINUX_SERVER_OTHER
            /// </summary>
            [EnumMember(Value = "LINUX_SERVER_OTHER")]
            LINUXSERVEROTHER = 14,
            
            /// <summary>
            /// Enum LINUXUBUNTU for value: LINUX_UBUNTU
            /// </summary>
            [EnumMember(Value = "LINUX_UBUNTU")]
            LINUXUBUNTU = 15,
            
            /// <summary>
            /// Enum LINUXRHEL for value: LINUX_RHEL
            /// </summary>
            [EnumMember(Value = "LINUX_RHEL")]
            LINUXRHEL = 16,
            
            /// <summary>
            /// Enum LINUXSUSE for value: LINUX_SUSE
            /// </summary>
            [EnumMember(Value = "LINUX_SUSE")]
            LINUXSUSE = 17,
            
            /// <summary>
            /// Enum LINUXCENTOS for value: LINUX_CENTOS
            /// </summary>
            [EnumMember(Value = "LINUX_CENTOS")]
            LINUXCENTOS = 18
        }

        /// <summary>
        /// The guest operating system. * UNKNOWN: Unknown * WINDOWS_XP: Windows XP * WINDOWS_VISTA: Windows Vista * WINDOWS_7: Windows 7 * WINDOWS_8: Windows 8 * WINDOWS_10: Windows 10 * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_OTHER: Linux (other) * LINUX_SERVER_OTHER: Linux server (other) * LINUX_UBUNTU: Linux (Ubuntu) * LINUX_RHEL: Linux (Red Hat Enterprise) * LINUX_SUSE: Linux (Suse) * LINUX_CENTOS: Linux (CentOS)
        /// </summary>
        /// <value>The guest operating system. * UNKNOWN: Unknown * WINDOWS_XP: Windows XP * WINDOWS_VISTA: Windows Vista * WINDOWS_7: Windows 7 * WINDOWS_8: Windows 8 * WINDOWS_10: Windows 10 * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_OTHER: Linux (other) * LINUX_SERVER_OTHER: Linux server (other) * LINUX_UBUNTU: Linux (Ubuntu) * LINUX_RHEL: Linux (Red Hat Enterprise) * LINUX_SUSE: Linux (Suse) * LINUX_CENTOS: Linux (CentOS)</value>
        [DataMember(Name="operating_system", EmitDefaultValue=false)]
        public OperatingSystemEnum OperatingSystem { get; set; }
        /// <summary>
        /// The guest operating system architecture. * UNKNOWN: Operating System cannot be determined. * BIT_32: 32 bit Operating System Architecture. * BIT_64: 64 bit Operating System Architecture.
        /// </summary>
        /// <value>The guest operating system architecture. * UNKNOWN: Operating System cannot be determined. * BIT_32: 32 bit Operating System Architecture. * BIT_64: 64 bit Operating System Architecture.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatingSystemArchitectureEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,
            
            /// <summary>
            /// Enum BIT32 for value: BIT_32
            /// </summary>
            [EnumMember(Value = "BIT_32")]
            BIT32 = 2,
            
            /// <summary>
            /// Enum BIT64 for value: BIT_64
            /// </summary>
            [EnumMember(Value = "BIT_64")]
            BIT64 = 3
        }

        /// <summary>
        /// The guest operating system architecture. * UNKNOWN: Operating System cannot be determined. * BIT_32: 32 bit Operating System Architecture. * BIT_64: 64 bit Operating System Architecture.
        /// </summary>
        /// <value>The guest operating system architecture. * UNKNOWN: Operating System cannot be determined. * BIT_32: 32 bit Operating System Architecture. * BIT_64: 64 bit Operating System Architecture.</value>
        [DataMember(Name="operating_system_architecture", EmitDefaultValue=false)]
        public OperatingSystemArchitectureEnum OperatingSystemArchitecture { get; set; }
        /// <summary>
        /// Horizon Agent pairing state. * NOT_AVAILABLE: Agent pairing state is not available. * IN_PAIRING: Agent pairing with Horizon Connection Server is in progress. * PAIRED_AND_SECURED: Agent is paired and secured with a Horizon Connection Server.
        /// </summary>
        /// <value>Horizon Agent pairing state. * NOT_AVAILABLE: Agent pairing state is not available. * IN_PAIRING: Agent pairing with Horizon Connection Server is in progress. * PAIRED_AND_SECURED: Agent is paired and secured with a Horizon Connection Server.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PairingStateEnum
        {
            
            /// <summary>
            /// Enum NOTAVAILABLE for value: NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "NOT_AVAILABLE")]
            NOTAVAILABLE = 1,
            
            /// <summary>
            /// Enum INPAIRING for value: IN_PAIRING
            /// </summary>
            [EnumMember(Value = "IN_PAIRING")]
            INPAIRING = 2,
            
            /// <summary>
            /// Enum PAIREDANDSECURED for value: PAIRED_AND_SECURED
            /// </summary>
            [EnumMember(Value = "PAIRED_AND_SECURED")]
            PAIREDANDSECURED = 3
        }

        /// <summary>
        /// Horizon Agent pairing state. * NOT_AVAILABLE: Agent pairing state is not available. * IN_PAIRING: Agent pairing with Horizon Connection Server is in progress. * PAIRED_AND_SECURED: Agent is paired and secured with a Horizon Connection Server.
        /// </summary>
        /// <value>Horizon Agent pairing state. * NOT_AVAILABLE: Agent pairing state is not available. * IN_PAIRING: Agent pairing with Horizon Connection Server is in progress. * PAIRED_AND_SECURED: Agent is paired and secured with a Horizon Connection Server.</value>
        [DataMember(Name="pairing_state", EmitDefaultValue=false)]
        public PairingStateEnum? PairingState { get; set; }
        /// <summary>
        /// The state of the machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * PROVISIONING: The machine is being provisioned. * PROVISIONING_ERROR: An error occurred during provisioning. * WAITING_FOR_AGENT: Horizon Connection Server is waiting to establish communication with Horizon Agent for one of these cases - a virtual machine in a manual desktop pool, unmanaged machine or RDS server. * CUSTOMIZING: The machine which is from an automated desktop pool is being customized after provisioning. * DELETING: The machine is marked for deletion. * MAINTENANCE: The machine is in maintenance mode. Users cannot log in or use the machine. * ERROR: An unknown error occurred in the machine. * PROVISIONED: The machine is powered off or suspended. * AGENT_UNREACHABLE: Horizon Connection Server cannot establish communication with Horizon Agent on the machine. * UNASSIGNED_USER_CONNECTED: A user other than the assigned user is logged in to the machine in a dedicated desktop pool. * CONNECTED: The machine is in an active session and has an active connection to a Horizon client. * UNASSIGNED_USER_DISCONNECTED: A user other than the assigned user is logged in and disconnected from the machine in a dedicated desktop pool. * DISCONNECTED: The machine is in an active session, but it is disconnected from the Horizon client. * AGENT_ERROR_STARTUP_IN_PROGRESS: Horizon Agent has started on the machine, but other required services such as the display protocol are still starting. * AGENT_ERROR_DISABLED: Horizon Agent is disabled. * AGENT_ERROR_INVALID_IP: Horizon Agent has an invalid IP address. * AGENT_ERROR_NEEDS_REBOOT: Horizon Agent needs reboot. * AGENT_ERROR_PROTOCOL_FAILURE: Protocol such as BLAST, RDP or PCoIP is not enabled. * AGENT_CONFIG_ERROR: The Remote Desktop Services role is not enabled on the windows server. * AGENT_DRAIN_MODE: RDS host is configured for drain mode. New connections are currently disabled. * AGENT_DRAIN_UNTIL_RESTART: RDS host is configured for drain-until-restart mode. * ALREADY_USED: The machine is configured to have only one session which is currently in progress and cannot accept new sessions. * AVAILABLE: The machine is powered on and ready for active connections. * IN_PROGRESS: There is a machine operation in progress. * DISABLED: The machine is disabled. * DISABLE_IN_PROGRESS: Disabled Horizon Connection Server still has some Horizon brokered sessions. It can still accept re-connections. * VALIDATING: The Horizon Connection Server is synchronizing state information with the agent. * UNKNOWN: Could not determine the state of the machine.
        /// </summary>
        /// <value>The state of the machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * PROVISIONING: The machine is being provisioned. * PROVISIONING_ERROR: An error occurred during provisioning. * WAITING_FOR_AGENT: Horizon Connection Server is waiting to establish communication with Horizon Agent for one of these cases - a virtual machine in a manual desktop pool, unmanaged machine or RDS server. * CUSTOMIZING: The machine which is from an automated desktop pool is being customized after provisioning. * DELETING: The machine is marked for deletion. * MAINTENANCE: The machine is in maintenance mode. Users cannot log in or use the machine. * ERROR: An unknown error occurred in the machine. * PROVISIONED: The machine is powered off or suspended. * AGENT_UNREACHABLE: Horizon Connection Server cannot establish communication with Horizon Agent on the machine. * UNASSIGNED_USER_CONNECTED: A user other than the assigned user is logged in to the machine in a dedicated desktop pool. * CONNECTED: The machine is in an active session and has an active connection to a Horizon client. * UNASSIGNED_USER_DISCONNECTED: A user other than the assigned user is logged in and disconnected from the machine in a dedicated desktop pool. * DISCONNECTED: The machine is in an active session, but it is disconnected from the Horizon client. * AGENT_ERROR_STARTUP_IN_PROGRESS: Horizon Agent has started on the machine, but other required services such as the display protocol are still starting. * AGENT_ERROR_DISABLED: Horizon Agent is disabled. * AGENT_ERROR_INVALID_IP: Horizon Agent has an invalid IP address. * AGENT_ERROR_NEEDS_REBOOT: Horizon Agent needs reboot. * AGENT_ERROR_PROTOCOL_FAILURE: Protocol such as BLAST, RDP or PCoIP is not enabled. * AGENT_CONFIG_ERROR: The Remote Desktop Services role is not enabled on the windows server. * AGENT_DRAIN_MODE: RDS host is configured for drain mode. New connections are currently disabled. * AGENT_DRAIN_UNTIL_RESTART: RDS host is configured for drain-until-restart mode. * ALREADY_USED: The machine is configured to have only one session which is currently in progress and cannot accept new sessions. * AVAILABLE: The machine is powered on and ready for active connections. * IN_PROGRESS: There is a machine operation in progress. * DISABLED: The machine is disabled. * DISABLE_IN_PROGRESS: Disabled Horizon Connection Server still has some Horizon brokered sessions. It can still accept re-connections. * VALIDATING: The Horizon Connection Server is synchronizing state information with the agent. * UNKNOWN: Could not determine the state of the machine.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum PROVISIONING for value: PROVISIONING
            /// </summary>
            [EnumMember(Value = "PROVISIONING")]
            PROVISIONING = 1,
            
            /// <summary>
            /// Enum PROVISIONINGERROR for value: PROVISIONING_ERROR
            /// </summary>
            [EnumMember(Value = "PROVISIONING_ERROR")]
            PROVISIONINGERROR = 2,
            
            /// <summary>
            /// Enum WAITINGFORAGENT for value: WAITING_FOR_AGENT
            /// </summary>
            [EnumMember(Value = "WAITING_FOR_AGENT")]
            WAITINGFORAGENT = 3,
            
            /// <summary>
            /// Enum CUSTOMIZING for value: CUSTOMIZING
            /// </summary>
            [EnumMember(Value = "CUSTOMIZING")]
            CUSTOMIZING = 4,
            
            /// <summary>
            /// Enum DELETING for value: DELETING
            /// </summary>
            [EnumMember(Value = "DELETING")]
            DELETING = 5,
            
            /// <summary>
            /// Enum MAINTENANCE for value: MAINTENANCE
            /// </summary>
            [EnumMember(Value = "MAINTENANCE")]
            MAINTENANCE = 6,
            
            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 7,
            
            /// <summary>
            /// Enum PROVISIONED for value: PROVISIONED
            /// </summary>
            [EnumMember(Value = "PROVISIONED")]
            PROVISIONED = 8,
            
            /// <summary>
            /// Enum AGENTUNREACHABLE for value: AGENT_UNREACHABLE
            /// </summary>
            [EnumMember(Value = "AGENT_UNREACHABLE")]
            AGENTUNREACHABLE = 9,
            
            /// <summary>
            /// Enum UNASSIGNEDUSERCONNECTED for value: UNASSIGNED_USER_CONNECTED
            /// </summary>
            [EnumMember(Value = "UNASSIGNED_USER_CONNECTED")]
            UNASSIGNEDUSERCONNECTED = 10,
            
            /// <summary>
            /// Enum CONNECTED for value: CONNECTED
            /// </summary>
            [EnumMember(Value = "CONNECTED")]
            CONNECTED = 11,
            
            /// <summary>
            /// Enum UNASSIGNEDUSERDISCONNECTED for value: UNASSIGNED_USER_DISCONNECTED
            /// </summary>
            [EnumMember(Value = "UNASSIGNED_USER_DISCONNECTED")]
            UNASSIGNEDUSERDISCONNECTED = 12,
            
            /// <summary>
            /// Enum DISCONNECTED for value: DISCONNECTED
            /// </summary>
            [EnumMember(Value = "DISCONNECTED")]
            DISCONNECTED = 13,
            
            /// <summary>
            /// Enum AGENTERRORSTARTUPINPROGRESS for value: AGENT_ERROR_STARTUP_IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "AGENT_ERROR_STARTUP_IN_PROGRESS")]
            AGENTERRORSTARTUPINPROGRESS = 14,
            
            /// <summary>
            /// Enum AGENTERRORDISABLED for value: AGENT_ERROR_DISABLED
            /// </summary>
            [EnumMember(Value = "AGENT_ERROR_DISABLED")]
            AGENTERRORDISABLED = 15,
            
            /// <summary>
            /// Enum AGENTERRORINVALIDIP for value: AGENT_ERROR_INVALID_IP
            /// </summary>
            [EnumMember(Value = "AGENT_ERROR_INVALID_IP")]
            AGENTERRORINVALIDIP = 16,
            
            /// <summary>
            /// Enum AGENTERRORNEEDSREBOOT for value: AGENT_ERROR_NEEDS_REBOOT
            /// </summary>
            [EnumMember(Value = "AGENT_ERROR_NEEDS_REBOOT")]
            AGENTERRORNEEDSREBOOT = 17,
            
            /// <summary>
            /// Enum AGENTERRORPROTOCOLFAILURE for value: AGENT_ERROR_PROTOCOL_FAILURE
            /// </summary>
            [EnumMember(Value = "AGENT_ERROR_PROTOCOL_FAILURE")]
            AGENTERRORPROTOCOLFAILURE = 18,
            
            /// <summary>
            /// Enum AGENTCONFIGERROR for value: AGENT_CONFIG_ERROR
            /// </summary>
            [EnumMember(Value = "AGENT_CONFIG_ERROR")]
            AGENTCONFIGERROR = 19,
            
            /// <summary>
            /// Enum AGENTDRAINMODE for value: AGENT_DRAIN_MODE
            /// </summary>
            [EnumMember(Value = "AGENT_DRAIN_MODE")]
            AGENTDRAINMODE = 20,
            
            /// <summary>
            /// Enum AGENTDRAINUNTILRESTART for value: AGENT_DRAIN_UNTIL_RESTART
            /// </summary>
            [EnumMember(Value = "AGENT_DRAIN_UNTIL_RESTART")]
            AGENTDRAINUNTILRESTART = 21,
            
            /// <summary>
            /// Enum ALREADYUSED for value: ALREADY_USED
            /// </summary>
            [EnumMember(Value = "ALREADY_USED")]
            ALREADYUSED = 22,
            
            /// <summary>
            /// Enum AVAILABLE for value: AVAILABLE
            /// </summary>
            [EnumMember(Value = "AVAILABLE")]
            AVAILABLE = 23,
            
            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 24,
            
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 25,
            
            /// <summary>
            /// Enum DISABLEINPROGRESS for value: DISABLE_IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "DISABLE_IN_PROGRESS")]
            DISABLEINPROGRESS = 26,
            
            /// <summary>
            /// Enum VALIDATING for value: VALIDATING
            /// </summary>
            [EnumMember(Value = "VALIDATING")]
            VALIDATING = 27,
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 28
        }

        /// <summary>
        /// The state of the machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * PROVISIONING: The machine is being provisioned. * PROVISIONING_ERROR: An error occurred during provisioning. * WAITING_FOR_AGENT: Horizon Connection Server is waiting to establish communication with Horizon Agent for one of these cases - a virtual machine in a manual desktop pool, unmanaged machine or RDS server. * CUSTOMIZING: The machine which is from an automated desktop pool is being customized after provisioning. * DELETING: The machine is marked for deletion. * MAINTENANCE: The machine is in maintenance mode. Users cannot log in or use the machine. * ERROR: An unknown error occurred in the machine. * PROVISIONED: The machine is powered off or suspended. * AGENT_UNREACHABLE: Horizon Connection Server cannot establish communication with Horizon Agent on the machine. * UNASSIGNED_USER_CONNECTED: A user other than the assigned user is logged in to the machine in a dedicated desktop pool. * CONNECTED: The machine is in an active session and has an active connection to a Horizon client. * UNASSIGNED_USER_DISCONNECTED: A user other than the assigned user is logged in and disconnected from the machine in a dedicated desktop pool. * DISCONNECTED: The machine is in an active session, but it is disconnected from the Horizon client. * AGENT_ERROR_STARTUP_IN_PROGRESS: Horizon Agent has started on the machine, but other required services such as the display protocol are still starting. * AGENT_ERROR_DISABLED: Horizon Agent is disabled. * AGENT_ERROR_INVALID_IP: Horizon Agent has an invalid IP address. * AGENT_ERROR_NEEDS_REBOOT: Horizon Agent needs reboot. * AGENT_ERROR_PROTOCOL_FAILURE: Protocol such as BLAST, RDP or PCoIP is not enabled. * AGENT_CONFIG_ERROR: The Remote Desktop Services role is not enabled on the windows server. * AGENT_DRAIN_MODE: RDS host is configured for drain mode. New connections are currently disabled. * AGENT_DRAIN_UNTIL_RESTART: RDS host is configured for drain-until-restart mode. * ALREADY_USED: The machine is configured to have only one session which is currently in progress and cannot accept new sessions. * AVAILABLE: The machine is powered on and ready for active connections. * IN_PROGRESS: There is a machine operation in progress. * DISABLED: The machine is disabled. * DISABLE_IN_PROGRESS: Disabled Horizon Connection Server still has some Horizon brokered sessions. It can still accept re-connections. * VALIDATING: The Horizon Connection Server is synchronizing state information with the agent. * UNKNOWN: Could not determine the state of the machine.
        /// </summary>
        /// <value>The state of the machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * PROVISIONING: The machine is being provisioned. * PROVISIONING_ERROR: An error occurred during provisioning. * WAITING_FOR_AGENT: Horizon Connection Server is waiting to establish communication with Horizon Agent for one of these cases - a virtual machine in a manual desktop pool, unmanaged machine or RDS server. * CUSTOMIZING: The machine which is from an automated desktop pool is being customized after provisioning. * DELETING: The machine is marked for deletion. * MAINTENANCE: The machine is in maintenance mode. Users cannot log in or use the machine. * ERROR: An unknown error occurred in the machine. * PROVISIONED: The machine is powered off or suspended. * AGENT_UNREACHABLE: Horizon Connection Server cannot establish communication with Horizon Agent on the machine. * UNASSIGNED_USER_CONNECTED: A user other than the assigned user is logged in to the machine in a dedicated desktop pool. * CONNECTED: The machine is in an active session and has an active connection to a Horizon client. * UNASSIGNED_USER_DISCONNECTED: A user other than the assigned user is logged in and disconnected from the machine in a dedicated desktop pool. * DISCONNECTED: The machine is in an active session, but it is disconnected from the Horizon client. * AGENT_ERROR_STARTUP_IN_PROGRESS: Horizon Agent has started on the machine, but other required services such as the display protocol are still starting. * AGENT_ERROR_DISABLED: Horizon Agent is disabled. * AGENT_ERROR_INVALID_IP: Horizon Agent has an invalid IP address. * AGENT_ERROR_NEEDS_REBOOT: Horizon Agent needs reboot. * AGENT_ERROR_PROTOCOL_FAILURE: Protocol such as BLAST, RDP or PCoIP is not enabled. * AGENT_CONFIG_ERROR: The Remote Desktop Services role is not enabled on the windows server. * AGENT_DRAIN_MODE: RDS host is configured for drain mode. New connections are currently disabled. * AGENT_DRAIN_UNTIL_RESTART: RDS host is configured for drain-until-restart mode. * ALREADY_USED: The machine is configured to have only one session which is currently in progress and cannot accept new sessions. * AVAILABLE: The machine is powered on and ready for active connections. * IN_PROGRESS: There is a machine operation in progress. * DISABLED: The machine is disabled. * DISABLE_IN_PROGRESS: Disabled Horizon Connection Server still has some Horizon brokered sessions. It can still accept re-connections. * VALIDATING: The Horizon Connection Server is synchronizing state information with the agent. * UNKNOWN: Could not determine the state of the machine.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// The type of machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * MANAGED_MACHINE: The machine is a managed virtual machine. * UNMANAGED_MACHINE: The machine is an unmanaged physical or virtual machine.
        /// </summary>
        /// <value>The type of machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * MANAGED_MACHINE: The machine is a managed virtual machine. * UNMANAGED_MACHINE: The machine is an unmanaged physical or virtual machine.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum MANAGEDMACHINE for value: MANAGED_MACHINE
            /// </summary>
            [EnumMember(Value = "MANAGED_MACHINE")]
            MANAGEDMACHINE = 1,
            
            /// <summary>
            /// Enum UNMANAGEDMACHINE for value: UNMANAGED_MACHINE
            /// </summary>
            [EnumMember(Value = "UNMANAGED_MACHINE")]
            UNMANAGEDMACHINE = 2
        }

        /// <summary>
        /// The type of machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * MANAGED_MACHINE: The machine is a managed virtual machine. * UNMANAGED_MACHINE: The machine is an unmanaged physical or virtual machine.
        /// </summary>
        /// <value>The type of machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * MANAGED_MACHINE: The machine is a managed virtual machine. * UNMANAGED_MACHINE: The machine is an unmanaged physical or virtual machine.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MachineInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineInfo" /> class.
        /// </summary>
        /// <param name="agentBuildNumber">The Horizon Agent build number.&lt;br&gt;Supported Filters : &#39;Equals&#39;..</param>
        /// <param name="agentVersion">The Horizon Agent version.&lt;br&gt;Supported Filters : &#39;Equals&#39;..</param>
        /// <param name="attemptedTheftByConnectionServer">Names of the Horizon Connection Servers that attempted theft of pairing for this Agent..</param>
        /// <param name="configuredByConnectionServer">Names of the Horizon Connection Servers the Horizon Agent is paired with..</param>
        /// <param name="desktopPoolId">The id of the Desktop Pool that the machine belongs to.&lt;br&gt;Supported Filters : &#39;Equals&#39;. (required).</param>
        /// <param name="dnsName">DNS name of the machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39; and &#39;Contains&#39;..</param>
        /// <param name="id">Unique ID representing machine. (required).</param>
        /// <param name="managedMachineData">Information applicable only to Managed Machines..</param>
        /// <param name="messageSecurityEnhancedModeSupported">Indicates whether ENHANCED message security mode is currently supported by this machine. (required).</param>
        /// <param name="messageSecurityMode">The current JMS message security mode used by this machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * DISABLED: Message security mode is disabled. * MIXED: Message security mode is enabled but not enforced. * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components. * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode. (required).</param>
        /// <param name="name">Name of the machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;. (required).</param>
        /// <param name="operatingSystem">The guest operating system. * UNKNOWN: Unknown * WINDOWS_XP: Windows XP * WINDOWS_VISTA: Windows Vista * WINDOWS_7: Windows 7 * WINDOWS_8: Windows 8 * WINDOWS_10: Windows 10 * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_OTHER: Linux (other) * LINUX_SERVER_OTHER: Linux server (other) * LINUX_UBUNTU: Linux (Ubuntu) * LINUX_RHEL: Linux (Red Hat Enterprise) * LINUX_SUSE: Linux (Suse) * LINUX_CENTOS: Linux (CentOS) (required).</param>
        /// <param name="operatingSystemArchitecture">The guest operating system architecture. * UNKNOWN: Operating System cannot be determined. * BIT_32: 32 bit Operating System Architecture. * BIT_64: 64 bit Operating System Architecture. (required).</param>
        /// <param name="pairingState">Horizon Agent pairing state. * NOT_AVAILABLE: Agent pairing state is not available. * IN_PAIRING: Agent pairing with Horizon Connection Server is in progress. * PAIRED_AND_SECURED: Agent is paired and secured with a Horizon Connection Server..</param>
        /// <param name="remoteExperienceAgentBuildNumber">The remote experience Horizon Agent build number.&lt;br&gt;Supported Filters : &#39;Equals&#39;..</param>
        /// <param name="remoteExperienceAgentVersion">The remote experience Horizon Agent version.&lt;br&gt;Supported Filters : &#39;Equals&#39;..</param>
        /// <param name="state">The state of the machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * PROVISIONING: The machine is being provisioned. * PROVISIONING_ERROR: An error occurred during provisioning. * WAITING_FOR_AGENT: Horizon Connection Server is waiting to establish communication with Horizon Agent for one of these cases - a virtual machine in a manual desktop pool, unmanaged machine or RDS server. * CUSTOMIZING: The machine which is from an automated desktop pool is being customized after provisioning. * DELETING: The machine is marked for deletion. * MAINTENANCE: The machine is in maintenance mode. Users cannot log in or use the machine. * ERROR: An unknown error occurred in the machine. * PROVISIONED: The machine is powered off or suspended. * AGENT_UNREACHABLE: Horizon Connection Server cannot establish communication with Horizon Agent on the machine. * UNASSIGNED_USER_CONNECTED: A user other than the assigned user is logged in to the machine in a dedicated desktop pool. * CONNECTED: The machine is in an active session and has an active connection to a Horizon client. * UNASSIGNED_USER_DISCONNECTED: A user other than the assigned user is logged in and disconnected from the machine in a dedicated desktop pool. * DISCONNECTED: The machine is in an active session, but it is disconnected from the Horizon client. * AGENT_ERROR_STARTUP_IN_PROGRESS: Horizon Agent has started on the machine, but other required services such as the display protocol are still starting. * AGENT_ERROR_DISABLED: Horizon Agent is disabled. * AGENT_ERROR_INVALID_IP: Horizon Agent has an invalid IP address. * AGENT_ERROR_NEEDS_REBOOT: Horizon Agent needs reboot. * AGENT_ERROR_PROTOCOL_FAILURE: Protocol such as BLAST, RDP or PCoIP is not enabled. * AGENT_CONFIG_ERROR: The Remote Desktop Services role is not enabled on the windows server. * AGENT_DRAIN_MODE: RDS host is configured for drain mode. New connections are currently disabled. * AGENT_DRAIN_UNTIL_RESTART: RDS host is configured for drain-until-restart mode. * ALREADY_USED: The machine is configured to have only one session which is currently in progress and cannot accept new sessions. * AVAILABLE: The machine is powered on and ready for active connections. * IN_PROGRESS: There is a machine operation in progress. * DISABLED: The machine is disabled. * DISABLE_IN_PROGRESS: Disabled Horizon Connection Server still has some Horizon brokered sessions. It can still accept re-connections. * VALIDATING: The Horizon Connection Server is synchronizing state information with the agent. * UNKNOWN: Could not determine the state of the machine. (required).</param>
        /// <param name="type">The type of machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;. * MANAGED_MACHINE: The machine is a managed virtual machine. * UNMANAGED_MACHINE: The machine is an unmanaged physical or virtual machine. (required).</param>
        /// <param name="userIds">The unique SIDs of the users assigned to the machine.&lt;br&gt;Supported Filters : &#39;Contains&#39;..</param>
        public MachineInfo(string agentBuildNumber = default(string), string agentVersion = default(string), List<string> attemptedTheftByConnectionServer = default(List<string>), List<string> configuredByConnectionServer = default(List<string>), string desktopPoolId = default(string), string dnsName = default(string), string id = default(string), ManagedMachineData managedMachineData = default(ManagedMachineData), bool? messageSecurityEnhancedModeSupported = default(bool?), MessageSecurityModeEnum messageSecurityMode = default(MessageSecurityModeEnum), string name = default(string), OperatingSystemEnum operatingSystem = default(OperatingSystemEnum), OperatingSystemArchitectureEnum operatingSystemArchitecture = default(OperatingSystemArchitectureEnum), PairingStateEnum? pairingState = default(PairingStateEnum?), string remoteExperienceAgentBuildNumber = default(string), string remoteExperienceAgentVersion = default(string), StateEnum state = default(StateEnum), TypeEnum type = default(TypeEnum), List<string> userIds = default(List<string>))
        {
            // to ensure "desktopPoolId" is required (not null)
            if (desktopPoolId == null)
            {
                throw new InvalidDataException("desktopPoolId is a required property for MachineInfo and cannot be null");
            }
            else
            {
                this.DesktopPoolId = desktopPoolId;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for MachineInfo and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "messageSecurityEnhancedModeSupported" is required (not null)
            if (messageSecurityEnhancedModeSupported == null)
            {
                throw new InvalidDataException("messageSecurityEnhancedModeSupported is a required property for MachineInfo and cannot be null");
            }
            else
            {
                this.MessageSecurityEnhancedModeSupported = messageSecurityEnhancedModeSupported;
            }
            // to ensure "messageSecurityMode" is required (not null)
            if (messageSecurityMode == null)
            {
                throw new InvalidDataException("messageSecurityMode is a required property for MachineInfo and cannot be null");
            }
            else
            {
                this.MessageSecurityMode = messageSecurityMode;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for MachineInfo and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "operatingSystem" is required (not null)
            if (operatingSystem == null)
            {
                throw new InvalidDataException("operatingSystem is a required property for MachineInfo and cannot be null");
            }
            else
            {
                this.OperatingSystem = operatingSystem;
            }
            // to ensure "operatingSystemArchitecture" is required (not null)
            if (operatingSystemArchitecture == null)
            {
                throw new InvalidDataException("operatingSystemArchitecture is a required property for MachineInfo and cannot be null");
            }
            else
            {
                this.OperatingSystemArchitecture = operatingSystemArchitecture;
            }
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for MachineInfo and cannot be null");
            }
            else
            {
                this.State = state;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for MachineInfo and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.AgentBuildNumber = agentBuildNumber;
            this.AgentVersion = agentVersion;
            this.AttemptedTheftByConnectionServer = attemptedTheftByConnectionServer;
            this.ConfiguredByConnectionServer = configuredByConnectionServer;
            this.DnsName = dnsName;
            this.ManagedMachineData = managedMachineData;
            this.PairingState = pairingState;
            this.RemoteExperienceAgentBuildNumber = remoteExperienceAgentBuildNumber;
            this.RemoteExperienceAgentVersion = remoteExperienceAgentVersion;
            this.UserIds = userIds;
        }
        
        /// <summary>
        /// The Horizon Agent build number.&lt;br&gt;Supported Filters : &#39;Equals&#39;.
        /// </summary>
        /// <value>The Horizon Agent build number.&lt;br&gt;Supported Filters : &#39;Equals&#39;.</value>
        [DataMember(Name="agent_build_number", EmitDefaultValue=false)]
        public string AgentBuildNumber { get; set; }

        /// <summary>
        /// The Horizon Agent version.&lt;br&gt;Supported Filters : &#39;Equals&#39;.
        /// </summary>
        /// <value>The Horizon Agent version.&lt;br&gt;Supported Filters : &#39;Equals&#39;.</value>
        [DataMember(Name="agent_version", EmitDefaultValue=false)]
        public string AgentVersion { get; set; }

        /// <summary>
        /// Names of the Horizon Connection Servers that attempted theft of pairing for this Agent.
        /// </summary>
        /// <value>Names of the Horizon Connection Servers that attempted theft of pairing for this Agent.</value>
        [DataMember(Name="attempted_theft_by_connection_server", EmitDefaultValue=false)]
        public List<string> AttemptedTheftByConnectionServer { get; set; }

        /// <summary>
        /// Names of the Horizon Connection Servers the Horizon Agent is paired with.
        /// </summary>
        /// <value>Names of the Horizon Connection Servers the Horizon Agent is paired with.</value>
        [DataMember(Name="configured_by_connection_server", EmitDefaultValue=false)]
        public List<string> ConfiguredByConnectionServer { get; set; }

        /// <summary>
        /// The id of the Desktop Pool that the machine belongs to.&lt;br&gt;Supported Filters : &#39;Equals&#39;.
        /// </summary>
        /// <value>The id of the Desktop Pool that the machine belongs to.&lt;br&gt;Supported Filters : &#39;Equals&#39;.</value>
        [DataMember(Name="desktop_pool_id", EmitDefaultValue=false)]
        public string DesktopPoolId { get; set; }

        /// <summary>
        /// DNS name of the machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39; and &#39;Contains&#39;.
        /// </summary>
        /// <value>DNS name of the machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39; and &#39;Contains&#39;.</value>
        [DataMember(Name="dns_name", EmitDefaultValue=false)]
        public string DnsName { get; set; }

        /// <summary>
        /// Unique ID representing machine.
        /// </summary>
        /// <value>Unique ID representing machine.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Information applicable only to Managed Machines.
        /// </summary>
        /// <value>Information applicable only to Managed Machines.</value>
        [DataMember(Name="managed_machine_data", EmitDefaultValue=false)]
        public ManagedMachineData ManagedMachineData { get; set; }

        /// <summary>
        /// Indicates whether ENHANCED message security mode is currently supported by this machine.
        /// </summary>
        /// <value>Indicates whether ENHANCED message security mode is currently supported by this machine.</value>
        [DataMember(Name="message_security_enhanced_mode_supported", EmitDefaultValue=false)]
        public bool? MessageSecurityEnhancedModeSupported { get; set; }


        /// <summary>
        /// Name of the machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;.
        /// </summary>
        /// <value>Name of the machine.&lt;br&gt;Supported Filters : &#39;Equals&#39;, &#39;StartsWith&#39; and &#39;Contains&#39;.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }




        /// <summary>
        /// The remote experience Horizon Agent build number.&lt;br&gt;Supported Filters : &#39;Equals&#39;.
        /// </summary>
        /// <value>The remote experience Horizon Agent build number.&lt;br&gt;Supported Filters : &#39;Equals&#39;.</value>
        [DataMember(Name="remote_experience_agent_build_number", EmitDefaultValue=false)]
        public string RemoteExperienceAgentBuildNumber { get; set; }

        /// <summary>
        /// The remote experience Horizon Agent version.&lt;br&gt;Supported Filters : &#39;Equals&#39;.
        /// </summary>
        /// <value>The remote experience Horizon Agent version.&lt;br&gt;Supported Filters : &#39;Equals&#39;.</value>
        [DataMember(Name="remote_experience_agent_version", EmitDefaultValue=false)]
        public string RemoteExperienceAgentVersion { get; set; }



        /// <summary>
        /// The unique SIDs of the users assigned to the machine.&lt;br&gt;Supported Filters : &#39;Contains&#39;.
        /// </summary>
        /// <value>The unique SIDs of the users assigned to the machine.&lt;br&gt;Supported Filters : &#39;Contains&#39;.</value>
        [DataMember(Name="user_ids", EmitDefaultValue=false)]
        public List<string> UserIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MachineInfo {\n");
            sb.Append("  AgentBuildNumber: ").Append(AgentBuildNumber).Append("\n");
            sb.Append("  AgentVersion: ").Append(AgentVersion).Append("\n");
            sb.Append("  AttemptedTheftByConnectionServer: ").Append(AttemptedTheftByConnectionServer).Append("\n");
            sb.Append("  ConfiguredByConnectionServer: ").Append(ConfiguredByConnectionServer).Append("\n");
            sb.Append("  DesktopPoolId: ").Append(DesktopPoolId).Append("\n");
            sb.Append("  DnsName: ").Append(DnsName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ManagedMachineData: ").Append(ManagedMachineData).Append("\n");
            sb.Append("  MessageSecurityEnhancedModeSupported: ").Append(MessageSecurityEnhancedModeSupported).Append("\n");
            sb.Append("  MessageSecurityMode: ").Append(MessageSecurityMode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OperatingSystem: ").Append(OperatingSystem).Append("\n");
            sb.Append("  OperatingSystemArchitecture: ").Append(OperatingSystemArchitecture).Append("\n");
            sb.Append("  PairingState: ").Append(PairingState).Append("\n");
            sb.Append("  RemoteExperienceAgentBuildNumber: ").Append(RemoteExperienceAgentBuildNumber).Append("\n");
            sb.Append("  RemoteExperienceAgentVersion: ").Append(RemoteExperienceAgentVersion).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MachineInfo);
        }

        /// <summary>
        /// Returns true if MachineInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of MachineInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MachineInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AgentBuildNumber == input.AgentBuildNumber ||
                    (this.AgentBuildNumber != null &&
                    this.AgentBuildNumber.Equals(input.AgentBuildNumber))
                ) && 
                (
                    this.AgentVersion == input.AgentVersion ||
                    (this.AgentVersion != null &&
                    this.AgentVersion.Equals(input.AgentVersion))
                ) && 
                (
                    this.AttemptedTheftByConnectionServer == input.AttemptedTheftByConnectionServer ||
                    this.AttemptedTheftByConnectionServer != null &&
                    this.AttemptedTheftByConnectionServer.SequenceEqual(input.AttemptedTheftByConnectionServer)
                ) && 
                (
                    this.ConfiguredByConnectionServer == input.ConfiguredByConnectionServer ||
                    this.ConfiguredByConnectionServer != null &&
                    this.ConfiguredByConnectionServer.SequenceEqual(input.ConfiguredByConnectionServer)
                ) && 
                (
                    this.DesktopPoolId == input.DesktopPoolId ||
                    (this.DesktopPoolId != null &&
                    this.DesktopPoolId.Equals(input.DesktopPoolId))
                ) && 
                (
                    this.DnsName == input.DnsName ||
                    (this.DnsName != null &&
                    this.DnsName.Equals(input.DnsName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ManagedMachineData == input.ManagedMachineData ||
                    (this.ManagedMachineData != null &&
                    this.ManagedMachineData.Equals(input.ManagedMachineData))
                ) && 
                (
                    this.MessageSecurityEnhancedModeSupported == input.MessageSecurityEnhancedModeSupported ||
                    (this.MessageSecurityEnhancedModeSupported != null &&
                    this.MessageSecurityEnhancedModeSupported.Equals(input.MessageSecurityEnhancedModeSupported))
                ) && 
                (
                    this.MessageSecurityMode == input.MessageSecurityMode ||
                    (this.MessageSecurityMode != null &&
                    this.MessageSecurityMode.Equals(input.MessageSecurityMode))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OperatingSystem == input.OperatingSystem ||
                    (this.OperatingSystem != null &&
                    this.OperatingSystem.Equals(input.OperatingSystem))
                ) && 
                (
                    this.OperatingSystemArchitecture == input.OperatingSystemArchitecture ||
                    (this.OperatingSystemArchitecture != null &&
                    this.OperatingSystemArchitecture.Equals(input.OperatingSystemArchitecture))
                ) && 
                (
                    this.PairingState == input.PairingState ||
                    (this.PairingState != null &&
                    this.PairingState.Equals(input.PairingState))
                ) && 
                (
                    this.RemoteExperienceAgentBuildNumber == input.RemoteExperienceAgentBuildNumber ||
                    (this.RemoteExperienceAgentBuildNumber != null &&
                    this.RemoteExperienceAgentBuildNumber.Equals(input.RemoteExperienceAgentBuildNumber))
                ) && 
                (
                    this.RemoteExperienceAgentVersion == input.RemoteExperienceAgentVersion ||
                    (this.RemoteExperienceAgentVersion != null &&
                    this.RemoteExperienceAgentVersion.Equals(input.RemoteExperienceAgentVersion))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UserIds == input.UserIds ||
                    this.UserIds != null &&
                    this.UserIds.SequenceEqual(input.UserIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgentBuildNumber != null)
                    hashCode = hashCode * 59 + this.AgentBuildNumber.GetHashCode();
                if (this.AgentVersion != null)
                    hashCode = hashCode * 59 + this.AgentVersion.GetHashCode();
                if (this.AttemptedTheftByConnectionServer != null)
                    hashCode = hashCode * 59 + this.AttemptedTheftByConnectionServer.GetHashCode();
                if (this.ConfiguredByConnectionServer != null)
                    hashCode = hashCode * 59 + this.ConfiguredByConnectionServer.GetHashCode();
                if (this.DesktopPoolId != null)
                    hashCode = hashCode * 59 + this.DesktopPoolId.GetHashCode();
                if (this.DnsName != null)
                    hashCode = hashCode * 59 + this.DnsName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ManagedMachineData != null)
                    hashCode = hashCode * 59 + this.ManagedMachineData.GetHashCode();
                if (this.MessageSecurityEnhancedModeSupported != null)
                    hashCode = hashCode * 59 + this.MessageSecurityEnhancedModeSupported.GetHashCode();
                if (this.MessageSecurityMode != null)
                    hashCode = hashCode * 59 + this.MessageSecurityMode.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OperatingSystem != null)
                    hashCode = hashCode * 59 + this.OperatingSystem.GetHashCode();
                if (this.OperatingSystemArchitecture != null)
                    hashCode = hashCode * 59 + this.OperatingSystemArchitecture.GetHashCode();
                if (this.PairingState != null)
                    hashCode = hashCode * 59 + this.PairingState.GetHashCode();
                if (this.RemoteExperienceAgentBuildNumber != null)
                    hashCode = hashCode * 59 + this.RemoteExperienceAgentBuildNumber.GetHashCode();
                if (this.RemoteExperienceAgentVersion != null)
                    hashCode = hashCode * 59 + this.RemoteExperienceAgentVersion.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UserIds != null)
                    hashCode = hashCode * 59 + this.UserIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
