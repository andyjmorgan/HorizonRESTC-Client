/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Information related to VM snapshot.
    /// </summary>
    [DataContract]
    public partial class BaseSnapshotInfo :  IEquatable<BaseSnapshotInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines IncompatibleReasons
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IncompatibleReasonsEnum
        {
            
            /// <summary>
            /// Enum POWEREDON for value: POWERED_ON
            /// </summary>
            [EnumMember(Value = "POWERED_ON")]
            POWEREDON = 1,
            
            /// <summary>
            /// Enum INCOMPATIBLEHARDWAREVERSION for value: INCOMPATIBLE_HARDWARE_VERSION
            /// </summary>
            [EnumMember(Value = "INCOMPATIBLE_HARDWARE_VERSION")]
            INCOMPATIBLEHARDWAREVERSION = 2
        }


        /// <summary>
        /// Reasons that may preclude this VM snapshot from being used in linked/instant clone desktop pool or farm creation.
        /// </summary>
        /// <value>Reasons that may preclude this VM snapshot from being used in linked/instant clone desktop pool or farm creation.</value>
        [DataMember(Name="incompatible_reasons", EmitDefaultValue=false)]
        public List<IncompatibleReasonsEnum> IncompatibleReasons { get; set; }
        /// <summary>
        /// Indicate how the virtual video device for the VM snapshot renders 3D graphics. Will be set only if VM snapshot supports 3D functions. * MANAGE_BY_VSPHERE_CLIENT: 3D rendering managed by vSphere Client. * AUTOMATIC: 3D rendering is automatic. * SOFTWARE: 3D rendering is software dependent. The software renderer is supported (at minimum) on virtual hardware version 8 in a vSphere 5.0 environment. * HARDWARE: 3D rendering is hardware dependent. The hardware-based renderer is supported (at minimum) on virtual hardware version 9 in a vSphere 5.1 environment. * DISABLED: 3D rendering is disabled.
        /// </summary>
        /// <value>Indicate how the virtual video device for the VM snapshot renders 3D graphics. Will be set only if VM snapshot supports 3D functions. * MANAGE_BY_VSPHERE_CLIENT: 3D rendering managed by vSphere Client. * AUTOMATIC: 3D rendering is automatic. * SOFTWARE: 3D rendering is software dependent. The software renderer is supported (at minimum) on virtual hardware version 8 in a vSphere 5.0 environment. * HARDWARE: 3D rendering is hardware dependent. The hardware-based renderer is supported (at minimum) on virtual hardware version 9 in a vSphere 5.1 environment. * DISABLED: 3D rendering is disabled.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Renderer3dEnum
        {
            
            /// <summary>
            /// Enum MANAGEBYVSPHERECLIENT for value: MANAGE_BY_VSPHERE_CLIENT
            /// </summary>
            [EnumMember(Value = "MANAGE_BY_VSPHERE_CLIENT")]
            MANAGEBYVSPHERECLIENT = 1,
            
            /// <summary>
            /// Enum AUTOMATIC for value: AUTOMATIC
            /// </summary>
            [EnumMember(Value = "AUTOMATIC")]
            AUTOMATIC = 2,
            
            /// <summary>
            /// Enum SOFTWARE for value: SOFTWARE
            /// </summary>
            [EnumMember(Value = "SOFTWARE")]
            SOFTWARE = 3,
            
            /// <summary>
            /// Enum HARDWARE for value: HARDWARE
            /// </summary>
            [EnumMember(Value = "HARDWARE")]
            HARDWARE = 4,
            
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 5
        }

        /// <summary>
        /// Indicate how the virtual video device for the VM snapshot renders 3D graphics. Will be set only if VM snapshot supports 3D functions. * MANAGE_BY_VSPHERE_CLIENT: 3D rendering managed by vSphere Client. * AUTOMATIC: 3D rendering is automatic. * SOFTWARE: 3D rendering is software dependent. The software renderer is supported (at minimum) on virtual hardware version 8 in a vSphere 5.0 environment. * HARDWARE: 3D rendering is hardware dependent. The hardware-based renderer is supported (at minimum) on virtual hardware version 9 in a vSphere 5.1 environment. * DISABLED: 3D rendering is disabled.
        /// </summary>
        /// <value>Indicate how the virtual video device for the VM snapshot renders 3D graphics. Will be set only if VM snapshot supports 3D functions. * MANAGE_BY_VSPHERE_CLIENT: 3D rendering managed by vSphere Client. * AUTOMATIC: 3D rendering is automatic. * SOFTWARE: 3D rendering is software dependent. The software renderer is supported (at minimum) on virtual hardware version 8 in a vSphere 5.0 environment. * HARDWARE: 3D rendering is hardware dependent. The hardware-based renderer is supported (at minimum) on virtual hardware version 9 in a vSphere 5.1 environment. * DISABLED: 3D rendering is disabled.</value>
        [DataMember(Name="renderer3d", EmitDefaultValue=false)]
        public Renderer3dEnum? Renderer3d { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseSnapshotInfo" /> class.
        /// </summary>
        /// <param name="createdTimestamp">Epoch time in milli seconds, when the VM snapshot was created..</param>
        /// <param name="description">Description of the VM snapshot..</param>
        /// <param name="diskSizeMb">Sum of capacities of all the virtual disks in the VM snapshot, in MB..</param>
        /// <param name="hardwareVersion">VM snapshot hardware version.</param>
        /// <param name="id">Unique ID representing the VM snapshot..</param>
        /// <param name="incompatibleReasons">Reasons that may preclude this VM snapshot from being used in linked/instant clone desktop pool or farm creation..</param>
        /// <param name="maxNumberOfMonitors">Maximum number of monitors set in SVGA settings for the VM snapshot in vCenter..</param>
        /// <param name="maxResolutionOfAnyOneMonitor">Maximum resolution of any one monitor set in SVGA settings for the VM snapshot in vCenter..</param>
        /// <param name="memoryMb">The physical memory size of VM snapshot, in MB.</param>
        /// <param name="memoryReservationMb">Amount of memory that is guaranteed available to the virtual machine, in MB..</param>
        /// <param name="name">VM snapshot name..</param>
        /// <param name="path">VM snapshot path..</param>
        /// <param name="renderer3d">Indicate how the virtual video device for the VM snapshot renders 3D graphics. Will be set only if VM snapshot supports 3D functions. * MANAGE_BY_VSPHERE_CLIENT: 3D rendering managed by vSphere Client. * AUTOMATIC: 3D rendering is automatic. * SOFTWARE: 3D rendering is software dependent. The software renderer is supported (at minimum) on virtual hardware version 8 in a vSphere 5.0 environment. * HARDWARE: 3D rendering is hardware dependent. The hardware-based renderer is supported (at minimum) on virtual hardware version 9 in a vSphere 5.1 environment. * DISABLED: 3D rendering is disabled..</param>
        /// <param name="totalVideoMemoryMb">Total video memory in MB set in SVGA settings for the VM snapshot in vCenter..</param>
        /// <param name="vcenterId">Virtual Center id for this VM snapshot..</param>
        /// <param name="vgpuType">NVIDIA GRID vGPU type configured on this VM snapshot..</param>
        public BaseSnapshotInfo(long? createdTimestamp = default(long?), string description = default(string), long? diskSizeMb = default(long?), int? hardwareVersion = default(int?), string id = default(string), List<IncompatibleReasonsEnum> incompatibleReasons = default(List<IncompatibleReasonsEnum>), int? maxNumberOfMonitors = default(int?), string maxResolutionOfAnyOneMonitor = default(string), int? memoryMb = default(int?), long? memoryReservationMb = default(long?), string name = default(string), string path = default(string), Renderer3dEnum? renderer3d = default(Renderer3dEnum?), double? totalVideoMemoryMb = default(double?), string vcenterId = default(string), string vgpuType = default(string))
        {
            this.CreatedTimestamp = createdTimestamp;
            this.Description = description;
            this.DiskSizeMb = diskSizeMb;
            this.HardwareVersion = hardwareVersion;
            this.Id = id;
            this.IncompatibleReasons = incompatibleReasons;
            this.MaxNumberOfMonitors = maxNumberOfMonitors;
            this.MaxResolutionOfAnyOneMonitor = maxResolutionOfAnyOneMonitor;
            this.MemoryMb = memoryMb;
            this.MemoryReservationMb = memoryReservationMb;
            this.Name = name;
            this.Path = path;
            this.Renderer3d = renderer3d;
            this.TotalVideoMemoryMb = totalVideoMemoryMb;
            this.VcenterId = vcenterId;
            this.VgpuType = vgpuType;
        }
        
        /// <summary>
        /// Epoch time in milli seconds, when the VM snapshot was created.
        /// </summary>
        /// <value>Epoch time in milli seconds, when the VM snapshot was created.</value>
        [DataMember(Name="created_timestamp", EmitDefaultValue=false)]
        public long? CreatedTimestamp { get; set; }

        /// <summary>
        /// Description of the VM snapshot.
        /// </summary>
        /// <value>Description of the VM snapshot.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Sum of capacities of all the virtual disks in the VM snapshot, in MB.
        /// </summary>
        /// <value>Sum of capacities of all the virtual disks in the VM snapshot, in MB.</value>
        [DataMember(Name="disk_size_mb", EmitDefaultValue=false)]
        public long? DiskSizeMb { get; set; }

        /// <summary>
        /// VM snapshot hardware version
        /// </summary>
        /// <value>VM snapshot hardware version</value>
        [DataMember(Name="hardware_version", EmitDefaultValue=false)]
        public int? HardwareVersion { get; set; }

        /// <summary>
        /// Unique ID representing the VM snapshot.
        /// </summary>
        /// <value>Unique ID representing the VM snapshot.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Maximum number of monitors set in SVGA settings for the VM snapshot in vCenter.
        /// </summary>
        /// <value>Maximum number of monitors set in SVGA settings for the VM snapshot in vCenter.</value>
        [DataMember(Name="max_number_of_monitors", EmitDefaultValue=false)]
        public int? MaxNumberOfMonitors { get; set; }

        /// <summary>
        /// Maximum resolution of any one monitor set in SVGA settings for the VM snapshot in vCenter.
        /// </summary>
        /// <value>Maximum resolution of any one monitor set in SVGA settings for the VM snapshot in vCenter.</value>
        [DataMember(Name="max_resolution_of_any_one_monitor", EmitDefaultValue=false)]
        public string MaxResolutionOfAnyOneMonitor { get; set; }

        /// <summary>
        /// The physical memory size of VM snapshot, in MB
        /// </summary>
        /// <value>The physical memory size of VM snapshot, in MB</value>
        [DataMember(Name="memory_mb", EmitDefaultValue=false)]
        public int? MemoryMb { get; set; }

        /// <summary>
        /// Amount of memory that is guaranteed available to the virtual machine, in MB.
        /// </summary>
        /// <value>Amount of memory that is guaranteed available to the virtual machine, in MB.</value>
        [DataMember(Name="memory_reservation_mb", EmitDefaultValue=false)]
        public long? MemoryReservationMb { get; set; }

        /// <summary>
        /// VM snapshot name.
        /// </summary>
        /// <value>VM snapshot name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// VM snapshot path.
        /// </summary>
        /// <value>VM snapshot path.</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }


        /// <summary>
        /// Total video memory in MB set in SVGA settings for the VM snapshot in vCenter.
        /// </summary>
        /// <value>Total video memory in MB set in SVGA settings for the VM snapshot in vCenter.</value>
        [DataMember(Name="total_video_memory_mb", EmitDefaultValue=false)]
        public double? TotalVideoMemoryMb { get; set; }

        /// <summary>
        /// Virtual Center id for this VM snapshot.
        /// </summary>
        /// <value>Virtual Center id for this VM snapshot.</value>
        [DataMember(Name="vcenter_id", EmitDefaultValue=false)]
        public string VcenterId { get; set; }

        /// <summary>
        /// NVIDIA GRID vGPU type configured on this VM snapshot.
        /// </summary>
        /// <value>NVIDIA GRID vGPU type configured on this VM snapshot.</value>
        [DataMember(Name="vgpu_type", EmitDefaultValue=false)]
        public string VgpuType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseSnapshotInfo {\n");
            sb.Append("  CreatedTimestamp: ").Append(CreatedTimestamp).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DiskSizeMb: ").Append(DiskSizeMb).Append("\n");
            sb.Append("  HardwareVersion: ").Append(HardwareVersion).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IncompatibleReasons: ").Append(IncompatibleReasons).Append("\n");
            sb.Append("  MaxNumberOfMonitors: ").Append(MaxNumberOfMonitors).Append("\n");
            sb.Append("  MaxResolutionOfAnyOneMonitor: ").Append(MaxResolutionOfAnyOneMonitor).Append("\n");
            sb.Append("  MemoryMb: ").Append(MemoryMb).Append("\n");
            sb.Append("  MemoryReservationMb: ").Append(MemoryReservationMb).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Renderer3d: ").Append(Renderer3d).Append("\n");
            sb.Append("  TotalVideoMemoryMb: ").Append(TotalVideoMemoryMb).Append("\n");
            sb.Append("  VcenterId: ").Append(VcenterId).Append("\n");
            sb.Append("  VgpuType: ").Append(VgpuType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaseSnapshotInfo);
        }

        /// <summary>
        /// Returns true if BaseSnapshotInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of BaseSnapshotInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseSnapshotInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedTimestamp == input.CreatedTimestamp ||
                    (this.CreatedTimestamp != null &&
                    this.CreatedTimestamp.Equals(input.CreatedTimestamp))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DiskSizeMb == input.DiskSizeMb ||
                    (this.DiskSizeMb != null &&
                    this.DiskSizeMb.Equals(input.DiskSizeMb))
                ) && 
                (
                    this.HardwareVersion == input.HardwareVersion ||
                    (this.HardwareVersion != null &&
                    this.HardwareVersion.Equals(input.HardwareVersion))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IncompatibleReasons == input.IncompatibleReasons ||
                    this.IncompatibleReasons != null &&
                    this.IncompatibleReasons.SequenceEqual(input.IncompatibleReasons)
                ) && 
                (
                    this.MaxNumberOfMonitors == input.MaxNumberOfMonitors ||
                    (this.MaxNumberOfMonitors != null &&
                    this.MaxNumberOfMonitors.Equals(input.MaxNumberOfMonitors))
                ) && 
                (
                    this.MaxResolutionOfAnyOneMonitor == input.MaxResolutionOfAnyOneMonitor ||
                    (this.MaxResolutionOfAnyOneMonitor != null &&
                    this.MaxResolutionOfAnyOneMonitor.Equals(input.MaxResolutionOfAnyOneMonitor))
                ) && 
                (
                    this.MemoryMb == input.MemoryMb ||
                    (this.MemoryMb != null &&
                    this.MemoryMb.Equals(input.MemoryMb))
                ) && 
                (
                    this.MemoryReservationMb == input.MemoryReservationMb ||
                    (this.MemoryReservationMb != null &&
                    this.MemoryReservationMb.Equals(input.MemoryReservationMb))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Renderer3d == input.Renderer3d ||
                    (this.Renderer3d != null &&
                    this.Renderer3d.Equals(input.Renderer3d))
                ) && 
                (
                    this.TotalVideoMemoryMb == input.TotalVideoMemoryMb ||
                    (this.TotalVideoMemoryMb != null &&
                    this.TotalVideoMemoryMb.Equals(input.TotalVideoMemoryMb))
                ) && 
                (
                    this.VcenterId == input.VcenterId ||
                    (this.VcenterId != null &&
                    this.VcenterId.Equals(input.VcenterId))
                ) && 
                (
                    this.VgpuType == input.VgpuType ||
                    (this.VgpuType != null &&
                    this.VgpuType.Equals(input.VgpuType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedTimestamp != null)
                    hashCode = hashCode * 59 + this.CreatedTimestamp.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DiskSizeMb != null)
                    hashCode = hashCode * 59 + this.DiskSizeMb.GetHashCode();
                if (this.HardwareVersion != null)
                    hashCode = hashCode * 59 + this.HardwareVersion.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IncompatibleReasons != null)
                    hashCode = hashCode * 59 + this.IncompatibleReasons.GetHashCode();
                if (this.MaxNumberOfMonitors != null)
                    hashCode = hashCode * 59 + this.MaxNumberOfMonitors.GetHashCode();
                if (this.MaxResolutionOfAnyOneMonitor != null)
                    hashCode = hashCode * 59 + this.MaxResolutionOfAnyOneMonitor.GetHashCode();
                if (this.MemoryMb != null)
                    hashCode = hashCode * 59 + this.MemoryMb.GetHashCode();
                if (this.MemoryReservationMb != null)
                    hashCode = hashCode * 59 + this.MemoryReservationMb.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Renderer3d != null)
                    hashCode = hashCode * 59 + this.Renderer3d.GetHashCode();
                if (this.TotalVideoMemoryMb != null)
                    hashCode = hashCode * 59 + this.TotalVideoMemoryMb.GetHashCode();
                if (this.VcenterId != null)
                    hashCode = hashCode * 59 + this.VcenterId.GetHashCode();
                if (this.VgpuType != null)
                    hashCode = hashCode * 59 + this.VgpuType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
