/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VMware.Horizon.RESTAPI.Client.SwaggerDateConverter;

namespace VMware.Horizon.RESTAPI.Model
{
    /// <summary>
    /// Settings related to the Farm.
    /// </summary>
    [DataContract]
    public partial class FarmSettings :  IEquatable<FarmSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FarmSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FarmSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FarmSettings" /> class.
        /// </summary>
        /// <param name="deleteInProgess">Indicates whether the Farm is in the process of being deleted. Default value is false. (required).</param>
        /// <param name="desktopId">Desktop pool Id representing the RDS Desktop pool to which this Farm belongs..</param>
        /// <param name="displayProtocolSettings">Display protocol settings for session related to the Farm..</param>
        /// <param name="loadBalancerSettings">Settings for load balancing the session requests across the RDS servers in the farm..</param>
        /// <param name="serverErrorThreshold">The minimum number of machines that must be fully operational in order toavoid showing the farm in an error state. Default value is 0..</param>
        /// <param name="sessionSettings">Session related settings for the Farm..</param>
        public FarmSettings(bool? deleteInProgess = default(bool?), string desktopId = default(string), FarmDisplayProtocolSettings displayProtocolSettings = default(FarmDisplayProtocolSettings), FarmLoadBalancerSettings loadBalancerSettings = default(FarmLoadBalancerSettings), int? serverErrorThreshold = default(int?), FarmSessionSettings sessionSettings = default(FarmSessionSettings))
        {
            // to ensure "deleteInProgess" is required (not null)
            if (deleteInProgess == null)
            {
                throw new InvalidDataException("deleteInProgess is a required property for FarmSettings and cannot be null");
            }
            else
            {
                this.DeleteInProgess = deleteInProgess;
            }
            this.DesktopId = desktopId;
            this.DisplayProtocolSettings = displayProtocolSettings;
            this.LoadBalancerSettings = loadBalancerSettings;
            this.ServerErrorThreshold = serverErrorThreshold;
            this.SessionSettings = sessionSettings;
        }
        
        /// <summary>
        /// Indicates whether the Farm is in the process of being deleted. Default value is false.
        /// </summary>
        /// <value>Indicates whether the Farm is in the process of being deleted. Default value is false.</value>
        [DataMember(Name="delete_in_progess", EmitDefaultValue=false)]
        public bool? DeleteInProgess { get; set; }

        /// <summary>
        /// Desktop pool Id representing the RDS Desktop pool to which this Farm belongs.
        /// </summary>
        /// <value>Desktop pool Id representing the RDS Desktop pool to which this Farm belongs.</value>
        [DataMember(Name="desktop_id", EmitDefaultValue=false)]
        public string DesktopId { get; set; }

        /// <summary>
        /// Display protocol settings for session related to the Farm.
        /// </summary>
        /// <value>Display protocol settings for session related to the Farm.</value>
        [DataMember(Name="display_protocol_settings", EmitDefaultValue=false)]
        public FarmDisplayProtocolSettings DisplayProtocolSettings { get; set; }

        /// <summary>
        /// Settings for load balancing the session requests across the RDS servers in the farm.
        /// </summary>
        /// <value>Settings for load balancing the session requests across the RDS servers in the farm.</value>
        [DataMember(Name="load_balancer_settings", EmitDefaultValue=false)]
        public FarmLoadBalancerSettings LoadBalancerSettings { get; set; }

        /// <summary>
        /// The minimum number of machines that must be fully operational in order toavoid showing the farm in an error state. Default value is 0.
        /// </summary>
        /// <value>The minimum number of machines that must be fully operational in order toavoid showing the farm in an error state. Default value is 0.</value>
        [DataMember(Name="server_error_threshold", EmitDefaultValue=false)]
        public int? ServerErrorThreshold { get; set; }

        /// <summary>
        /// Session related settings for the Farm.
        /// </summary>
        /// <value>Session related settings for the Farm.</value>
        [DataMember(Name="session_settings", EmitDefaultValue=false)]
        public FarmSessionSettings SessionSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FarmSettings {\n");
            sb.Append("  DeleteInProgess: ").Append(DeleteInProgess).Append("\n");
            sb.Append("  DesktopId: ").Append(DesktopId).Append("\n");
            sb.Append("  DisplayProtocolSettings: ").Append(DisplayProtocolSettings).Append("\n");
            sb.Append("  LoadBalancerSettings: ").Append(LoadBalancerSettings).Append("\n");
            sb.Append("  ServerErrorThreshold: ").Append(ServerErrorThreshold).Append("\n");
            sb.Append("  SessionSettings: ").Append(SessionSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FarmSettings);
        }

        /// <summary>
        /// Returns true if FarmSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of FarmSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FarmSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeleteInProgess == input.DeleteInProgess ||
                    (this.DeleteInProgess != null &&
                    this.DeleteInProgess.Equals(input.DeleteInProgess))
                ) && 
                (
                    this.DesktopId == input.DesktopId ||
                    (this.DesktopId != null &&
                    this.DesktopId.Equals(input.DesktopId))
                ) && 
                (
                    this.DisplayProtocolSettings == input.DisplayProtocolSettings ||
                    (this.DisplayProtocolSettings != null &&
                    this.DisplayProtocolSettings.Equals(input.DisplayProtocolSettings))
                ) && 
                (
                    this.LoadBalancerSettings == input.LoadBalancerSettings ||
                    (this.LoadBalancerSettings != null &&
                    this.LoadBalancerSettings.Equals(input.LoadBalancerSettings))
                ) && 
                (
                    this.ServerErrorThreshold == input.ServerErrorThreshold ||
                    (this.ServerErrorThreshold != null &&
                    this.ServerErrorThreshold.Equals(input.ServerErrorThreshold))
                ) && 
                (
                    this.SessionSettings == input.SessionSettings ||
                    (this.SessionSettings != null &&
                    this.SessionSettings.Equals(input.SessionSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeleteInProgess != null)
                    hashCode = hashCode * 59 + this.DeleteInProgess.GetHashCode();
                if (this.DesktopId != null)
                    hashCode = hashCode * 59 + this.DesktopId.GetHashCode();
                if (this.DisplayProtocolSettings != null)
                    hashCode = hashCode * 59 + this.DisplayProtocolSettings.GetHashCode();
                if (this.LoadBalancerSettings != null)
                    hashCode = hashCode * 59 + this.LoadBalancerSettings.GetHashCode();
                if (this.ServerErrorThreshold != null)
                    hashCode = hashCode * 59 + this.ServerErrorThreshold.GetHashCode();
                if (this.SessionSettings != null)
                    hashCode = hashCode * 59 + this.SessionSettings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ServerErrorThreshold (int?) minimum
            if(this.ServerErrorThreshold < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServerErrorThreshold, must be a value greater than or equal to 0.", new [] { "ServerErrorThreshold" });
            }

            yield break;
        }
    }

}
