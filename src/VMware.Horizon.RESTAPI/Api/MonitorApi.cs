/* 
 * Horizon Server API
 *
 * Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VMware.Horizon.RESTAPI.Client;
using VMware.Horizon.RESTAPI.Model;

namespace VMware.Horizon.RESTAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMonitorApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets monitoring information related to Connection Server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ConnectionServerMonitorInfoV2</returns>
        ConnectionServerMonitorInfoV2 GetConnectionServerMonitorInfoV2 (string id);

        /// <summary>
        /// Gets monitoring information related to Connection Server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ConnectionServerMonitorInfoV2</returns>
        ApiResponse<ConnectionServerMonitorInfoV2> GetConnectionServerMonitorInfoV2WithHttpInfo (string id);
        /// <summary>
        /// Returns monitoring information related to Event database of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EventDatabaseMonitorInfo</returns>
        EventDatabaseMonitorInfo GetEventDatabaseMonitor ();

        /// <summary>
        /// Returns monitoring information related to Event database of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EventDatabaseMonitorInfo</returns>
        ApiResponse<EventDatabaseMonitorInfo> GetEventDatabaseMonitorWithHttpInfo ();
        /// <summary>
        /// Gets monitoring information related to farm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>FarmMonitorInfo</returns>
        FarmMonitorInfo GetFarmMonitorInfo (string id);

        /// <summary>
        /// Gets monitoring information related to farm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of FarmMonitorInfo</returns>
        ApiResponse<FarmMonitorInfo> GetFarmMonitorInfoWithHttpInfo (string id);
        /// <summary>
        /// Gets monitoring information related to a Gateway.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>GatewayMonitorInfoV2</returns>
        GatewayMonitorInfoV2 GetGatewayMonitorInfo (string id);

        /// <summary>
        /// Gets monitoring information related to a Gateway.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of GatewayMonitorInfoV2</returns>
        ApiResponse<GatewayMonitorInfoV2> GetGatewayMonitorInfoWithHttpInfo (string id);
        /// <summary>
        /// Gets monitoring information related to the remote pod.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>PodMonitorInfoV2</returns>
        PodMonitorInfoV2 GetPodMonitorInfoV2 (string id);

        /// <summary>
        /// Gets monitoring information related to the remote pod.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of PodMonitorInfoV2</returns>
        ApiResponse<PodMonitorInfoV2> GetPodMonitorInfoV2WithHttpInfo (string id);
        /// <summary>
        /// Gets monitoring information related to RDS Server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>RDSServerMonitorInfo</returns>
        RDSServerMonitorInfo GetRDSServerMonitors (string id);

        /// <summary>
        /// Gets monitoring information related to RDS Server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of RDSServerMonitorInfo</returns>
        ApiResponse<RDSServerMonitorInfo> GetRDSServerMonitorsWithHttpInfo (string id);
        /// <summary>
        /// Gets Monitoring Information related to a SAML Authenticator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>SAMLAuthenticatorMonitorInfoV2</returns>
        SAMLAuthenticatorMonitorInfoV2 GetSAMLAuthenticatorMonitorInfo (string id);

        /// <summary>
        /// Gets Monitoring Information related to a SAML Authenticator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of SAMLAuthenticatorMonitorInfoV2</returns>
        ApiResponse<SAMLAuthenticatorMonitorInfoV2> GetSAMLAuthenticatorMonitorInfoWithHttpInfo (string id);
        /// <summary>
        /// Gets monitoring information related to a True SSO connector.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>TrueSSOMonitorInfo</returns>
        TrueSSOMonitorInfo GetTrueSSOMonitorInfo (string id);

        /// <summary>
        /// Gets monitoring information related to a True SSO connector.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of TrueSSOMonitorInfo</returns>
        ApiResponse<TrueSSOMonitorInfo> GetTrueSSOMonitorInfoWithHttpInfo (string id);
        /// <summary>
        /// Gets monitoring information of view composer for a given virtual center
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcId">vcId</param>
        /// <returns>ViewComposerMonitorInfoV2</returns>
        ViewComposerMonitorInfoV2 GetViewComposerByVCId (string vcId);

        /// <summary>
        /// Gets monitoring information of view composer for a given virtual center
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcId">vcId</param>
        /// <returns>ApiResponse of ViewComposerMonitorInfoV2</returns>
        ApiResponse<ViewComposerMonitorInfoV2> GetViewComposerByVCIdWithHttpInfo (string vcId);
        /// <summary>
        /// Gets monitoring information related to Virtual Center.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>VirtualCenterMonitorInfoV2</returns>
        VirtualCenterMonitorInfoV2 GetVirtualCenterMonitorInfo (string id);

        /// <summary>
        /// Gets monitoring information related to Virtual Center.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of VirtualCenterMonitorInfoV2</returns>
        ApiResponse<VirtualCenterMonitorInfoV2> GetVirtualCenterMonitorInfoWithHttpInfo (string id);
        /// <summary>
        /// Lists monitoring information related to AD Domains of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ADDomainMonitorInfoV2&gt;</returns>
        List<ADDomainMonitorInfoV2> ListADDomainMonitorInfosV2 ();

        /// <summary>
        /// Lists monitoring information related to AD Domains of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ADDomainMonitorInfoV2&gt;</returns>
        ApiResponse<List<ADDomainMonitorInfoV2>> ListADDomainMonitorInfosV2WithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to AD Domains of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ADDomainMonitorInfo&gt;</returns>
        List<ADDomainMonitorInfo> ListADDomainMonitors ();

        /// <summary>
        /// Lists monitoring information related to AD Domains of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ADDomainMonitorInfo&gt;</returns>
        ApiResponse<List<ADDomainMonitorInfo>> ListADDomainMonitorsWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to Connection Servers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ConnectionServerMonitorInfo&gt;</returns>
        List<ConnectionServerMonitorInfo> ListConnectionServerMonitors ();

        /// <summary>
        /// Lists monitoring information related to Connection Servers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ConnectionServerMonitorInfo&gt;</returns>
        ApiResponse<List<ConnectionServerMonitorInfo>> ListConnectionServerMonitorsWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to Connection Servers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ConnectionServerMonitorInfoV2&gt;</returns>
        List<ConnectionServerMonitorInfoV2> ListConnectionServerMonitorsV2 ();

        /// <summary>
        /// Lists monitoring information related to Connection Servers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ConnectionServerMonitorInfoV2&gt;</returns>
        ApiResponse<List<ConnectionServerMonitorInfoV2>> ListConnectionServerMonitorsV2WithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to Farms of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FarmMonitorInfo&gt;</returns>
        List<FarmMonitorInfo> ListFarmMonitors ();

        /// <summary>
        /// Lists monitoring information related to Farms of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FarmMonitorInfo&gt;</returns>
        ApiResponse<List<FarmMonitorInfo>> ListFarmMonitorsWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to Gateways registered in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;GatewayMonitorInfo&gt;</returns>
        List<GatewayMonitorInfo> ListGatewayMonitorInfoV1 ();

        /// <summary>
        /// Lists monitoring information related to Gateways registered in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;GatewayMonitorInfo&gt;</returns>
        ApiResponse<List<GatewayMonitorInfo>> ListGatewayMonitorInfoV1WithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to Gateways registered in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;GatewayMonitorInfoV2&gt;</returns>
        List<GatewayMonitorInfoV2> ListGatewayMonitorInfoV2 ();

        /// <summary>
        /// Lists monitoring information related to Gateways registered in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;GatewayMonitorInfoV2&gt;</returns>
        ApiResponse<List<GatewayMonitorInfoV2>> ListGatewayMonitorInfoV2WithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to the remote pods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PodMonitorInfo&gt;</returns>
        List<PodMonitorInfo> ListPodMonitorInfosV1 ();

        /// <summary>
        /// Lists monitoring information related to the remote pods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PodMonitorInfo&gt;</returns>
        ApiResponse<List<PodMonitorInfo>> ListPodMonitorInfosV1WithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to the remote pods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PodMonitorInfoV2&gt;</returns>
        List<PodMonitorInfoV2> ListPodMonitorInfosV2 ();

        /// <summary>
        /// Lists monitoring information related to the remote pods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PodMonitorInfoV2&gt;</returns>
        ApiResponse<List<PodMonitorInfoV2>> ListPodMonitorInfosV2WithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to RDS Servers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RDSServerMonitorInfo&gt;</returns>
        List<RDSServerMonitorInfo> ListRDSServerMonitors ();

        /// <summary>
        /// Lists monitoring information related to RDS Servers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RDSServerMonitorInfo&gt;</returns>
        ApiResponse<List<RDSServerMonitorInfo>> ListRDSServerMonitorsWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to SAML Authenticators of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SAMLAuthenticatorMonitorInfo&gt;</returns>
        List<SAMLAuthenticatorMonitorInfo> ListSAMLAuthenticatorMonitorsV1 ();

        /// <summary>
        /// Lists monitoring information related to SAML Authenticators of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SAMLAuthenticatorMonitorInfo&gt;</returns>
        ApiResponse<List<SAMLAuthenticatorMonitorInfo>> ListSAMLAuthenticatorMonitorsV1WithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to SAML Authenticators of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SAMLAuthenticatorMonitorInfoV2&gt;</returns>
        List<SAMLAuthenticatorMonitorInfoV2> ListSAMLAuthenticatorMonitorsV2 ();

        /// <summary>
        /// Lists monitoring information related to SAML Authenticators of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SAMLAuthenticatorMonitorInfoV2&gt;</returns>
        ApiResponse<List<SAMLAuthenticatorMonitorInfoV2>> ListSAMLAuthenticatorMonitorsV2WithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to True SSO connectors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TrueSSOMonitorInfo&gt;</returns>
        List<TrueSSOMonitorInfo> ListTrueSSOMonitorInfos ();

        /// <summary>
        /// Lists monitoring information related to True SSO connectors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TrueSSOMonitorInfo&gt;</returns>
        ApiResponse<List<TrueSSOMonitorInfo>> ListTrueSSOMonitorInfosWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to View Composers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ViewComposerMonitorInfo&gt;</returns>
        List<ViewComposerMonitorInfo> ListViewComposerMonitorsV1 ();

        /// <summary>
        /// Lists monitoring information related to View Composers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ViewComposerMonitorInfo&gt;</returns>
        ApiResponse<List<ViewComposerMonitorInfo>> ListViewComposerMonitorsV1WithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to View Composers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ViewComposerMonitorInfoV2&gt;</returns>
        List<ViewComposerMonitorInfoV2> ListViewComposerMonitorsV2 ();

        /// <summary>
        /// Lists monitoring information related to View Composers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ViewComposerMonitorInfoV2&gt;</returns>
        ApiResponse<List<ViewComposerMonitorInfoV2>> ListViewComposerMonitorsV2WithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to Virtual Centers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;VirtualCenterMonitorInfo&gt;</returns>
        List<VirtualCenterMonitorInfo> ListVirtualCenterMonitors ();

        /// <summary>
        /// Lists monitoring information related to Virtual Centers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;VirtualCenterMonitorInfo&gt;</returns>
        ApiResponse<List<VirtualCenterMonitorInfo>> ListVirtualCenterMonitorsWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to Virtual Centers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;VirtualCenterMonitorInfoV2&gt;</returns>
        List<VirtualCenterMonitorInfoV2> ListVirtualCenterMonitorsV2 ();

        /// <summary>
        /// Lists monitoring information related to Virtual Centers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;VirtualCenterMonitorInfoV2&gt;</returns>
        ApiResponse<List<VirtualCenterMonitorInfoV2>> ListVirtualCenterMonitorsV2WithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets monitoring information related to Connection Server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ConnectionServerMonitorInfoV2</returns>
        System.Threading.Tasks.Task<ConnectionServerMonitorInfoV2> GetConnectionServerMonitorInfoV2Async (string id);

        /// <summary>
        /// Gets monitoring information related to Connection Server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ConnectionServerMonitorInfoV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectionServerMonitorInfoV2>> GetConnectionServerMonitorInfoV2AsyncWithHttpInfo (string id);
        /// <summary>
        /// Returns monitoring information related to Event database of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EventDatabaseMonitorInfo</returns>
        System.Threading.Tasks.Task<EventDatabaseMonitorInfo> GetEventDatabaseMonitorAsync ();

        /// <summary>
        /// Returns monitoring information related to Event database of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EventDatabaseMonitorInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventDatabaseMonitorInfo>> GetEventDatabaseMonitorAsyncWithHttpInfo ();
        /// <summary>
        /// Gets monitoring information related to farm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of FarmMonitorInfo</returns>
        System.Threading.Tasks.Task<FarmMonitorInfo> GetFarmMonitorInfoAsync (string id);

        /// <summary>
        /// Gets monitoring information related to farm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (FarmMonitorInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<FarmMonitorInfo>> GetFarmMonitorInfoAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets monitoring information related to a Gateway.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of GatewayMonitorInfoV2</returns>
        System.Threading.Tasks.Task<GatewayMonitorInfoV2> GetGatewayMonitorInfoAsync (string id);

        /// <summary>
        /// Gets monitoring information related to a Gateway.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (GatewayMonitorInfoV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayMonitorInfoV2>> GetGatewayMonitorInfoAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets monitoring information related to the remote pod.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of PodMonitorInfoV2</returns>
        System.Threading.Tasks.Task<PodMonitorInfoV2> GetPodMonitorInfoV2Async (string id);

        /// <summary>
        /// Gets monitoring information related to the remote pod.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (PodMonitorInfoV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<PodMonitorInfoV2>> GetPodMonitorInfoV2AsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets monitoring information related to RDS Server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of RDSServerMonitorInfo</returns>
        System.Threading.Tasks.Task<RDSServerMonitorInfo> GetRDSServerMonitorsAsync (string id);

        /// <summary>
        /// Gets monitoring information related to RDS Server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (RDSServerMonitorInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<RDSServerMonitorInfo>> GetRDSServerMonitorsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets Monitoring Information related to a SAML Authenticator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of SAMLAuthenticatorMonitorInfoV2</returns>
        System.Threading.Tasks.Task<SAMLAuthenticatorMonitorInfoV2> GetSAMLAuthenticatorMonitorInfoAsync (string id);

        /// <summary>
        /// Gets Monitoring Information related to a SAML Authenticator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (SAMLAuthenticatorMonitorInfoV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<SAMLAuthenticatorMonitorInfoV2>> GetSAMLAuthenticatorMonitorInfoAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets monitoring information related to a True SSO connector.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of TrueSSOMonitorInfo</returns>
        System.Threading.Tasks.Task<TrueSSOMonitorInfo> GetTrueSSOMonitorInfoAsync (string id);

        /// <summary>
        /// Gets monitoring information related to a True SSO connector.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (TrueSSOMonitorInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrueSSOMonitorInfo>> GetTrueSSOMonitorInfoAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets monitoring information of view composer for a given virtual center
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcId">vcId</param>
        /// <returns>Task of ViewComposerMonitorInfoV2</returns>
        System.Threading.Tasks.Task<ViewComposerMonitorInfoV2> GetViewComposerByVCIdAsync (string vcId);

        /// <summary>
        /// Gets monitoring information of view composer for a given virtual center
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcId">vcId</param>
        /// <returns>Task of ApiResponse (ViewComposerMonitorInfoV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewComposerMonitorInfoV2>> GetViewComposerByVCIdAsyncWithHttpInfo (string vcId);
        /// <summary>
        /// Gets monitoring information related to Virtual Center.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of VirtualCenterMonitorInfoV2</returns>
        System.Threading.Tasks.Task<VirtualCenterMonitorInfoV2> GetVirtualCenterMonitorInfoAsync (string id);

        /// <summary>
        /// Gets monitoring information related to Virtual Center.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (VirtualCenterMonitorInfoV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<VirtualCenterMonitorInfoV2>> GetVirtualCenterMonitorInfoAsyncWithHttpInfo (string id);
        /// <summary>
        /// Lists monitoring information related to AD Domains of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ADDomainMonitorInfoV2&gt;</returns>
        System.Threading.Tasks.Task<List<ADDomainMonitorInfoV2>> ListADDomainMonitorInfosV2Async ();

        /// <summary>
        /// Lists monitoring information related to AD Domains of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ADDomainMonitorInfoV2&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ADDomainMonitorInfoV2>>> ListADDomainMonitorInfosV2AsyncWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to AD Domains of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ADDomainMonitorInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ADDomainMonitorInfo>> ListADDomainMonitorsAsync ();

        /// <summary>
        /// Lists monitoring information related to AD Domains of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ADDomainMonitorInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ADDomainMonitorInfo>>> ListADDomainMonitorsAsyncWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to Connection Servers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ConnectionServerMonitorInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ConnectionServerMonitorInfo>> ListConnectionServerMonitorsAsync ();

        /// <summary>
        /// Lists monitoring information related to Connection Servers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ConnectionServerMonitorInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ConnectionServerMonitorInfo>>> ListConnectionServerMonitorsAsyncWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to Connection Servers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ConnectionServerMonitorInfoV2&gt;</returns>
        System.Threading.Tasks.Task<List<ConnectionServerMonitorInfoV2>> ListConnectionServerMonitorsV2Async ();

        /// <summary>
        /// Lists monitoring information related to Connection Servers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ConnectionServerMonitorInfoV2&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ConnectionServerMonitorInfoV2>>> ListConnectionServerMonitorsV2AsyncWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to Farms of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FarmMonitorInfo&gt;</returns>
        System.Threading.Tasks.Task<List<FarmMonitorInfo>> ListFarmMonitorsAsync ();

        /// <summary>
        /// Lists monitoring information related to Farms of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FarmMonitorInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FarmMonitorInfo>>> ListFarmMonitorsAsyncWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to Gateways registered in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;GatewayMonitorInfo&gt;</returns>
        System.Threading.Tasks.Task<List<GatewayMonitorInfo>> ListGatewayMonitorInfoV1Async ();

        /// <summary>
        /// Lists monitoring information related to Gateways registered in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;GatewayMonitorInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GatewayMonitorInfo>>> ListGatewayMonitorInfoV1AsyncWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to Gateways registered in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;GatewayMonitorInfoV2&gt;</returns>
        System.Threading.Tasks.Task<List<GatewayMonitorInfoV2>> ListGatewayMonitorInfoV2Async ();

        /// <summary>
        /// Lists monitoring information related to Gateways registered in the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;GatewayMonitorInfoV2&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GatewayMonitorInfoV2>>> ListGatewayMonitorInfoV2AsyncWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to the remote pods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PodMonitorInfo&gt;</returns>
        System.Threading.Tasks.Task<List<PodMonitorInfo>> ListPodMonitorInfosV1Async ();

        /// <summary>
        /// Lists monitoring information related to the remote pods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PodMonitorInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PodMonitorInfo>>> ListPodMonitorInfosV1AsyncWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to the remote pods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PodMonitorInfoV2&gt;</returns>
        System.Threading.Tasks.Task<List<PodMonitorInfoV2>> ListPodMonitorInfosV2Async ();

        /// <summary>
        /// Lists monitoring information related to the remote pods.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PodMonitorInfoV2&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PodMonitorInfoV2>>> ListPodMonitorInfosV2AsyncWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to RDS Servers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RDSServerMonitorInfo&gt;</returns>
        System.Threading.Tasks.Task<List<RDSServerMonitorInfo>> ListRDSServerMonitorsAsync ();

        /// <summary>
        /// Lists monitoring information related to RDS Servers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RDSServerMonitorInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RDSServerMonitorInfo>>> ListRDSServerMonitorsAsyncWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to SAML Authenticators of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SAMLAuthenticatorMonitorInfo&gt;</returns>
        System.Threading.Tasks.Task<List<SAMLAuthenticatorMonitorInfo>> ListSAMLAuthenticatorMonitorsV1Async ();

        /// <summary>
        /// Lists monitoring information related to SAML Authenticators of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SAMLAuthenticatorMonitorInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SAMLAuthenticatorMonitorInfo>>> ListSAMLAuthenticatorMonitorsV1AsyncWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to SAML Authenticators of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SAMLAuthenticatorMonitorInfoV2&gt;</returns>
        System.Threading.Tasks.Task<List<SAMLAuthenticatorMonitorInfoV2>> ListSAMLAuthenticatorMonitorsV2Async ();

        /// <summary>
        /// Lists monitoring information related to SAML Authenticators of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SAMLAuthenticatorMonitorInfoV2&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SAMLAuthenticatorMonitorInfoV2>>> ListSAMLAuthenticatorMonitorsV2AsyncWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to True SSO connectors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TrueSSOMonitorInfo&gt;</returns>
        System.Threading.Tasks.Task<List<TrueSSOMonitorInfo>> ListTrueSSOMonitorInfosAsync ();

        /// <summary>
        /// Lists monitoring information related to True SSO connectors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TrueSSOMonitorInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrueSSOMonitorInfo>>> ListTrueSSOMonitorInfosAsyncWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to View Composers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ViewComposerMonitorInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ViewComposerMonitorInfo>> ListViewComposerMonitorsV1Async ();

        /// <summary>
        /// Lists monitoring information related to View Composers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ViewComposerMonitorInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ViewComposerMonitorInfo>>> ListViewComposerMonitorsV1AsyncWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to View Composers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ViewComposerMonitorInfoV2&gt;</returns>
        System.Threading.Tasks.Task<List<ViewComposerMonitorInfoV2>> ListViewComposerMonitorsV2Async ();

        /// <summary>
        /// Lists monitoring information related to View Composers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ViewComposerMonitorInfoV2&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ViewComposerMonitorInfoV2>>> ListViewComposerMonitorsV2AsyncWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to Virtual Centers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;VirtualCenterMonitorInfo&gt;</returns>
        System.Threading.Tasks.Task<List<VirtualCenterMonitorInfo>> ListVirtualCenterMonitorsAsync ();

        /// <summary>
        /// Lists monitoring information related to Virtual Centers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;VirtualCenterMonitorInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VirtualCenterMonitorInfo>>> ListVirtualCenterMonitorsAsyncWithHttpInfo ();
        /// <summary>
        /// Lists monitoring information related to Virtual Centers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;VirtualCenterMonitorInfoV2&gt;</returns>
        System.Threading.Tasks.Task<List<VirtualCenterMonitorInfoV2>> ListVirtualCenterMonitorsV2Async ();

        /// <summary>
        /// Lists monitoring information related to Virtual Centers of the environment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;VirtualCenterMonitorInfoV2&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VirtualCenterMonitorInfoV2>>> ListVirtualCenterMonitorsV2AsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MonitorApi : IMonitorApi
    {
        private VMware.Horizon.RESTAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MonitorApi(String basePath)
        {
            this.Configuration = new VMware.Horizon.RESTAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = VMware.Horizon.RESTAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MonitorApi(VMware.Horizon.RESTAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = VMware.Horizon.RESTAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VMware.Horizon.RESTAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VMware.Horizon.RESTAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VMware.Horizon.RESTAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets monitoring information related to Connection Server. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ConnectionServerMonitorInfoV2</returns>
        public ConnectionServerMonitorInfoV2 GetConnectionServerMonitorInfoV2 (string id)
        {
             ApiResponse<ConnectionServerMonitorInfoV2> localVarResponse = GetConnectionServerMonitorInfoV2WithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets monitoring information related to Connection Server. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ConnectionServerMonitorInfoV2</returns>
        public ApiResponse< ConnectionServerMonitorInfoV2 > GetConnectionServerMonitorInfoV2WithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitorApi->GetConnectionServerMonitorInfoV2");

            var localVarPath = "/monitor/v1/connection-servers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectionServerMonitorInfoV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectionServerMonitorInfoV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectionServerMonitorInfoV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectionServerMonitorInfoV2)));
        }

        /// <summary>
        /// Gets monitoring information related to Connection Server. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ConnectionServerMonitorInfoV2</returns>
        public async System.Threading.Tasks.Task<ConnectionServerMonitorInfoV2> GetConnectionServerMonitorInfoV2Async (string id)
        {
             ApiResponse<ConnectionServerMonitorInfoV2> localVarResponse = await GetConnectionServerMonitorInfoV2AsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets monitoring information related to Connection Server. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ConnectionServerMonitorInfoV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectionServerMonitorInfoV2>> GetConnectionServerMonitorInfoV2AsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitorApi->GetConnectionServerMonitorInfoV2");

            var localVarPath = "/monitor/v1/connection-servers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectionServerMonitorInfoV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectionServerMonitorInfoV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectionServerMonitorInfoV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectionServerMonitorInfoV2)));
        }

        /// <summary>
        /// Returns monitoring information related to Event database of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EventDatabaseMonitorInfo</returns>
        public EventDatabaseMonitorInfo GetEventDatabaseMonitor ()
        {
             ApiResponse<EventDatabaseMonitorInfo> localVarResponse = GetEventDatabaseMonitorWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns monitoring information related to Event database of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EventDatabaseMonitorInfo</returns>
        public ApiResponse< EventDatabaseMonitorInfo > GetEventDatabaseMonitorWithHttpInfo ()
        {

            var localVarPath = "/monitor/event-database";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventDatabaseMonitor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventDatabaseMonitorInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventDatabaseMonitorInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventDatabaseMonitorInfo)));
        }

        /// <summary>
        /// Returns monitoring information related to Event database of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EventDatabaseMonitorInfo</returns>
        public async System.Threading.Tasks.Task<EventDatabaseMonitorInfo> GetEventDatabaseMonitorAsync ()
        {
             ApiResponse<EventDatabaseMonitorInfo> localVarResponse = await GetEventDatabaseMonitorAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns monitoring information related to Event database of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EventDatabaseMonitorInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventDatabaseMonitorInfo>> GetEventDatabaseMonitorAsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/event-database";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventDatabaseMonitor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventDatabaseMonitorInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventDatabaseMonitorInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventDatabaseMonitorInfo)));
        }

        /// <summary>
        /// Gets monitoring information related to farm. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>FarmMonitorInfo</returns>
        public FarmMonitorInfo GetFarmMonitorInfo (string id)
        {
             ApiResponse<FarmMonitorInfo> localVarResponse = GetFarmMonitorInfoWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets monitoring information related to farm. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of FarmMonitorInfo</returns>
        public ApiResponse< FarmMonitorInfo > GetFarmMonitorInfoWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitorApi->GetFarmMonitorInfo");

            var localVarPath = "/monitor/v1/farms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFarmMonitorInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FarmMonitorInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FarmMonitorInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FarmMonitorInfo)));
        }

        /// <summary>
        /// Gets monitoring information related to farm. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of FarmMonitorInfo</returns>
        public async System.Threading.Tasks.Task<FarmMonitorInfo> GetFarmMonitorInfoAsync (string id)
        {
             ApiResponse<FarmMonitorInfo> localVarResponse = await GetFarmMonitorInfoAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets monitoring information related to farm. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (FarmMonitorInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FarmMonitorInfo>> GetFarmMonitorInfoAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitorApi->GetFarmMonitorInfo");

            var localVarPath = "/monitor/v1/farms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFarmMonitorInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FarmMonitorInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FarmMonitorInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FarmMonitorInfo)));
        }

        /// <summary>
        /// Gets monitoring information related to a Gateway. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>GatewayMonitorInfoV2</returns>
        public GatewayMonitorInfoV2 GetGatewayMonitorInfo (string id)
        {
             ApiResponse<GatewayMonitorInfoV2> localVarResponse = GetGatewayMonitorInfoWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets monitoring information related to a Gateway. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of GatewayMonitorInfoV2</returns>
        public ApiResponse< GatewayMonitorInfoV2 > GetGatewayMonitorInfoWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitorApi->GetGatewayMonitorInfo");

            var localVarPath = "/monitor/v1/gateways/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGatewayMonitorInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GatewayMonitorInfoV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GatewayMonitorInfoV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GatewayMonitorInfoV2)));
        }

        /// <summary>
        /// Gets monitoring information related to a Gateway. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of GatewayMonitorInfoV2</returns>
        public async System.Threading.Tasks.Task<GatewayMonitorInfoV2> GetGatewayMonitorInfoAsync (string id)
        {
             ApiResponse<GatewayMonitorInfoV2> localVarResponse = await GetGatewayMonitorInfoAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets monitoring information related to a Gateway. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (GatewayMonitorInfoV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GatewayMonitorInfoV2>> GetGatewayMonitorInfoAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitorApi->GetGatewayMonitorInfo");

            var localVarPath = "/monitor/v1/gateways/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGatewayMonitorInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GatewayMonitorInfoV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GatewayMonitorInfoV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GatewayMonitorInfoV2)));
        }

        /// <summary>
        /// Gets monitoring information related to the remote pod. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>PodMonitorInfoV2</returns>
        public PodMonitorInfoV2 GetPodMonitorInfoV2 (string id)
        {
             ApiResponse<PodMonitorInfoV2> localVarResponse = GetPodMonitorInfoV2WithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets monitoring information related to the remote pod. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of PodMonitorInfoV2</returns>
        public ApiResponse< PodMonitorInfoV2 > GetPodMonitorInfoV2WithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitorApi->GetPodMonitorInfoV2");

            var localVarPath = "/monitor/v1/pods/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPodMonitorInfoV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PodMonitorInfoV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PodMonitorInfoV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PodMonitorInfoV2)));
        }

        /// <summary>
        /// Gets monitoring information related to the remote pod. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of PodMonitorInfoV2</returns>
        public async System.Threading.Tasks.Task<PodMonitorInfoV2> GetPodMonitorInfoV2Async (string id)
        {
             ApiResponse<PodMonitorInfoV2> localVarResponse = await GetPodMonitorInfoV2AsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets monitoring information related to the remote pod. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (PodMonitorInfoV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PodMonitorInfoV2>> GetPodMonitorInfoV2AsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitorApi->GetPodMonitorInfoV2");

            var localVarPath = "/monitor/v1/pods/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPodMonitorInfoV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PodMonitorInfoV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PodMonitorInfoV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PodMonitorInfoV2)));
        }

        /// <summary>
        /// Gets monitoring information related to RDS Server. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>RDSServerMonitorInfo</returns>
        public RDSServerMonitorInfo GetRDSServerMonitors (string id)
        {
             ApiResponse<RDSServerMonitorInfo> localVarResponse = GetRDSServerMonitorsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets monitoring information related to RDS Server. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of RDSServerMonitorInfo</returns>
        public ApiResponse< RDSServerMonitorInfo > GetRDSServerMonitorsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitorApi->GetRDSServerMonitors");

            var localVarPath = "/monitor/v1/rds-servers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRDSServerMonitors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RDSServerMonitorInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RDSServerMonitorInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RDSServerMonitorInfo)));
        }

        /// <summary>
        /// Gets monitoring information related to RDS Server. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of RDSServerMonitorInfo</returns>
        public async System.Threading.Tasks.Task<RDSServerMonitorInfo> GetRDSServerMonitorsAsync (string id)
        {
             ApiResponse<RDSServerMonitorInfo> localVarResponse = await GetRDSServerMonitorsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets monitoring information related to RDS Server. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (RDSServerMonitorInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RDSServerMonitorInfo>> GetRDSServerMonitorsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitorApi->GetRDSServerMonitors");

            var localVarPath = "/monitor/v1/rds-servers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRDSServerMonitors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RDSServerMonitorInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RDSServerMonitorInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RDSServerMonitorInfo)));
        }

        /// <summary>
        /// Gets Monitoring Information related to a SAML Authenticator 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>SAMLAuthenticatorMonitorInfoV2</returns>
        public SAMLAuthenticatorMonitorInfoV2 GetSAMLAuthenticatorMonitorInfo (string id)
        {
             ApiResponse<SAMLAuthenticatorMonitorInfoV2> localVarResponse = GetSAMLAuthenticatorMonitorInfoWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Monitoring Information related to a SAML Authenticator 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of SAMLAuthenticatorMonitorInfoV2</returns>
        public ApiResponse< SAMLAuthenticatorMonitorInfoV2 > GetSAMLAuthenticatorMonitorInfoWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitorApi->GetSAMLAuthenticatorMonitorInfo");

            var localVarPath = "/monitor/v1/saml-authenticators/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSAMLAuthenticatorMonitorInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SAMLAuthenticatorMonitorInfoV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SAMLAuthenticatorMonitorInfoV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SAMLAuthenticatorMonitorInfoV2)));
        }

        /// <summary>
        /// Gets Monitoring Information related to a SAML Authenticator 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of SAMLAuthenticatorMonitorInfoV2</returns>
        public async System.Threading.Tasks.Task<SAMLAuthenticatorMonitorInfoV2> GetSAMLAuthenticatorMonitorInfoAsync (string id)
        {
             ApiResponse<SAMLAuthenticatorMonitorInfoV2> localVarResponse = await GetSAMLAuthenticatorMonitorInfoAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Monitoring Information related to a SAML Authenticator 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (SAMLAuthenticatorMonitorInfoV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SAMLAuthenticatorMonitorInfoV2>> GetSAMLAuthenticatorMonitorInfoAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitorApi->GetSAMLAuthenticatorMonitorInfo");

            var localVarPath = "/monitor/v1/saml-authenticators/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSAMLAuthenticatorMonitorInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SAMLAuthenticatorMonitorInfoV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SAMLAuthenticatorMonitorInfoV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SAMLAuthenticatorMonitorInfoV2)));
        }

        /// <summary>
        /// Gets monitoring information related to a True SSO connector. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>TrueSSOMonitorInfo</returns>
        public TrueSSOMonitorInfo GetTrueSSOMonitorInfo (string id)
        {
             ApiResponse<TrueSSOMonitorInfo> localVarResponse = GetTrueSSOMonitorInfoWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets monitoring information related to a True SSO connector. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of TrueSSOMonitorInfo</returns>
        public ApiResponse< TrueSSOMonitorInfo > GetTrueSSOMonitorInfoWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitorApi->GetTrueSSOMonitorInfo");

            var localVarPath = "/monitor/v1/true-sso/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrueSSOMonitorInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrueSSOMonitorInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrueSSOMonitorInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrueSSOMonitorInfo)));
        }

        /// <summary>
        /// Gets monitoring information related to a True SSO connector. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of TrueSSOMonitorInfo</returns>
        public async System.Threading.Tasks.Task<TrueSSOMonitorInfo> GetTrueSSOMonitorInfoAsync (string id)
        {
             ApiResponse<TrueSSOMonitorInfo> localVarResponse = await GetTrueSSOMonitorInfoAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets monitoring information related to a True SSO connector. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (TrueSSOMonitorInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrueSSOMonitorInfo>> GetTrueSSOMonitorInfoAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitorApi->GetTrueSSOMonitorInfo");

            var localVarPath = "/monitor/v1/true-sso/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrueSSOMonitorInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrueSSOMonitorInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrueSSOMonitorInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrueSSOMonitorInfo)));
        }

        /// <summary>
        /// Gets monitoring information of view composer for a given virtual center 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcId">vcId</param>
        /// <returns>ViewComposerMonitorInfoV2</returns>
        public ViewComposerMonitorInfoV2 GetViewComposerByVCId (string vcId)
        {
             ApiResponse<ViewComposerMonitorInfoV2> localVarResponse = GetViewComposerByVCIdWithHttpInfo(vcId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets monitoring information of view composer for a given virtual center 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcId">vcId</param>
        /// <returns>ApiResponse of ViewComposerMonitorInfoV2</returns>
        public ApiResponse< ViewComposerMonitorInfoV2 > GetViewComposerByVCIdWithHttpInfo (string vcId)
        {
            // verify the required parameter 'vcId' is set
            if (vcId == null)
                throw new ApiException(400, "Missing required parameter 'vcId' when calling MonitorApi->GetViewComposerByVCId");

            var localVarPath = "/monitor/v1/view-composers/{vcId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcId != null) localVarPathParams.Add("vcId", this.Configuration.ApiClient.ParameterToString(vcId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetViewComposerByVCId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewComposerMonitorInfoV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewComposerMonitorInfoV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewComposerMonitorInfoV2)));
        }

        /// <summary>
        /// Gets monitoring information of view composer for a given virtual center 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcId">vcId</param>
        /// <returns>Task of ViewComposerMonitorInfoV2</returns>
        public async System.Threading.Tasks.Task<ViewComposerMonitorInfoV2> GetViewComposerByVCIdAsync (string vcId)
        {
             ApiResponse<ViewComposerMonitorInfoV2> localVarResponse = await GetViewComposerByVCIdAsyncWithHttpInfo(vcId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets monitoring information of view composer for a given virtual center 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcId">vcId</param>
        /// <returns>Task of ApiResponse (ViewComposerMonitorInfoV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewComposerMonitorInfoV2>> GetViewComposerByVCIdAsyncWithHttpInfo (string vcId)
        {
            // verify the required parameter 'vcId' is set
            if (vcId == null)
                throw new ApiException(400, "Missing required parameter 'vcId' when calling MonitorApi->GetViewComposerByVCId");

            var localVarPath = "/monitor/v1/view-composers/{vcId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcId != null) localVarPathParams.Add("vcId", this.Configuration.ApiClient.ParameterToString(vcId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetViewComposerByVCId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewComposerMonitorInfoV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewComposerMonitorInfoV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewComposerMonitorInfoV2)));
        }

        /// <summary>
        /// Gets monitoring information related to Virtual Center. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>VirtualCenterMonitorInfoV2</returns>
        public VirtualCenterMonitorInfoV2 GetVirtualCenterMonitorInfo (string id)
        {
             ApiResponse<VirtualCenterMonitorInfoV2> localVarResponse = GetVirtualCenterMonitorInfoWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets monitoring information related to Virtual Center. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of VirtualCenterMonitorInfoV2</returns>
        public ApiResponse< VirtualCenterMonitorInfoV2 > GetVirtualCenterMonitorInfoWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitorApi->GetVirtualCenterMonitorInfo");

            var localVarPath = "/monitor/v1/virtual-centers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVirtualCenterMonitorInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VirtualCenterMonitorInfoV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VirtualCenterMonitorInfoV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VirtualCenterMonitorInfoV2)));
        }

        /// <summary>
        /// Gets monitoring information related to Virtual Center. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of VirtualCenterMonitorInfoV2</returns>
        public async System.Threading.Tasks.Task<VirtualCenterMonitorInfoV2> GetVirtualCenterMonitorInfoAsync (string id)
        {
             ApiResponse<VirtualCenterMonitorInfoV2> localVarResponse = await GetVirtualCenterMonitorInfoAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets monitoring information related to Virtual Center. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (VirtualCenterMonitorInfoV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VirtualCenterMonitorInfoV2>> GetVirtualCenterMonitorInfoAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MonitorApi->GetVirtualCenterMonitorInfo");

            var localVarPath = "/monitor/v1/virtual-centers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVirtualCenterMonitorInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VirtualCenterMonitorInfoV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VirtualCenterMonitorInfoV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VirtualCenterMonitorInfoV2)));
        }

        /// <summary>
        /// Lists monitoring information related to AD Domains of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ADDomainMonitorInfoV2&gt;</returns>
        public List<ADDomainMonitorInfoV2> ListADDomainMonitorInfosV2 ()
        {
             ApiResponse<List<ADDomainMonitorInfoV2>> localVarResponse = ListADDomainMonitorInfosV2WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to AD Domains of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ADDomainMonitorInfoV2&gt;</returns>
        public ApiResponse< List<ADDomainMonitorInfoV2> > ListADDomainMonitorInfosV2WithHttpInfo ()
        {

            var localVarPath = "/monitor/v2/ad-domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListADDomainMonitorInfosV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ADDomainMonitorInfoV2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ADDomainMonitorInfoV2>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ADDomainMonitorInfoV2>)));
        }

        /// <summary>
        /// Lists monitoring information related to AD Domains of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ADDomainMonitorInfoV2&gt;</returns>
        public async System.Threading.Tasks.Task<List<ADDomainMonitorInfoV2>> ListADDomainMonitorInfosV2Async ()
        {
             ApiResponse<List<ADDomainMonitorInfoV2>> localVarResponse = await ListADDomainMonitorInfosV2AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to AD Domains of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ADDomainMonitorInfoV2&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ADDomainMonitorInfoV2>>> ListADDomainMonitorInfosV2AsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/v2/ad-domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListADDomainMonitorInfosV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ADDomainMonitorInfoV2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ADDomainMonitorInfoV2>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ADDomainMonitorInfoV2>)));
        }

        /// <summary>
        /// Lists monitoring information related to AD Domains of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ADDomainMonitorInfo&gt;</returns>
        public List<ADDomainMonitorInfo> ListADDomainMonitors ()
        {
             ApiResponse<List<ADDomainMonitorInfo>> localVarResponse = ListADDomainMonitorsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to AD Domains of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ADDomainMonitorInfo&gt;</returns>
        public ApiResponse< List<ADDomainMonitorInfo> > ListADDomainMonitorsWithHttpInfo ()
        {

            var localVarPath = "/monitor/ad-domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListADDomainMonitors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ADDomainMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ADDomainMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ADDomainMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to AD Domains of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ADDomainMonitorInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ADDomainMonitorInfo>> ListADDomainMonitorsAsync ()
        {
             ApiResponse<List<ADDomainMonitorInfo>> localVarResponse = await ListADDomainMonitorsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to AD Domains of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ADDomainMonitorInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ADDomainMonitorInfo>>> ListADDomainMonitorsAsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/ad-domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListADDomainMonitors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ADDomainMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ADDomainMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ADDomainMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to Connection Servers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ConnectionServerMonitorInfo&gt;</returns>
        public List<ConnectionServerMonitorInfo> ListConnectionServerMonitors ()
        {
             ApiResponse<List<ConnectionServerMonitorInfo>> localVarResponse = ListConnectionServerMonitorsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to Connection Servers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ConnectionServerMonitorInfo&gt;</returns>
        public ApiResponse< List<ConnectionServerMonitorInfo> > ListConnectionServerMonitorsWithHttpInfo ()
        {

            var localVarPath = "/monitor/connection-servers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListConnectionServerMonitors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ConnectionServerMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ConnectionServerMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ConnectionServerMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to Connection Servers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ConnectionServerMonitorInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ConnectionServerMonitorInfo>> ListConnectionServerMonitorsAsync ()
        {
             ApiResponse<List<ConnectionServerMonitorInfo>> localVarResponse = await ListConnectionServerMonitorsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to Connection Servers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ConnectionServerMonitorInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ConnectionServerMonitorInfo>>> ListConnectionServerMonitorsAsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/connection-servers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListConnectionServerMonitors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ConnectionServerMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ConnectionServerMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ConnectionServerMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to Connection Servers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ConnectionServerMonitorInfoV2&gt;</returns>
        public List<ConnectionServerMonitorInfoV2> ListConnectionServerMonitorsV2 ()
        {
             ApiResponse<List<ConnectionServerMonitorInfoV2>> localVarResponse = ListConnectionServerMonitorsV2WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to Connection Servers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ConnectionServerMonitorInfoV2&gt;</returns>
        public ApiResponse< List<ConnectionServerMonitorInfoV2> > ListConnectionServerMonitorsV2WithHttpInfo ()
        {

            var localVarPath = "/monitor/v2/connection-servers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListConnectionServerMonitorsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ConnectionServerMonitorInfoV2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ConnectionServerMonitorInfoV2>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ConnectionServerMonitorInfoV2>)));
        }

        /// <summary>
        /// Lists monitoring information related to Connection Servers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ConnectionServerMonitorInfoV2&gt;</returns>
        public async System.Threading.Tasks.Task<List<ConnectionServerMonitorInfoV2>> ListConnectionServerMonitorsV2Async ()
        {
             ApiResponse<List<ConnectionServerMonitorInfoV2>> localVarResponse = await ListConnectionServerMonitorsV2AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to Connection Servers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ConnectionServerMonitorInfoV2&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ConnectionServerMonitorInfoV2>>> ListConnectionServerMonitorsV2AsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/v2/connection-servers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListConnectionServerMonitorsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ConnectionServerMonitorInfoV2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ConnectionServerMonitorInfoV2>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ConnectionServerMonitorInfoV2>)));
        }

        /// <summary>
        /// Lists monitoring information related to Farms of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FarmMonitorInfo&gt;</returns>
        public List<FarmMonitorInfo> ListFarmMonitors ()
        {
             ApiResponse<List<FarmMonitorInfo>> localVarResponse = ListFarmMonitorsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to Farms of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FarmMonitorInfo&gt;</returns>
        public ApiResponse< List<FarmMonitorInfo> > ListFarmMonitorsWithHttpInfo ()
        {

            var localVarPath = "/monitor/farms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFarmMonitors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FarmMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FarmMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FarmMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to Farms of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FarmMonitorInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<FarmMonitorInfo>> ListFarmMonitorsAsync ()
        {
             ApiResponse<List<FarmMonitorInfo>> localVarResponse = await ListFarmMonitorsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to Farms of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FarmMonitorInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FarmMonitorInfo>>> ListFarmMonitorsAsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/farms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFarmMonitors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FarmMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FarmMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FarmMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to Gateways registered in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;GatewayMonitorInfo&gt;</returns>
        public List<GatewayMonitorInfo> ListGatewayMonitorInfoV1 ()
        {
             ApiResponse<List<GatewayMonitorInfo>> localVarResponse = ListGatewayMonitorInfoV1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to Gateways registered in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;GatewayMonitorInfo&gt;</returns>
        public ApiResponse< List<GatewayMonitorInfo> > ListGatewayMonitorInfoV1WithHttpInfo ()
        {

            var localVarPath = "/monitor/gateways";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGatewayMonitorInfoV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GatewayMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GatewayMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GatewayMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to Gateways registered in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;GatewayMonitorInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<GatewayMonitorInfo>> ListGatewayMonitorInfoV1Async ()
        {
             ApiResponse<List<GatewayMonitorInfo>> localVarResponse = await ListGatewayMonitorInfoV1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to Gateways registered in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;GatewayMonitorInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GatewayMonitorInfo>>> ListGatewayMonitorInfoV1AsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/gateways";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGatewayMonitorInfoV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GatewayMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GatewayMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GatewayMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to Gateways registered in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;GatewayMonitorInfoV2&gt;</returns>
        public List<GatewayMonitorInfoV2> ListGatewayMonitorInfoV2 ()
        {
             ApiResponse<List<GatewayMonitorInfoV2>> localVarResponse = ListGatewayMonitorInfoV2WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to Gateways registered in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;GatewayMonitorInfoV2&gt;</returns>
        public ApiResponse< List<GatewayMonitorInfoV2> > ListGatewayMonitorInfoV2WithHttpInfo ()
        {

            var localVarPath = "/monitor/v2/gateways";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGatewayMonitorInfoV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GatewayMonitorInfoV2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GatewayMonitorInfoV2>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GatewayMonitorInfoV2>)));
        }

        /// <summary>
        /// Lists monitoring information related to Gateways registered in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;GatewayMonitorInfoV2&gt;</returns>
        public async System.Threading.Tasks.Task<List<GatewayMonitorInfoV2>> ListGatewayMonitorInfoV2Async ()
        {
             ApiResponse<List<GatewayMonitorInfoV2>> localVarResponse = await ListGatewayMonitorInfoV2AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to Gateways registered in the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;GatewayMonitorInfoV2&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GatewayMonitorInfoV2>>> ListGatewayMonitorInfoV2AsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/v2/gateways";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListGatewayMonitorInfoV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GatewayMonitorInfoV2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GatewayMonitorInfoV2>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GatewayMonitorInfoV2>)));
        }

        /// <summary>
        /// Lists monitoring information related to the remote pods. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PodMonitorInfo&gt;</returns>
        public List<PodMonitorInfo> ListPodMonitorInfosV1 ()
        {
             ApiResponse<List<PodMonitorInfo>> localVarResponse = ListPodMonitorInfosV1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to the remote pods. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PodMonitorInfo&gt;</returns>
        public ApiResponse< List<PodMonitorInfo> > ListPodMonitorInfosV1WithHttpInfo ()
        {

            var localVarPath = "/monitor/v1/pods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPodMonitorInfosV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PodMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PodMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PodMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to the remote pods. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PodMonitorInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<PodMonitorInfo>> ListPodMonitorInfosV1Async ()
        {
             ApiResponse<List<PodMonitorInfo>> localVarResponse = await ListPodMonitorInfosV1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to the remote pods. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PodMonitorInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PodMonitorInfo>>> ListPodMonitorInfosV1AsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/v1/pods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPodMonitorInfosV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PodMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PodMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PodMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to the remote pods. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PodMonitorInfoV2&gt;</returns>
        public List<PodMonitorInfoV2> ListPodMonitorInfosV2 ()
        {
             ApiResponse<List<PodMonitorInfoV2>> localVarResponse = ListPodMonitorInfosV2WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to the remote pods. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PodMonitorInfoV2&gt;</returns>
        public ApiResponse< List<PodMonitorInfoV2> > ListPodMonitorInfosV2WithHttpInfo ()
        {

            var localVarPath = "/monitor/v2/pods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPodMonitorInfosV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PodMonitorInfoV2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PodMonitorInfoV2>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PodMonitorInfoV2>)));
        }

        /// <summary>
        /// Lists monitoring information related to the remote pods. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PodMonitorInfoV2&gt;</returns>
        public async System.Threading.Tasks.Task<List<PodMonitorInfoV2>> ListPodMonitorInfosV2Async ()
        {
             ApiResponse<List<PodMonitorInfoV2>> localVarResponse = await ListPodMonitorInfosV2AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to the remote pods. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PodMonitorInfoV2&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PodMonitorInfoV2>>> ListPodMonitorInfosV2AsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/v2/pods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPodMonitorInfosV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PodMonitorInfoV2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PodMonitorInfoV2>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PodMonitorInfoV2>)));
        }

        /// <summary>
        /// Lists monitoring information related to RDS Servers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RDSServerMonitorInfo&gt;</returns>
        public List<RDSServerMonitorInfo> ListRDSServerMonitors ()
        {
             ApiResponse<List<RDSServerMonitorInfo>> localVarResponse = ListRDSServerMonitorsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to RDS Servers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RDSServerMonitorInfo&gt;</returns>
        public ApiResponse< List<RDSServerMonitorInfo> > ListRDSServerMonitorsWithHttpInfo ()
        {

            var localVarPath = "/monitor/rds-servers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRDSServerMonitors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RDSServerMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RDSServerMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RDSServerMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to RDS Servers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RDSServerMonitorInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<RDSServerMonitorInfo>> ListRDSServerMonitorsAsync ()
        {
             ApiResponse<List<RDSServerMonitorInfo>> localVarResponse = await ListRDSServerMonitorsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to RDS Servers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RDSServerMonitorInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RDSServerMonitorInfo>>> ListRDSServerMonitorsAsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/rds-servers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRDSServerMonitors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RDSServerMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RDSServerMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RDSServerMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to SAML Authenticators of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SAMLAuthenticatorMonitorInfo&gt;</returns>
        public List<SAMLAuthenticatorMonitorInfo> ListSAMLAuthenticatorMonitorsV1 ()
        {
             ApiResponse<List<SAMLAuthenticatorMonitorInfo>> localVarResponse = ListSAMLAuthenticatorMonitorsV1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to SAML Authenticators of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SAMLAuthenticatorMonitorInfo&gt;</returns>
        public ApiResponse< List<SAMLAuthenticatorMonitorInfo> > ListSAMLAuthenticatorMonitorsV1WithHttpInfo ()
        {

            var localVarPath = "/monitor/saml-authenticators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSAMLAuthenticatorMonitorsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SAMLAuthenticatorMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SAMLAuthenticatorMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SAMLAuthenticatorMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to SAML Authenticators of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SAMLAuthenticatorMonitorInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<SAMLAuthenticatorMonitorInfo>> ListSAMLAuthenticatorMonitorsV1Async ()
        {
             ApiResponse<List<SAMLAuthenticatorMonitorInfo>> localVarResponse = await ListSAMLAuthenticatorMonitorsV1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to SAML Authenticators of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SAMLAuthenticatorMonitorInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SAMLAuthenticatorMonitorInfo>>> ListSAMLAuthenticatorMonitorsV1AsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/saml-authenticators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSAMLAuthenticatorMonitorsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SAMLAuthenticatorMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SAMLAuthenticatorMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SAMLAuthenticatorMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to SAML Authenticators of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SAMLAuthenticatorMonitorInfoV2&gt;</returns>
        public List<SAMLAuthenticatorMonitorInfoV2> ListSAMLAuthenticatorMonitorsV2 ()
        {
             ApiResponse<List<SAMLAuthenticatorMonitorInfoV2>> localVarResponse = ListSAMLAuthenticatorMonitorsV2WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to SAML Authenticators of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SAMLAuthenticatorMonitorInfoV2&gt;</returns>
        public ApiResponse< List<SAMLAuthenticatorMonitorInfoV2> > ListSAMLAuthenticatorMonitorsV2WithHttpInfo ()
        {

            var localVarPath = "/monitor/v2/saml-authenticators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSAMLAuthenticatorMonitorsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SAMLAuthenticatorMonitorInfoV2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SAMLAuthenticatorMonitorInfoV2>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SAMLAuthenticatorMonitorInfoV2>)));
        }

        /// <summary>
        /// Lists monitoring information related to SAML Authenticators of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SAMLAuthenticatorMonitorInfoV2&gt;</returns>
        public async System.Threading.Tasks.Task<List<SAMLAuthenticatorMonitorInfoV2>> ListSAMLAuthenticatorMonitorsV2Async ()
        {
             ApiResponse<List<SAMLAuthenticatorMonitorInfoV2>> localVarResponse = await ListSAMLAuthenticatorMonitorsV2AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to SAML Authenticators of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SAMLAuthenticatorMonitorInfoV2&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SAMLAuthenticatorMonitorInfoV2>>> ListSAMLAuthenticatorMonitorsV2AsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/v2/saml-authenticators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSAMLAuthenticatorMonitorsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SAMLAuthenticatorMonitorInfoV2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SAMLAuthenticatorMonitorInfoV2>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SAMLAuthenticatorMonitorInfoV2>)));
        }

        /// <summary>
        /// Lists monitoring information related to True SSO connectors. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TrueSSOMonitorInfo&gt;</returns>
        public List<TrueSSOMonitorInfo> ListTrueSSOMonitorInfos ()
        {
             ApiResponse<List<TrueSSOMonitorInfo>> localVarResponse = ListTrueSSOMonitorInfosWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to True SSO connectors. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TrueSSOMonitorInfo&gt;</returns>
        public ApiResponse< List<TrueSSOMonitorInfo> > ListTrueSSOMonitorInfosWithHttpInfo ()
        {

            var localVarPath = "/monitor/v1/true-sso";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTrueSSOMonitorInfos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrueSSOMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TrueSSOMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrueSSOMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to True SSO connectors. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TrueSSOMonitorInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrueSSOMonitorInfo>> ListTrueSSOMonitorInfosAsync ()
        {
             ApiResponse<List<TrueSSOMonitorInfo>> localVarResponse = await ListTrueSSOMonitorInfosAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to True SSO connectors. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TrueSSOMonitorInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TrueSSOMonitorInfo>>> ListTrueSSOMonitorInfosAsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/v1/true-sso";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTrueSSOMonitorInfos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrueSSOMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TrueSSOMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrueSSOMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to View Composers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ViewComposerMonitorInfo&gt;</returns>
        public List<ViewComposerMonitorInfo> ListViewComposerMonitorsV1 ()
        {
             ApiResponse<List<ViewComposerMonitorInfo>> localVarResponse = ListViewComposerMonitorsV1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to View Composers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ViewComposerMonitorInfo&gt;</returns>
        public ApiResponse< List<ViewComposerMonitorInfo> > ListViewComposerMonitorsV1WithHttpInfo ()
        {

            var localVarPath = "/monitor/view-composers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListViewComposerMonitorsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ViewComposerMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ViewComposerMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ViewComposerMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to View Composers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ViewComposerMonitorInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ViewComposerMonitorInfo>> ListViewComposerMonitorsV1Async ()
        {
             ApiResponse<List<ViewComposerMonitorInfo>> localVarResponse = await ListViewComposerMonitorsV1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to View Composers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ViewComposerMonitorInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ViewComposerMonitorInfo>>> ListViewComposerMonitorsV1AsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/view-composers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListViewComposerMonitorsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ViewComposerMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ViewComposerMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ViewComposerMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to View Composers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ViewComposerMonitorInfoV2&gt;</returns>
        public List<ViewComposerMonitorInfoV2> ListViewComposerMonitorsV2 ()
        {
             ApiResponse<List<ViewComposerMonitorInfoV2>> localVarResponse = ListViewComposerMonitorsV2WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to View Composers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ViewComposerMonitorInfoV2&gt;</returns>
        public ApiResponse< List<ViewComposerMonitorInfoV2> > ListViewComposerMonitorsV2WithHttpInfo ()
        {

            var localVarPath = "/monitor/v2/view-composers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListViewComposerMonitorsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ViewComposerMonitorInfoV2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ViewComposerMonitorInfoV2>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ViewComposerMonitorInfoV2>)));
        }

        /// <summary>
        /// Lists monitoring information related to View Composers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ViewComposerMonitorInfoV2&gt;</returns>
        public async System.Threading.Tasks.Task<List<ViewComposerMonitorInfoV2>> ListViewComposerMonitorsV2Async ()
        {
             ApiResponse<List<ViewComposerMonitorInfoV2>> localVarResponse = await ListViewComposerMonitorsV2AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to View Composers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ViewComposerMonitorInfoV2&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ViewComposerMonitorInfoV2>>> ListViewComposerMonitorsV2AsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/v2/view-composers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListViewComposerMonitorsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ViewComposerMonitorInfoV2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ViewComposerMonitorInfoV2>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ViewComposerMonitorInfoV2>)));
        }

        /// <summary>
        /// Lists monitoring information related to Virtual Centers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;VirtualCenterMonitorInfo&gt;</returns>
        public List<VirtualCenterMonitorInfo> ListVirtualCenterMonitors ()
        {
             ApiResponse<List<VirtualCenterMonitorInfo>> localVarResponse = ListVirtualCenterMonitorsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to Virtual Centers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;VirtualCenterMonitorInfo&gt;</returns>
        public ApiResponse< List<VirtualCenterMonitorInfo> > ListVirtualCenterMonitorsWithHttpInfo ()
        {

            var localVarPath = "/monitor/virtual-centers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListVirtualCenterMonitors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VirtualCenterMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VirtualCenterMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VirtualCenterMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to Virtual Centers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;VirtualCenterMonitorInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<VirtualCenterMonitorInfo>> ListVirtualCenterMonitorsAsync ()
        {
             ApiResponse<List<VirtualCenterMonitorInfo>> localVarResponse = await ListVirtualCenterMonitorsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to Virtual Centers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;VirtualCenterMonitorInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VirtualCenterMonitorInfo>>> ListVirtualCenterMonitorsAsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/virtual-centers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListVirtualCenterMonitors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VirtualCenterMonitorInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VirtualCenterMonitorInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VirtualCenterMonitorInfo>)));
        }

        /// <summary>
        /// Lists monitoring information related to Virtual Centers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;VirtualCenterMonitorInfoV2&gt;</returns>
        public List<VirtualCenterMonitorInfoV2> ListVirtualCenterMonitorsV2 ()
        {
             ApiResponse<List<VirtualCenterMonitorInfoV2>> localVarResponse = ListVirtualCenterMonitorsV2WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists monitoring information related to Virtual Centers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;VirtualCenterMonitorInfoV2&gt;</returns>
        public ApiResponse< List<VirtualCenterMonitorInfoV2> > ListVirtualCenterMonitorsV2WithHttpInfo ()
        {

            var localVarPath = "/monitor/v2/virtual-centers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListVirtualCenterMonitorsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VirtualCenterMonitorInfoV2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VirtualCenterMonitorInfoV2>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VirtualCenterMonitorInfoV2>)));
        }

        /// <summary>
        /// Lists monitoring information related to Virtual Centers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;VirtualCenterMonitorInfoV2&gt;</returns>
        public async System.Threading.Tasks.Task<List<VirtualCenterMonitorInfoV2>> ListVirtualCenterMonitorsV2Async ()
        {
             ApiResponse<List<VirtualCenterMonitorInfoV2>> localVarResponse = await ListVirtualCenterMonitorsV2AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists monitoring information related to Virtual Centers of the environment. 
        /// </summary>
        /// <exception cref="VMware.Horizon.RESTAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;VirtualCenterMonitorInfoV2&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VirtualCenterMonitorInfoV2>>> ListVirtualCenterMonitorsV2AsyncWithHttpInfo ()
        {

            var localVarPath = "/monitor/v2/virtual-centers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListVirtualCenterMonitorsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VirtualCenterMonitorInfoV2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VirtualCenterMonitorInfoV2>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VirtualCenterMonitorInfoV2>)));
        }

    }
}
